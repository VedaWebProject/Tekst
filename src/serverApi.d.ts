/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/admin": {
    /** Hello Admin */
    get: operations["helloAdmin"];
  };
  "/layers/plaintext/{layerId}": {
    /**
     * Get Plaintext Layer 
     * @description Returns the data for a PlainText data layer
     */
    get: operations["getPlaintextLayer"];
  };
  "/layers/plaintext": {
    /**
     * Create Plaintext Layer 
     * @description Creates a PlainText data layer definition
     */
    post: operations["createPlaintextLayer"];
    /**
     * Update Plaintext Layer 
     * @description Updates the data for a PlainText data layer
     */
    patch: operations["updatePlaintextLayer"];
  };
  "/layers": {
    /** Get Layers */
    get: operations["getLayers"];
  };
  "/layers/{layerId}": {
    /** Get Layer */
    get: operations["getLayer"];
  };
  "/nodes": {
    /** Get Nodes */
    get: operations["getNodes"];
    /** Create Node */
    post: operations["createNode"];
    /** Update Node */
    patch: operations["updateNode"];
  };
  "/nodes/{nodeId}/children": {
    /** Get Children */
    get: operations["getChildren"];
  };
  "/nodes/{nodeId}/next": {
    /** Get Next */
    get: operations["getNext"];
  };
  "/texts": {
    /** Get All Texts */
    get: operations["getAllTexts"];
    /** Create Text */
    post: operations["createText"];
    /** Update Text */
    patch: operations["updateText"];
  };
  "/texts/import": {
    /** Import Text */
    post: operations["importText"];
  };
  "/texts/{textId}": {
    /** Get Text By Id */
    get: operations["getTextById"];
  };
  "/uidata": {
    /**
     * Data the client needs to display in the UI 
     * @description Returns data the client needs to initialize
     */
    get: operations["uidata"];
  };
  "/uidata/platform": {
    /**
     * Platform metadata 
     * @description Returns platform metadata, possibly customized for this platform instance.
     */
    get: operations["uidataPlatform"];
  };
  "/uidata/i18n": {
    /**
     * Get server-managed translations 
     * @description Returns server-managed translations.
     */
    get: operations["uidataI18n"];
  };
  "/units/plaintext/{unitId}": {
    /**
     * Get Plaintext Unit 
     * @description Returns the data for a PlainText data layer unit
     */
    get: operations["getPlaintextUnit"];
  };
  "/units/plaintext": {
    /**
     * Create Plaintext Unit 
     * @description Creates a PlainText data layer unit
     */
    post: operations["createPlaintextUnit"];
    /**
     * Update Plaintext Unit 
     * @description Updates the data for a PlainText data layer unit
     */
    patch: operations["updatePlaintextUnit"];
  };
  "/auth/cookie/login": {
    /** Auth:Cookie.Login */
    post: operations["auth:cookie.login"];
  };
  "/auth/cookie/logout": {
    /** Auth:Cookie.Logout */
    post: operations["auth:cookie.logout"];
  };
  "/auth/jwt/login": {
    /** Auth:Jwt.Login */
    post: operations["auth:jwt.login"];
  };
  "/auth/jwt/logout": {
    /** Auth:Jwt.Logout */
    post: operations["auth:jwt.logout"];
  };
  "/auth/register": {
    /** Register:Register */
    post: operations["register:register"];
  };
  "/auth/request-verify-token": {
    /** Verify:Request-Token */
    post: operations["verify:requestToken"];
  };
  "/auth/verify": {
    /** Verify:Verify */
    post: operations["verify:verify"];
  };
  "/auth/forgot-password": {
    /** Reset:Forgot Password */
    post: operations["reset:forgotPassword"];
  };
  "/auth/reset-password": {
    /** Reset:Reset Password */
    post: operations["reset:resetPassword"];
  };
  "/users/me": {
    /** Users:Current User */
    get: operations["users:currentUser"];
    /** Users:Patch Current User */
    patch: operations["users:patchCurrentUser"];
  };
  "/users/{id}": {
    /** Users:User */
    get: operations["users:user"];
    /** Users:Delete User */
    delete: operations["users:deleteUser"];
    /** Users:Patch User */
    patch: operations["users:patchUser"];
  };
  "/": {
    /** Root Redirect */
    get: operations["root_redirect__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** BearerResponse */
    BearerResponse: {
      /** Access Token */
      access_token: string;
      /** Token Type */
      token_type: string;
    };
    /** Body_auth_cookie_login_auth_cookie_login_post */
    Body_auth_cookie_login_auth_cookie_login_post: {
      /** Grant Type */
      grant_type?: string;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope 
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string;
      /** Client Secret */
      client_secret?: string;
    };
    /** Body_auth_jwt_login_auth_jwt_login_post */
    Body_auth_jwt_login_auth_jwt_login_post: {
      /** Grant Type */
      grant_type?: string;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope 
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string;
      /** Client Secret */
      client_secret?: string;
    };
    /** Body_import_text_texts_import_post */
    Body_import_text_texts_import_post: {
      /**
       * File 
       * Format: binary
       */
      file: string;
    };
    /** Body_reset_forgot_password_auth_forgot_password_post */
    Body_reset_forgot_password_auth_forgot_password_post: {
      /**
       * Email 
       * Format: email
       */
      email: string;
    };
    /** Body_reset_reset_password_auth_reset_password_post */
    Body_reset_reset_password_auth_reset_password_post: {
      /** Token */
      token: string;
      /** Password */
      password: string;
    };
    /** Body_verify_request_token_auth_request_verify_token_post */
    Body_verify_request_token_auth_request_verify_token_post: {
      /**
       * Email 
       * Format: email
       */
      email: string;
    };
    /** Body_verify_verify_auth_verify_post */
    Body_verify_verify_auth_verify_post: {
      /** Token */
      token: string;
    };
    /** DeepLLinksConfig */
    DeepLLinksConfig: {
      /**
       * Enabled 
       * @description Enable/disable quick translation links to DeepL 
       * @default false
       */
      enabled?: boolean;
      /**
       * Source Language 
       * @description Source language 
       * @enum {string}
       */
      source_language?: "BG" | "CS" | "DA" | "DE" | "EL" | "EN" | "ES" | "ET" | "FI" | "FR" | "HU" | "ID" | "IT" | "JA" | "LT" | "LV" | "NL" | "PL" | "PT" | "RO" | "RU" | "SK" | "SL" | "SV" | "TR" | "UK" | "ZH";
      /**
       * Languages 
       * @description Target languages to display links for 
       * @default [
       *   "EN",
       *   "DE"
       * ]
       */
      languages?: ("BG" | "CS" | "DA" | "DE" | "EL" | "EN" | "ES" | "ET" | "FI" | "FR" | "HU" | "ID" | "IT" | "JA" | "LT" | "LV" | "NL" | "PL" | "PT" | "RO" | "RU" | "SK" | "SL" | "SV" | "TR" | "UK" | "ZH")[];
    };
    /** ErrorModel */
    ErrorModel: {
      /** Detail */
      detail: string | ({
        [key: string]: string | undefined;
      });
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /**
     * Node 
     * @description A node in a text structure (e.g. chapter, paragraph, ...)
     */
    Node: {
      /** Id */
      _id?: string;
      /**
       * Revisionid 
       * Format: uuid
       */
      revisionId?: string;
      /**
       * Textid 
       * @description ID of the text this node belongs to
       */
      textId: string;
      /**
       * Parentid 
       * @description ID of parent node
       */
      parentId?: string;
      /**
       * Level 
       * @description Index of structure level this node is on
       */
      level: number;
      /**
       * Index 
       * @description Position among all text nodes on this level
       */
      index: number;
      /**
       * Label 
       * @description Label for identifying this text node
       */
      label: string;
      /**
       * Meta 
       * @description Arbitrary metadata
       */
      meta?: {
        [key: string]: (string | number | boolean | number) | undefined;
      };
    };
    /**
     * NodeUpdate 
     * @description An update to an existing node
     */
    NodeUpdate: {
      /** Id */
      _id?: string;
      /**
       * Revisionid 
       * Format: uuid
       */
      revisionId?: string;
      /** Textid */
      textId?: string;
      /** Parentid */
      parentId?: string;
      /** Level */
      level?: number;
      /** Index */
      index?: number;
      /** Label */
      label?: string;
      /** Meta */
      meta?: {
        [key: string]: (string | number | boolean | number) | undefined;
      };
    };
    /**
     * PlainTextLayer 
     * @description A data layer describing a set of data on a text
     */
    PlainTextLayer: {
      /** Id */
      _id?: string;
      /**
       * Revisionid 
       * Format: uuid
       */
      revisionId?: string;
      /**
       * Title 
       * @description Title of this layer
       */
      title: string;
      /**
       * Description 
       * @description Short, one-line description of this data layer
       */
      description?: string;
      /**
       * Textid 
       * @description ID of the text this layer belongs to
       */
      textId?: string;
      /**
       * Level 
       * @description Text level this layer belongs to
       */
      level: number;
      /**
       * Layertype 
       * @description A string identifying one of the available layer types
       */
      layerType: string;
      /**
       * Public 
       * @description Publication status of this layer 
       * @default false
       */
      public?: boolean;
      /**
       * Meta 
       * @description Arbitrary metadata
       */
      meta?: {
        [key: string]: (string | number | boolean | number) | undefined;
      };
      /**
       * Config 
       * @default {
       *   "deepl_links": {
       *     "enabled": false,
       *     "languages": [
       *       "EN",
       *       "DE"
       *     ]
       *   }
       * }
       */
      config?: components["schemas"]["PlainTextLayerConfig"];
    };
    /** PlainTextLayerConfig */
    PlainTextLayerConfig: {
      /**
       * Deepl Links 
       * @default {
       *   "enabled": false,
       *   "languages": [
       *     "EN",
       *     "DE"
       *   ]
       * }
       */
      deepl_links?: components["schemas"]["DeepLLinksConfig"];
    };
    /**
     * PlainTextLayerUpdate 
     * @description An update to an existing data layer
     */
    PlainTextLayerUpdate: {
      /** Id */
      _id?: string;
      /**
       * Revisionid 
       * Format: uuid
       */
      revisionId?: string;
      /** Title */
      title?: string;
      /** Description */
      description?: string;
      /** Textid */
      textId?: string;
      /** Level */
      level?: number;
      /** Layertype */
      layerType?: string;
      /** Public */
      public?: boolean;
      /** Meta */
      meta?: {
        [key: string]: (string | number | boolean | number) | undefined;
      };
      config?: components["schemas"]["PlainTextLayerConfig"];
    };
    /**
     * PlainTextUnit 
     * @description A unit of a plaintext data layer
     */
    PlainTextUnit: {
      /** Id */
      _id?: string;
      /**
       * Revisionid 
       * Format: uuid
       */
      revisionId?: string;
      /**
       * Layerid 
       * @description Data layer ID
       */
      layerId: string;
      /**
       * Nodeid 
       * @description Parent text node ID
       */
      nodeId: string;
      /**
       * Meta 
       * @description Arbitrary metadata on this layer unit
       */
      meta?: {
        [key: string]: (string | number | boolean | number) | undefined;
      };
      /**
       * Text 
       * @description Text content of the plaintext unit
       */
      text?: string;
    };
    /**
     * PlainTextUnitUpdate 
     * @description A unit of a plaintext data layer
     */
    PlainTextUnitUpdate: {
      /** Id */
      _id?: string;
      /**
       * Revisionid 
       * Format: uuid
       */
      revisionId?: string;
      /** Layerid */
      layerId?: string;
      /** Nodeid */
      nodeId?: string;
      /** Meta */
      meta?: {
        [key: string]: (string | number | boolean | number) | undefined;
      };
      /** Text */
      text?: string;
    };
    /**
     * Text 
     * @description A text represented in TextRig
     */
    Text: {
      /** Id */
      _id?: string;
      /**
       * Revisionid 
       * Format: uuid
       */
      revisionId?: string;
      /**
       * Title 
       * @description Title of this text
       */
      title: string;
      /**
       * Slug 
       * @description A short identifier string for use in URLs and internal operations
       */
      slug: string;
      /**
       * Subtitle 
       * @description Subtitle of this text
       */
      subtitle?: string;
      /** Levels */
      levels: (string)[];
      /**
       * Locdelim 
       * @description Delimiter for displaying text locations 
       * @default ,
       */
      locDelim?: string;
    };
    /**
     * TextUpdate 
     * @description An update to an existing text
     */
    TextUpdate: {
      /** Id */
      _id?: string;
      /**
       * Revisionid 
       * Format: uuid
       */
      revisionId?: string;
      /** Title */
      title?: string;
      /** Slug */
      slug?: string;
      /** Subtitle */
      subtitle?: string;
      /** Levels */
      levels?: (string)[];
      /** Locdelim */
      locDelim?: string;
    };
    /**
     * UserCreate 
     * @description Base class for all TextRig pydantic models
     */
    UserCreate: {
      /**
       * Email 
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
      /**
       * Isactive 
       * @default true
       */
      isActive?: boolean;
      /**
       * Issuperuser 
       * @default false
       */
      isSuperuser?: boolean;
      /**
       * Isverified 
       * @default true
       */
      isVerified?: boolean;
      /** Firstname */
      firstName: string;
      /** Lastname */
      lastName: string;
    };
    /**
     * UserRead 
     * @description Base class for all TextRig pydantic models
     */
    UserRead: {
      /** Id */
      id?: Record<string, never>;
      /**
       * Email 
       * Format: email
       */
      email: string;
      /**
       * Isactive 
       * @default true
       */
      isActive?: boolean;
      /**
       * Issuperuser 
       * @default false
       */
      isSuperuser?: boolean;
      /**
       * Isverified 
       * @default true
       */
      isVerified?: boolean;
      /** Firstname */
      firstName: string;
      /** Lastname */
      lastName: string;
    };
    /**
     * UserUpdate 
     * @description Base class for all TextRig pydantic models
     */
    UserUpdate: {
      /** Password */
      password?: string;
      /**
       * Email 
       * Format: email
       */
      email?: string;
      /**
       * Isactive 
       * @default true
       */
      isActive?: boolean;
      /** Issuperuser */
      isSuperuser?: boolean;
      /**
       * Isverified 
       * @default true
       */
      isVerified?: boolean;
      /** Firstname */
      firstName?: string;
      /** Lastname */
      lastName?: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  helloAdmin: {
    /** Hello Admin */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
    };
  };
  getPlaintextLayer: {
    /**
     * Get Plaintext Layer 
     * @description Returns the data for a PlainText data layer
     */
    parameters: {
      path: {
        layerId: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlainTextLayer"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  createPlaintextLayer: {
    /**
     * Create Plaintext Layer 
     * @description Creates a PlainText data layer definition
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlainTextLayer"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PlainTextLayer"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  updatePlaintextLayer: {
    /**
     * Update Plaintext Layer 
     * @description Updates the data for a PlainText data layer
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlainTextLayerUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlainTextLayer"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  getLayers: {
    /** Get Layers */
    parameters: {
      query: {
        textId: string;
        level?: number;
        layerType?: string;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (Record<string, never>)[];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  getLayer: {
    /** Get Layer */
    parameters: {
      path: {
        layerId: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  getNodes: {
    /** Get Nodes */
    parameters: {
      query: {
        textId: string;
        level?: number;
        index?: number;
        parentId?: string;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["Node"])[];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  createNode: {
    /** Create Node */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Node"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Node"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  updateNode: {
    /** Update Node */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NodeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Node"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  getChildren: {
    /** Get Children */
    parameters: {
      query?: {
        limit?: number;
      };
      path: {
        nodeId: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["Node"])[];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  getNext: {
    /** Get Next */
    parameters: {
      path: {
        nodeId: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Node"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  getAllTexts: {
    /** Get All Texts */
    parameters?: {
      query?: {
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["Text"])[];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  createText: {
    /** Create Text */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Text"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Text"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  updateText: {
    /** Update Text */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Text"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  importText: {
    /** Import Text */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_import_text_texts_import_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Text"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  getTextById: {
    /** Get Text By Id */
    parameters: {
      path: {
        textId: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Text"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  uidata: {
    /**
     * Data the client needs to display in the UI 
     * @description Returns data the client needs to initialize
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
    };
  };
  uidataPlatform: {
    /**
     * Platform metadata 
     * @description Returns platform metadata, possibly customized for this platform instance.
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
    };
  };
  uidataI18n: {
    /**
     * Get server-managed translations 
     * @description Returns server-managed translations.
     */
    parameters?: {
      query?: {
        lang?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  getPlaintextUnit: {
    /**
     * Get Plaintext Unit 
     * @description Returns the data for a PlainText data layer unit
     */
    parameters: {
      path: {
        unitId: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlainTextUnit"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  createPlaintextUnit: {
    /**
     * Create Plaintext Unit 
     * @description Creates a PlainText data layer unit
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlainTextUnit"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PlainTextUnit"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  updatePlaintextUnit: {
    /**
     * Update Plaintext Unit 
     * @description Updates the data for a PlainText data layer unit
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlainTextUnitUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlainTextUnit"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  "auth:cookie.login": {
    /** Auth:Cookie.Login */
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_auth_cookie_login_auth_cookie_login_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  "auth:cookie.logout": {
    /** Auth:Cookie.Logout */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Missing token or inactive user. */
      401: never;
    };
  };
  "auth:jwt.login": {
    /** Auth:Jwt.Login */
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_auth_jwt_login_auth_jwt_login_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BearerResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  "auth:jwt.logout": {
    /** Auth:Jwt.Logout */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Missing token or inactive user. */
      401: never;
    };
  };
  "register:register": {
    /** Register:Register */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  "verify:requestToken": {
    /** Verify:Request-Token */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_verify_request_token_auth_request_verify_token_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  "verify:verify": {
    /** Verify:Verify */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_verify_verify_auth_verify_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  "reset:forgotPassword": {
    /** Reset:Forgot Password */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_reset_forgot_password_auth_forgot_password_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  "reset:resetPassword": {
    /** Reset:Reset Password */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_reset_reset_password_auth_reset_password_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  "users:currentUser": {
    /** Users:Current User */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Missing token or inactive user. */
      401: never;
    };
  };
  "users:patchCurrentUser": {
    /** Users:Patch Current User */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Missing token or inactive user. */
      401: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  "users:user": {
    /** Users:User */
    parameters: {
      path: {
        id: Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description Missing token or inactive user. */
      401: never;
      /** @description Not a superuser. */
      403: never;
      /** @description The user does not exist. */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  "users:deleteUser": {
    /** Users:Delete User */
    parameters: {
      path: {
        id: Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Invalid Request */
      400: never;
      /** @description Missing token or inactive user. */
      401: never;
      /** @description Not a superuser. */
      403: never;
      /** @description The user does not exist. */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  "users:patchUser": {
    /** Users:Patch User */
    parameters: {
      path: {
        id: Record<string, never>;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Missing token or inactive user. */
      401: never;
      /** @description Not a superuser. */
      403: never;
      /** @description The user does not exist. */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  root_redirect__get: {
    /** Root Redirect */
    responses: {
      /** @description Successful Response */
      301: never;
      /** @description Invalid Request */
      400: never;
    };
  };
}
