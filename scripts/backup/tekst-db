#!/usr/bin/env bash
# This script was generated by bashly 1.1.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
tekst_db_usage() {
  if [[ -n $long_usage ]]; then
    printf "tekst-db - Tekst Database Backup and Restore Utility\n"
    echo

  else
    printf "tekst-db - Tekst Database Backup and Restore Utility\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tekst-db [OPTIONS] COMMAND\n"
  printf "  tekst-db [COMMAND] --help | -h\n"
  printf "  tekst-db --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create DB backup\n" "backup "
  printf "  %s   Restore DB backup\n" "restore"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--container-name, -c CONTAINER"
    printf "    DB Docker container name (if using Docker)\n"
    echo

    # :flag.usage
    printf "  %s\n" "--file, -f PATH"
    printf "    File to write/read DB backup to/from\n"
    printf "    Default: /tmp/tekst-db.backup\n"
    echo

    # :flag.usage
    printf "  %s\n" "--mongodb-uri, -m URI"
    printf "    MongoDB URI (from inside the container if using Docker)\n"
    printf "    Default: mongodb://127.0.0.1:27017\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
tekst_db_backup_usage() {
  if [[ -n $long_usage ]]; then
    printf "tekst-db backup - Create DB backup\n"
    echo

  else
    printf "tekst-db backup - Create DB backup\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tekst-db backup\n"
  printf "  tekst-db backup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  tekst-db backup\n"
    printf "  tekst-db -c tekst-db backup\n"
    printf "  tekst-db -c tekst-mongo -f /home/user/tekst-something.backup backup\n"
    printf "  tekst-db -m mongodb://usr:pwd@db.foo.com:27017/?authSource=admin backup\n"
    echo

  fi
}

# :command.usage
tekst_db_restore_usage() {
  if [[ -n $long_usage ]]; then
    printf "tekst-db restore - Restore DB backup\n"
    echo

  else
    printf "tekst-db restore - Restore DB backup\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tekst-db restore [OPTIONS]\n"
  printf "  tekst-db restore --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--delete, -d"
    printf "    Delete backup file after successful restore\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  tekst-db restore\n"
    printf "  tekst-db -c tekst-db restore\n"
    printf "  tekst-db -c tekst-mongo -f /home/user/tekst-something.backup restore\n"
    printf "  tekst-db -m mongodb://usr:pwd@db.foo.com:27017/?authSource=admin restore\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg flags passthru
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/load_common_args.sh
load_common_args() {
  container=${args[--container-name]}
  file=${args[--file]}
  uri=${args[--mongodb-uri]}
}

# :command.command_functions
# :command.function
tekst_db_backup_command() {
  # src/backup_command.sh
  load_common_args

  if [[ $container ]]; then
      docker exec -i $container /usr/bin/mongodump --uri $uri --gzip --archive > $file
  else
      /usr/bin/mongodump --uri $uri --gzip --archive > $file
  fi

}

# :command.function
tekst_db_restore_command() {
  # src/restore_command.sh
  load_common_args

  delete=${args[--delete]}

  if [[ $container ]]; then
      container_file="/tmp/tekst-db.backup"
      docker cp $file $container:$container_file
      docker exec -i $container /usr/bin/mongorestore --uri $uri --drop --gzip --archive=$container_file
      success=$?
      docker exec -i $container rm -f $container_file
  else
      /usr/bin/mongorestore --uri $uri --drop --gzip --archive=$file
      success=$?
  fi

  if [[ $success -eq 0 ]]; then
      if [[ $delete ]]; then
          rm -f $file
      fi
      echo "Restore successful."
  else
      echo "Restore failed."
  fi

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        tekst_db_usage
        exit
        ;;

      # :flag.case
      --container-name | -c)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--container-name']="$2"
          shift
          shift
        else
          printf "%s\n" "--container-name requires an argument: --container-name, -c CONTAINER" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --file | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--file']="$2"
          shift
          shift
        else
          printf "%s\n" "--file requires an argument: --file, -f PATH" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --mongodb-uri | -m)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--mongodb-uri']="$2"
          shift
          shift
        else
          printf "%s\n" "--mongodb-uri requires an argument: --mongodb-uri, -m URI" >&2
          exit 1
        fi
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    backup)
      action="backup"
      shift
      tekst_db_backup_parse_requirements "$@"
      shift $#
      ;;

    restore)
      action="restore"
      shift
      tekst_db_restore_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      tekst_db_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--file']:-} ]] || args['--file']="/tmp/tekst-db.backup"
  [[ -n ${args['--mongodb-uri']:-} ]] || args['--mongodb-uri']="mongodb://127.0.0.1:27017"

}

# :command.parse_requirements
tekst_db_backup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        tekst_db_backup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
tekst_db_restore_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        tekst_db_restore_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="restore"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --delete | -d)

        # :flag.case_no_arg
        args['--delete']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "backup") tekst_db_backup_command ;;
    "restore") tekst_db_restore_command ;;
  esac
}

initialize
run "$@"
