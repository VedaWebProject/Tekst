# https://taskfile.dev

version: "3"

vars:

tasks:
  default:
    desc: Print this very list of available tasks
    vars:
      TEKST_VERSION:
        sh: task version
    cmds:
      - echo "This is Tekst server {{.TEKST_VERSION}}"
      - task --list
    silent: true

  version:
    desc: Print project version
    cmds:
      - poetry run python3 -c "from tekst import __version__ as v; print(v, end='')"
    silent: true

  fix:
    desc: Run ruff and black to format code base and attempt to fix linting errors
    cmds:
      - poetry run black .
      - poetry run ruff check . --fix

  check:
    desc: Check code using ruff and black
    cmds:
      - poetry run ruff check . --extend-select N
      - poetry run black . --check

  run-tests:
    desc: Run complete test suite with pytest
    env:
      TEKST_CUSTOM_ENV_FILE: .env.test
    cmds:
      - poetry run coverage run -m pytest {{.CLI_ARGS}}
      - poetry run coverage report -m

  tests:
    desc: Run test categories separately, start and stop services stack
    env:
      TEKST_DEV_MODE: true
      TEKST_CUSTOM_ENV_FILE: .env.test
    cmds:
      - defer: {task: test-stack-down}
      - task: test-stack-up
      - task: wait-for-mongodb
      - poetry run python3 -m tekst setup
      - task: run-tests

  run-dev:
    desc: Run the application dev server (only for development!)
    env:
      TEKST_DEV_MODE: true
    cmds:
      - poetry run python3 -m tekst setup
      - poetry run python3 -m tekst run --reload

  dev:
    desc: Run dev services stack and dev server, clean up afterwards
    cmds:
      - task: dev-stack-up
      - task: print-dev-uris
      - task: run-dev
      - defer: {task: dev-stack-down}

  schema:
    desc: Export (development) OpenAPI schema to file openapi.json
    env:
      TEKST_DEV_MODE: true
      TEKST_LOG_LEVEL: ERROR
    cmds:
      - defer: {task: test-stack-down}
      - task: test-stack-up
      - task: wait-for-mongodb
      - poetry run python3 -m tekst schema -f

  pre-commit:
    desc: Run full pre-commit toolchain (fix code, test, code checks, export schema)
    cmds:
      - task: fix
      - task: tests
      - task: check
      - task: schema

  clean:
    desc: Cleanup of generated files (won't work on Windows)
    cmds:
      - cmd: ruff clean
      - cmd: shopt -s globstar
      - cmd: |
          rm -rf \
            **/__pycache__ \
            .pytest_cache \
            .coverage \
            .venv/ \
            .env/ \
            dist \
            htmlcov \

  dev-stack-up:
    desc: Run dev services stack
    cmds:
      - task: gen-smtp-ssl-cert
      - docker compose -f dev/docker-compose.yml --profile dev -p tekst-dev up --detach

  dev-stack-down:
    desc: Stop dev stack and clean up all resources
    cmds:
      - docker compose -f dev/docker-compose.yml --profile dev -p tekst-dev down --volumes

  test-stack-up:
    desc: Run test services stack
    cmds:
      - task: gen-smtp-ssl-cert
      - docker compose -f dev/docker-compose.yml --profile test -p tekst-testing up --detach

  test-stack-down:
    desc: Stop test stack and clean up all resources
    cmds:
      - docker compose -f dev/docker-compose.yml --profile test -p tekst-testing down --volumes

  print-dev-uris:
    internal: true
    silent: true
    cmd: |
      printf "
      +--------------------------------------------------+
      | 🌐 Client        http://127.0.0.1                |
      | 🐍 API           http://127.0.0.1/api            |
      | 📖 API Docs      http://127.0.0.1/api/docs       |
      | 📬 MailPit       http://127.0.0.1:8025           |
      | 📂 MongoExpress  http://127.0.0.1:8081           |
      +--------------------------------------------------+

      "

  docker-build:
    desc: Build and tag production Docker image for app
    vars:
      TEKST_VERSION:
        sh: task version
    cmds:
      - cmd: |
          docker build \
            --tag "tekst-api:latest" \
            --tag "tekst-api:{{.TEKST_VERSION}}" \
            --target prod .

  wait-for-mongodb:
    internal: true
    silent: true
    cmd: printf "Waiting for MongoDB service"; while ! $(curl -f http://127.0.0.1:27017 > /dev/null 2>&1); do sleep 1; printf "."; done; printf "\n"

  gen-smtp-ssl-cert:
    internal: true
    silent: true
    cmd: cd dev/smtp-ssl && ./generate.sh
