{
  "openapi": "3.1.0",
  "info": {
    "title": "Tekst-Dev",
    "description": "An online text research platform",
    "termsOfService": "None",
    "contact": {},
    "license": {
      "name": "AGPL-3.0-or-later",
      "url": "https://www.gnu.org/licenses/agpl-3.0.txt"
    },
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "http://127.0.0.1/api"
    }
  ],
  "paths": {
    "/admin/stats": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get statistics",
        "operationId": "getStatistics",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformStats"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/users": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get users",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserRead"
                  },
                  "type": "array",
                  "title": "Response Get Users Admin Users Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/browse/unit-siblings": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get unit siblings",
        "description": "Returns a list of all resource units belonging to the resource\nwith the given ID, associated to nodes that are children of the parent node\nwith the given ID.\n\nAs the resulting list may contain units of arbitrary type, the\nreturned unit objects cannot be typed to their precise resource unit type.",
        "operationId": "getUnitSiblings",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "res",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "description": "ID of resource the requested units belong to",
              "title": "Res"
            },
            "description": "ID of resource the requested units belong to"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "example": "5eb7cf5a86d9755df3a6c593"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ID of node for which siblings to get associated units for",
              "title": "Parent"
            },
            "description": "ID of node for which siblings to get associated units for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DebugUnitRead"
                      },
                      {
                        "$ref": "#/components/schemas/PlaintextUnitRead"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "resourceType",
                      "mapping": {
                        "debug": "#/components/schemas/DebugUnitRead",
                        "plaintext": "#/components/schemas/PlaintextUnitRead"
                      }
                    }
                  },
                  "title": "Response Get Unit Siblings Browse Unit Siblings Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/browse/location-data": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get location data",
        "description": "Returns the node path from the node with the given level/position\nas the last element, up to its most distant ancestor node\non structure level 0 as the first element of an array as well as all units\nfor the given resource(s) referencing the nodes in the node path.",
        "operationId": "getLocationData",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "txt",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "description": "ID of text to look up data for",
              "title": "Txt"
            },
            "description": "ID of text to look up data for"
          },
          {
            "name": "lvl",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Location level",
              "title": "Lvl"
            },
            "description": "Location level"
          },
          {
            "name": "pos",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Location position",
              "title": "Pos"
            },
            "description": "Location position"
          },
          {
            "name": "res",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              "description": "ID (or list of IDs) of resource(s) to return unit data for",
              "default": [],
              "title": "Res"
            },
            "description": "ID (or list of IDs) of resource(s) to return unit data for"
          },
          {
            "name": "head",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only return units referencing the head node of the node path",
              "default": false,
              "title": "Head"
            },
            "description": "Only return units referencing the head node of the node path"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Return at most <limit> units",
              "default": 4096,
              "title": "Limit"
            },
            "description": "Return at most <limit> units"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationData"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/browse/nodes/{id}/path/options-by-head": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get path options by head id",
        "description": "Returns the options for selecting text locations derived from the node path of\nthe node with the given ID as head.",
        "operationId": "getPathOptionsByHeadId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NodeRead"
                    }
                  },
                  "title": "Response Get Path Options By Head Id Browse Nodes  Id  Path Options By Head Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/browse/nodes/{id}/path/options-by-root": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get path options by root",
        "description": "Returns the options for selecting text locations derived from the node path of\nthe node with the given ID as root. At each level, the first option is taken\nas the basis for the next level.",
        "operationId": "getPathOptionsByRoot",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NodeRead"
                    }
                  },
                  "title": "Response Get Path Options By Root Browse Nodes  Id  Path Options By Root Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/browse/resources/{id}/coverage": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get resource coverage data",
        "operationId": "getResourceCoverageData",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceCoverage"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/browse/resources/{id}/coverage-details": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get detailed resource coverage data",
        "operationId": "getDetailedResourceCoverageData",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ResourceNodeCoverage"
                    }
                  },
                  "title": "Response Get Detailed Resource Coverage Data Browse Resources  Id  Coverage Details Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/nodes": {
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Create node",
        "description": "Creates a new node. The position will be automatically set to the last position\nof the node's parent (or the first parent before that has children).",
        "operationId": "createNode",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Find nodes",
        "operationId": "findNodes",
        "parameters": [
          {
            "name": "txt",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "description": "ID of text to find nodes for",
              "title": "Txt"
            },
            "description": "ID of text to find nodes for"
          },
          {
            "name": "lvl",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Structure level to find nodes for",
              "title": "Lvl"
            },
            "description": "Structure level to find nodes for"
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Position value of nodes to find",
              "title": "Pos"
            },
            "description": "Position value of nodes to find"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "description": "ID of parent node to find children of",
              "title": "Parent"
            },
            "description": "ID of parent node to find children of"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Return at most <limit> nodes",
              "default": 8192,
              "title": "Limit"
            },
            "description": "Return at most <limit> nodes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeRead"
                  },
                  "title": "Response Find Nodes Nodes Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/children": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Get children",
        "operationId": "getChildren",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "txt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "example": "5eb7cf5a86d9755df3a6c593"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ID of text to find nodes for",
              "title": "Txt"
            },
            "description": "ID of text to find nodes for"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "example": "5eb7cf5a86d9755df3a6c593"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ID of parent node to find children of",
              "title": "Parent"
            },
            "description": "ID of parent node to find children of"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 8192,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeRead"
                  },
                  "title": "Response Get Children Nodes Children Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{id}": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Get node",
        "operationId": "getNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "nodes"
        ],
        "summary": "Update node",
        "operationId": "updateNode",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "nodes"
        ],
        "summary": "Delete node",
        "description": "Deletes the specified node. Also deletes any associated units, child nodes and units associated with child nodes.",
        "operationId": "deleteNode",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteNodeResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{id}/move": {
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Move node",
        "description": "Moves the specified node to a new position on its structure level.",
        "operationId": "moveNode",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveNodeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/platform": {
      "get": {
        "tags": [
          "platform"
        ],
        "summary": "Get platform data",
        "description": "Returns data the client needs to initialize",
        "operationId": "getPlatformData",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformData"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/platform/users/{user}": {
      "get": {
        "tags": [
          "platform"
        ],
        "summary": "Get public user",
        "description": "Returns public information on the user with the specified username or ID",
        "operationId": "getPublicUser",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "example": "5eb7cf5a86d9755df3a6c593"
                }
              ],
              "description": "Username or ID",
              "title": "User"
            },
            "description": "Username or ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserReadPublic"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/platform/users": {
      "get": {
        "tags": [
          "platform"
        ],
        "summary": "Find public users",
        "description": "Returns a list of public users matching the given query.\n\nOnly returns active user accounts. The query is considered to match a full token\n(e.g. first name, last name, username, a word in the affiliation field).",
        "operationId": "findPublicUsers",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Query string to search in user data",
              "title": "Q"
            },
            "description": "Query string to search in user data"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserReadPublic"
                  },
                  "title": "Response Find Public Users Platform Users Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/platform/settings": {
      "patch": {
        "tags": [
          "platform"
        ],
        "summary": "Update platform settings",
        "operationId": "updatePlatformSettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformSettingsUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSettingsRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/platform/segments/{id}": {
      "get": {
        "tags": [
          "platform"
        ],
        "summary": "Get segment",
        "operationId": "getSegment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSegmentRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "platform"
        ],
        "summary": "Update segment",
        "operationId": "updateSegment",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientSegmentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSegmentRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "platform"
        ],
        "summary": "Delete segment",
        "operationId": "deleteSegment",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/platform/segments": {
      "post": {
        "tags": [
          "platform"
        ],
        "summary": "Create segment",
        "operationId": "createSegment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientSegmentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSegmentRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/resources": {
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Create resource",
        "operationId": "createResource",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DebugResourceCreate"
                  },
                  {
                    "$ref": "#/components/schemas/PlaintextResourceCreate"
                  }
                ],
                "discriminator": {
                  "propertyName": "resourceType",
                  "mapping": {
                    "debug": "#/components/schemas/DebugResourceCreate",
                    "plaintext": "#/components/schemas/PlaintextResourceCreate"
                  }
                },
                "title": "Resource"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugResourceRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextResourceRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "resourceType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugResourceRead",
                      "plaintext": "#/components/schemas/PlaintextResourceRead"
                    }
                  },
                  "title": "Response Create Resource Resources Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Find resources",
        "description": "Returns a list of all resources matching the given criteria.\n\nAs the resulting list of resources may contain resources of different types, the\nreturned resource objects cannot be typed to their precise resource type.",
        "operationId": "findResources",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "txt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "description": "ID of text to find resources for",
              "title": "Txt"
            },
            "description": "ID of text to find resources for"
          },
          {
            "name": "lvl",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Structure level to find resources for",
              "title": "Lvl"
            },
            "description": "Structure level to find resources for"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Type of resources to find",
              "title": "Type"
            },
            "description": "Type of resources to find"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 4096,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DebugResourceRead"
                      },
                      {
                        "$ref": "#/components/schemas/PlaintextResourceRead"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "resourceType",
                      "mapping": {
                        "debug": "#/components/schemas/DebugResourceRead",
                        "plaintext": "#/components/schemas/PlaintextResourceRead"
                      }
                    }
                  },
                  "title": "Response Find Resources Resources Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}/version": {
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Create resource version",
        "operationId": "createResourceVersion",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugResourceRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextResourceRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "resourceType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugResourceRead",
                      "plaintext": "#/components/schemas/PlaintextResourceRead"
                    }
                  },
                  "title": "Response Create Resource Version Resources  Id  Version Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}": {
      "patch": {
        "tags": [
          "resources"
        ],
        "summary": "Update resource",
        "operationId": "updateResource",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DebugResourceUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/PlaintextResourceUpdate"
                  }
                ],
                "discriminator": {
                  "propertyName": "resourceType",
                  "mapping": {
                    "debug": "#/components/schemas/DebugResourceUpdate",
                    "plaintext": "#/components/schemas/PlaintextResourceUpdate"
                  }
                },
                "title": "Updates"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugResourceRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextResourceRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "resourceType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugResourceRead",
                      "plaintext": "#/components/schemas/PlaintextResourceRead"
                    }
                  },
                  "title": "Response Update Resource Resources  Id  Patch"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Get resource",
        "operationId": "getResource",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugResourceRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextResourceRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "resourceType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugResourceRead",
                      "plaintext": "#/components/schemas/PlaintextResourceRead"
                    }
                  },
                  "title": "Response Get Resource Resources  Id  Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "resources"
        ],
        "summary": "Delete resource",
        "operationId": "deleteResource",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}/transfer": {
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Transfer resource",
        "operationId": "transferResource",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593",
                "title": "Target User Id"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugResourceRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextResourceRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "resourceType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugResourceRead",
                      "plaintext": "#/components/schemas/PlaintextResourceRead"
                    }
                  },
                  "title": "Response Transfer Resource Resources  Id  Transfer Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}/propose": {
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Propose resource",
        "operationId": "proposeResource",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugResourceRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextResourceRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "resourceType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugResourceRead",
                      "plaintext": "#/components/schemas/PlaintextResourceRead"
                    }
                  },
                  "title": "Response Propose Resource Resources  Id  Propose Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}/unpropose": {
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Unpropose resource",
        "operationId": "unproposeResource",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugResourceRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextResourceRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "resourceType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugResourceRead",
                      "plaintext": "#/components/schemas/PlaintextResourceRead"
                    }
                  },
                  "title": "Response Unpropose Resource Resources  Id  Unpropose Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}/publish": {
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Publish resource",
        "operationId": "publishResource",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugResourceRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextResourceRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "resourceType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugResourceRead",
                      "plaintext": "#/components/schemas/PlaintextResourceRead"
                    }
                  },
                  "title": "Response Publish Resource Resources  Id  Publish Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}/unpublish": {
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Unpublish resource",
        "operationId": "unpublishResource",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugResourceRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextResourceRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "resourceType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugResourceRead",
                      "plaintext": "#/components/schemas/PlaintextResourceRead"
                    }
                  },
                  "title": "Response Unpublish Resource Resources  Id  Unpublish Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}/template": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Get resource template",
        "operationId": "getResourceTemplate",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Resource Template Resources  Id  Template Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}/import": {
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Import resource data",
        "operationId": "importResourceData",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_import_resource_data_resources__id__import_post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDataImportResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/texts": {
      "get": {
        "tags": [
          "texts"
        ],
        "summary": "Get all texts",
        "operationId": "getAllTexts",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 128,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextRead"
                  },
                  "title": "Response Get All Texts Texts Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "texts"
        ],
        "summary": "Create text",
        "operationId": "createText",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/texts/{id}/template": {
      "get": {
        "tags": [
          "texts"
        ],
        "summary": "Download structure template",
        "description": "Download the structure template for a text to help compose a structure\ndefinition that can later be uploaded to the server",
        "operationId": "downloadStructureTemplate",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/texts/{id}/structure": {
      "post": {
        "tags": [
          "texts"
        ],
        "summary": "Import text structure",
        "description": "Upload the structure definition for a text to apply as a structure of nodes",
        "operationId": "importTextStructure",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_import_text_structure_texts__id__structure_post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/texts/{id}/level/{index}": {
      "post": {
        "tags": [
          "texts"
        ],
        "summary": "Insert level",
        "operationId": "insertLevel",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          },
          {
            "name": "index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 32,
              "description": "Index to insert the level at",
              "title": "Index"
            },
            "description": "Index to insert the level at"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TextLevelTranslation"
                },
                "minItems": 1,
                "maxItems": 3,
                "description": "Label translations for this level",
                "title": "Translations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "texts"
        ],
        "summary": "Delete level",
        "operationId": "deleteLevel",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          },
          {
            "name": "index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 32,
              "description": "Index to insert the level at",
              "title": "Index"
            },
            "description": "Index to insert the level at"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/texts/{id}": {
      "delete": {
        "tags": [
          "texts"
        ],
        "summary": "Delete text",
        "operationId": "deleteText",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "texts"
        ],
        "summary": "Get text",
        "operationId": "getText",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "texts"
        ],
        "summary": "Update text",
        "operationId": "updateText",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/units": {
      "post": {
        "tags": [
          "units"
        ],
        "summary": "Create unit",
        "operationId": "createUnit",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DebugUnitCreate"
                  },
                  {
                    "$ref": "#/components/schemas/PlaintextUnitCreate"
                  }
                ],
                "discriminator": {
                  "propertyName": "resourceType",
                  "mapping": {
                    "debug": "#/components/schemas/DebugUnitCreate",
                    "plaintext": "#/components/schemas/PlaintextUnitCreate"
                  }
                },
                "title": "Unit"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugUnitRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextUnitRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "resourceType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugUnitRead",
                      "plaintext": "#/components/schemas/PlaintextUnitRead"
                    }
                  },
                  "title": "Response Create Unit Units Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "units"
        ],
        "summary": "Find units",
        "description": "Returns a list of all resource units matching the given criteria.\n\nRespects restricted resources and inactive texts.\nAs the resulting list may contain units of different types, the\nreturned unit objects cannot be typed to their precise resource unit type.",
        "operationId": "findUnits",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "res",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              "description": "ID (or list of IDs) of resource(s) to return unit data for",
              "default": [],
              "title": "Res"
            },
            "description": "ID (or list of IDs) of resource(s) to return unit data for"
          },
          {
            "name": "node",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              "description": "ID (or list of IDs) of node(s) to return unit data for",
              "default": [],
              "title": "Node"
            },
            "description": "ID (or list of IDs) of node(s) to return unit data for"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Return at most <limit> items",
              "default": 4096,
              "title": "Limit"
            },
            "description": "Return at most <limit> items"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DebugUnitRead"
                      },
                      {
                        "$ref": "#/components/schemas/PlaintextUnitRead"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "resourceType",
                      "mapping": {
                        "debug": "#/components/schemas/DebugUnitRead",
                        "plaintext": "#/components/schemas/PlaintextUnitRead"
                      }
                    }
                  },
                  "title": "Response Find Units Units Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/units/{id}": {
      "get": {
        "tags": [
          "units"
        ],
        "summary": "Get unit",
        "description": "A generic route for retrieving a unit by ID from the database",
        "operationId": "getUnit",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugUnitRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextUnitRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "resourceType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugUnitRead",
                      "plaintext": "#/components/schemas/PlaintextUnitRead"
                    }
                  },
                  "title": "Response Get Unit Units  Id  Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "units"
        ],
        "summary": "Update unit",
        "operationId": "updateUnit",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DebugUnitUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/PlaintextUnitUpdate"
                  }
                ],
                "discriminator": {
                  "propertyName": "resourceType",
                  "mapping": {
                    "debug": "#/components/schemas/DebugUnitUpdate",
                    "plaintext": "#/components/schemas/PlaintextUnitUpdate"
                  }
                },
                "title": "Updates"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugUnitRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextUnitRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "resourceType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugUnitRead",
                      "plaintext": "#/components/schemas/PlaintextUnitRead"
                    }
                  },
                  "title": "Response Update Unit Units  Id  Patch"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "units"
        ],
        "summary": "Delete unit",
        "operationId": "deleteUnit",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Me",
        "operationId": "users:currentUser",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete me",
        "operationId": "deleteMe",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update me",
        "operationId": "users:patchCurrentUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "UPDATE_USER_EMAIL_ALREADY_EXISTS": {
                    "summary": "A user with this email already exists.",
                    "value": {
                      "detail": "UPDATE_USER_EMAIL_ALREADY_EXISTS"
                    }
                  },
                  "UPDATE_USER_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "UPDATE_USER_INVALID_PASSWORD",
                        "reason": "Password should beat least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/auth/cookie/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "operationId": "auth:cookie.login",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_auth_cookie_login_auth_cookie_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "LOGIN_BAD_CREDENTIALS": {
                    "summary": "Bad credentials or the user is inactive.",
                    "value": {
                      "detail": "LOGIN_BAD_CREDENTIALS"
                    }
                  },
                  "LOGIN_USER_NOT_VERIFIED": {
                    "summary": "The user is not verified.",
                    "value": {
                      "detail": "LOGIN_USER_NOT_VERIFIED"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/cookie/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "operationId": "auth:cookie.logout",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/auth/jwt/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "operationId": "auth:jwt.login",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_auth_jwt_login_auth_jwt_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BearerResponse"
                },
                "example": {
                  "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI",
                  "token_type": "bearer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "LOGIN_BAD_CREDENTIALS": {
                    "summary": "Bad credentials or the user is inactive.",
                    "value": {
                      "detail": "LOGIN_BAD_CREDENTIALS"
                    }
                  },
                  "LOGIN_USER_NOT_VERIFIED": {
                    "summary": "The user is not verified.",
                    "value": {
                      "detail": "LOGIN_USER_NOT_VERIFIED"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/jwt/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "operationId": "auth:jwt.logout",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register",
        "operationId": "register:register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "REGISTER_USER_ALREADY_EXISTS": {
                    "summary": "A user with this email already exists.",
                    "value": {
                      "detail": "REGISTER_USER_ALREADY_EXISTS"
                    }
                  },
                  "REGISTER_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "REGISTER_INVALID_PASSWORD",
                        "reason": "Password should beat least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/request-verify-token": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Request verify token",
        "operationId": "verify:requestToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_verify_request_token_auth_request_verify_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Verify",
        "operationId": "verify:verify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_verify_verify_auth_verify_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "VERIFY_USER_BAD_TOKEN": {
                    "summary": "Bad token, not existing user ornot the e-mail currently set for the user.",
                    "value": {
                      "detail": "VERIFY_USER_BAD_TOKEN"
                    }
                  },
                  "VERIFY_USER_ALREADY_VERIFIED": {
                    "summary": "The user is already verified.",
                    "value": {
                      "detail": "VERIFY_USER_ALREADY_VERIFIED"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Forgot password",
        "operationId": "reset:forgotPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_reset_forgot_password_auth_forgot_password_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Reset password",
        "operationId": "reset:resetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_reset_reset_password_auth_reset_password_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "RESET_PASSWORD_BAD_TOKEN": {
                    "summary": "Bad or expired token.",
                    "value": {
                      "detail": "RESET_PASSWORD_BAD_TOKEN"
                    }
                  },
                  "RESET_PASSWORD_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "RESET_PASSWORD_INVALID_PASSWORD",
                        "reason": "Password should be at least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user",
        "operationId": "users:user",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "403": {
            "description": "Not a superuser."
          },
          "404": {
            "description": "The user does not exist."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update user",
        "operationId": "users:patchUser",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "403": {
            "description": "Not a superuser."
          },
          "404": {
            "description": "The user does not exist."
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "UPDATE_USER_EMAIL_ALREADY_EXISTS": {
                    "summary": "A user with this email already exists.",
                    "value": {
                      "detail": "UPDATE_USER_EMAIL_ALREADY_EXISTS"
                    }
                  },
                  "UPDATE_USER_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "UPDATE_USER_INVALID_PASSWORD",
                        "reason": "Password should beat least 3 characters"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user",
        "operationId": "users:deleteUser",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "403": {
            "description": "Not a superuser."
          },
          "404": {
            "description": "The user does not exist."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BearerResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type"
        ],
        "title": "BearerResponse"
      },
      "Body_auth_cookie_login_auth_cookie_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_auth_cookie_login_auth_cookie_login_post"
      },
      "Body_auth_jwt_login_auth_jwt_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_auth_jwt_login_auth_jwt_login_post"
      },
      "Body_import_resource_data_resources__id__import_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "JSON file containing the resource data"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_import_resource_data_resources__id__import_post"
      },
      "Body_import_text_structure_texts__id__structure_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "JSON file containing the text's structure"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_import_text_structure_texts__id__structure_post"
      },
      "Body_reset_forgot_password_auth_forgot_password_post": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "Body_reset_forgot_password_auth_forgot_password_post"
      },
      "Body_reset_reset_password_auth_reset_password_post": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "token",
          "password"
        ],
        "title": "Body_reset_reset_password_auth_reset_password_post"
      },
      "Body_verify_request_token_auth_request_verify_token_post": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "Body_verify_request_token_auth_request_verify_token_post"
      },
      "Body_verify_verify_auth_verify_post": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "Body_verify_verify_auth_verify_post"
      },
      "ClientSegmentCreate": {
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "pattern": "[a-zA-Z0-9\\-_]+",
            "title": "Key",
            "description": "Key of this segment. System segment keys must start with `system`."
          },
          "isSystemSegment": {
            "type": "boolean",
            "title": "Issystemsegment",
            "description": "Whether this is a system segment (will be set automatically)",
            "default": false
          },
          "editorMode": {
            "type": "string",
            "enum": [
              "wysiwyg",
              "html"
            ],
            "title": "Editormode",
            "description": "Last used editor mode",
            "default": "wysiwyg"
          },
          "locale": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationLocaleKey"
              }
            ],
            "description": "Locale indicating the translation language of this segment"
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 32,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Title of this segment"
          },
          "html": {
            "type": "string",
            "maxLength": 1048576,
            "minLength": 1,
            "title": "Html",
            "description": "HTML content of this segment"
          }
        },
        "type": "object",
        "required": [
          "key",
          "locale",
          "html"
        ],
        "title": "ClientSegmentCreate"
      },
      "ClientSegmentHead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "locale": {
            "$ref": "#/components/schemas/TranslationLocaleKey"
          }
        },
        "type": "object",
        "required": [
          "id",
          "key",
          "locale"
        ],
        "title": "ClientSegmentHead"
      },
      "ClientSegmentRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "key": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "pattern": "[a-zA-Z0-9\\-_]+",
            "title": "Key",
            "description": "Key of this segment. System segment keys must start with `system`."
          },
          "isSystemSegment": {
            "type": "boolean",
            "title": "Issystemsegment",
            "description": "Whether this is a system segment (will be set automatically)",
            "default": false
          },
          "editorMode": {
            "type": "string",
            "enum": [
              "wysiwyg",
              "html"
            ],
            "title": "Editormode",
            "description": "Last used editor mode",
            "default": "wysiwyg"
          },
          "locale": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationLocaleKey"
              }
            ],
            "description": "Locale indicating the translation language of this segment"
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 32,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Title of this segment"
          },
          "html": {
            "type": "string",
            "maxLength": 1048576,
            "minLength": 1,
            "title": "Html",
            "description": "HTML content of this segment"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "key",
          "locale",
          "html"
        ],
        "title": "ClientSegmentRead"
      },
      "ClientSegmentUpdate": {
        "properties": {
          "key": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 32,
                "minLength": 1,
                "pattern": "[a-zA-Z0-9\\-_]+"
              },
              {
                "type": "null"
              }
            ],
            "title": "Key"
          },
          "isSystemSegment": {
            "type": "boolean",
            "title": "Issystemsegment",
            "description": "Whether this is a system segment (will be set automatically)",
            "default": false
          },
          "editorMode": {
            "type": "string",
            "enum": [
              "wysiwyg",
              "html"
            ],
            "title": "Editormode",
            "description": "Last used editor mode",
            "default": "wysiwyg"
          },
          "locale": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TranslationLocaleKey"
              },
              {
                "type": "null"
              }
            ]
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 32,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Title of this segment"
          },
          "html": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1048576,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Html"
          }
        },
        "type": "object",
        "title": "ClientSegmentUpdate"
      },
      "DebugResourceConfig": {
        "properties": {
          "category": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 16,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Resource category key"
          },
          "sortOrder": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Sortorder",
            "description": "Sort order for displaying this resource among others",
            "default": 100
          },
          "defaultActive": {
            "type": "boolean",
            "title": "Defaultactive",
            "description": "Whether this resource is active by default when public",
            "default": true
          },
          "showOnParentLevel": {
            "type": "boolean",
            "title": "Showonparentlevel",
            "description": "Show combined contents of this resource on the parent level",
            "default": false
          }
        },
        "type": "object",
        "title": "DebugResourceConfig"
      },
      "DebugResourceCreate": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Title",
            "description": "Title of this resource"
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/ResourceDescriptionTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Description",
            "description": "Short, concise description of this resource",
            "default": []
          },
          "textId": {
            "type": "string",
            "title": "Textid",
            "description": "ID of the text this resource belongs to",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "level": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Level",
            "description": "Text level this resource belongs to"
          },
          "resourceType": {
            "const": "debug",
            "title": "Resourcetype"
          },
          "originalId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Originalid",
            "description": "If this is a version of another resource, this ID references the original"
          },
          "ownerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ownerid",
            "description": "User owning this resource"
          },
          "sharedRead": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "maxItems": 64,
            "title": "Sharedread",
            "description": "Users with shared read access to this resource",
            "default": []
          },
          "sharedWrite": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "maxItems": 64,
            "title": "Sharedwrite",
            "description": "Users with shared write access to this resource",
            "default": []
          },
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "Publication status of this resource",
            "default": false
          },
          "proposed": {
            "type": "boolean",
            "title": "Proposed",
            "description": "Whether this resource has been proposed for publication",
            "default": false
          },
          "citation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Citation",
            "description": "Citation details for this resource"
          },
          "meta": {
            "items": {
              "$ref": "#/components/schemas/Metadate"
            },
            "type": "array",
            "maxItems": 64,
            "minItems": 0,
            "title": "Meta",
            "description": "Arbitrary metadata",
            "default": []
          },
          "comment": {
            "items": {
              "$ref": "#/components/schemas/ResourceCommentTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this resource",
            "default": []
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DebugResourceConfig"
              }
            ],
            "default": {
              "sortOrder": 100,
              "defaultActive": true,
              "showOnParentLevel": false
            }
          }
        },
        "type": "object",
        "required": [
          "title",
          "textId",
          "level",
          "resourceType"
        ],
        "title": "DebugResourceCreate"
      },
      "DebugResourceRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "writable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Writable",
            "description": "Whether this resource is writable for the requesting user"
          },
          "owner": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserReadPublic"
              },
              {
                "type": "null"
              }
            ],
            "description": "Public user data for user owning this resource"
          },
          "sharedReadUsers": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UserReadPublic"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sharedreadusers",
            "description": "Public user data for users allowed to read this resource"
          },
          "sharedWriteUsers": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UserReadPublic"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sharedwriteusers",
            "description": "Public user data for users allowed to write this resource"
          },
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Title",
            "description": "Title of this resource"
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/ResourceDescriptionTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Description",
            "description": "Short, concise description of this resource",
            "default": []
          },
          "textId": {
            "type": "string",
            "title": "Textid",
            "description": "ID of the text this resource belongs to",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "level": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Level",
            "description": "Text level this resource belongs to"
          },
          "resourceType": {
            "const": "debug",
            "title": "Resourcetype"
          },
          "originalId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Originalid",
            "description": "If this is a version of another resource, this ID references the original"
          },
          "ownerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ownerid",
            "description": "User owning this resource"
          },
          "sharedRead": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "maxItems": 64,
            "title": "Sharedread",
            "description": "Users with shared read access to this resource",
            "default": []
          },
          "sharedWrite": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "maxItems": 64,
            "title": "Sharedwrite",
            "description": "Users with shared write access to this resource",
            "default": []
          },
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "Publication status of this resource",
            "default": false
          },
          "proposed": {
            "type": "boolean",
            "title": "Proposed",
            "description": "Whether this resource has been proposed for publication",
            "default": false
          },
          "citation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Citation",
            "description": "Citation details for this resource"
          },
          "meta": {
            "items": {
              "$ref": "#/components/schemas/Metadate"
            },
            "type": "array",
            "maxItems": 64,
            "minItems": 0,
            "title": "Meta",
            "description": "Arbitrary metadata",
            "default": []
          },
          "comment": {
            "items": {
              "$ref": "#/components/schemas/ResourceCommentTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this resource",
            "default": []
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DebugResourceConfig"
              }
            ],
            "default": {
              "sortOrder": 100,
              "defaultActive": true,
              "showOnParentLevel": false
            }
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "title",
          "textId",
          "level",
          "resourceType"
        ],
        "title": "DebugResourceRead"
      },
      "DebugResourceUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/ResourceDescriptionTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Description",
            "description": "Short, concise description of this resource",
            "default": []
          },
          "textId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textid"
          },
          "level": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Level"
          },
          "resourceType": {
            "const": "debug",
            "title": "Resourcetype"
          },
          "originalId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Originalid",
            "description": "If this is a version of another resource, this ID references the original"
          },
          "ownerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ownerid",
            "description": "User owning this resource"
          },
          "sharedRead": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "maxItems": 64,
            "title": "Sharedread",
            "description": "Users with shared read access to this resource",
            "default": []
          },
          "sharedWrite": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "maxItems": 64,
            "title": "Sharedwrite",
            "description": "Users with shared write access to this resource",
            "default": []
          },
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "Publication status of this resource",
            "default": false
          },
          "proposed": {
            "type": "boolean",
            "title": "Proposed",
            "description": "Whether this resource has been proposed for publication",
            "default": false
          },
          "citation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Citation",
            "description": "Citation details for this resource"
          },
          "meta": {
            "items": {
              "$ref": "#/components/schemas/Metadate"
            },
            "type": "array",
            "maxItems": 64,
            "minItems": 0,
            "title": "Meta",
            "description": "Arbitrary metadata",
            "default": []
          },
          "comment": {
            "items": {
              "$ref": "#/components/schemas/ResourceCommentTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this resource",
            "default": []
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DebugResourceConfig"
              }
            ],
            "default": {
              "sortOrder": 100,
              "defaultActive": true,
              "showOnParentLevel": false
            }
          }
        },
        "type": "object",
        "required": [
          "resourceType"
        ],
        "title": "DebugResourceUpdate"
      },
      "DebugUnitCreate": {
        "properties": {
          "resourceId": {
            "type": "string",
            "title": "Resourceid",
            "description": "Resource ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "resourceType": {
            "const": "debug",
            "title": "Resourcetype"
          },
          "nodeId": {
            "type": "string",
            "title": "Nodeid",
            "description": "Parent text node ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this unit"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "Text content of the debug unit"
          }
        },
        "type": "object",
        "required": [
          "resourceId",
          "resourceType",
          "nodeId"
        ],
        "title": "DebugUnitCreate"
      },
      "DebugUnitRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "resourceId": {
            "type": "string",
            "title": "Resourceid",
            "description": "Resource ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "resourceType": {
            "const": "debug",
            "title": "Resourcetype"
          },
          "nodeId": {
            "type": "string",
            "title": "Nodeid",
            "description": "Parent text node ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this unit"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "Text content of the debug unit"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "resourceId",
          "resourceType",
          "nodeId"
        ],
        "title": "DebugUnitRead"
      },
      "DebugUnitUpdate": {
        "properties": {
          "resourceId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resourceid"
          },
          "resourceType": {
            "const": "debug",
            "title": "Resourcetype"
          },
          "nodeId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nodeid"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this unit"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "Text content of the debug unit"
          }
        },
        "type": "object",
        "required": [
          "resourceType"
        ],
        "title": "DebugUnitUpdate"
      },
      "DeepLLinksConfig": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Enable/disable quick translation links to DeepL",
            "default": false
          },
          "sourceLanguage": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "BG",
                  "CS",
                  "DA",
                  "DE",
                  "EL",
                  "EN",
                  "ES",
                  "ET",
                  "FI",
                  "FR",
                  "HU",
                  "ID",
                  "IT",
                  "JA",
                  "LT",
                  "LV",
                  "NL",
                  "PL",
                  "PT",
                  "RO",
                  "RU",
                  "SK",
                  "SL",
                  "SV",
                  "TR",
                  "UK",
                  "ZH"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Sourcelanguage",
            "description": "Source language",
            "default": "BG"
          },
          "languages": {
            "items": {
              "type": "string",
              "enum": [
                "BG",
                "CS",
                "DA",
                "DE",
                "EL",
                "EN",
                "ES",
                "ET",
                "FI",
                "FR",
                "HU",
                "ID",
                "IT",
                "JA",
                "LT",
                "LV",
                "NL",
                "PL",
                "PT",
                "RO",
                "RU",
                "SK",
                "SL",
                "SV",
                "TR",
                "UK",
                "ZH"
              ]
            },
            "type": "array",
            "maxItems": 32,
            "title": "Languages",
            "description": "Target languages to display links for",
            "default": [
              "EN",
              "DE"
            ]
          }
        },
        "type": "object",
        "title": "DeepLLinksConfig"
      },
      "DeleteNodeResult": {
        "properties": {
          "units": {
            "type": "integer",
            "title": "Units"
          },
          "nodes": {
            "type": "integer",
            "title": "Nodes"
          }
        },
        "type": "object",
        "required": [
          "units",
          "nodes"
        ],
        "title": "DeleteNodeResult"
      },
      "ErrorModel": {
        "properties": {
          "detail": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            ],
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "ErrorModel"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LocaleKey": {
        "type": "string",
        "enum": [
          "deDE",
          "enUS"
        ]
      },
      "LocationData": {
        "properties": {
          "nodePath": {
            "items": {
              "$ref": "#/components/schemas/NodeRead"
            },
            "type": "array",
            "title": "Nodepath",
            "default": []
          },
          "units": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DebugUnitRead"
                },
                {
                  "$ref": "#/components/schemas/PlaintextUnitRead"
                }
              ]
            },
            "type": "array",
            "title": "Units",
            "default": []
          }
        },
        "type": "object",
        "title": "LocationData"
      },
      "Metadate": {
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "title": "Key"
          },
          "value": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "Metadate"
      },
      "MoveNodeRequestBody": {
        "properties": {
          "position": {
            "type": "integer",
            "title": "Position"
          },
          "after": {
            "type": "boolean",
            "title": "After"
          },
          "parentId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parentid"
          }
        },
        "type": "object",
        "required": [
          "position",
          "after",
          "parentId"
        ],
        "title": "MoveNodeRequestBody"
      },
      "NodeCreate": {
        "properties": {
          "textId": {
            "type": "string",
            "title": "Textid",
            "description": "ID of the text this node belongs to",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "parentId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parentid",
            "description": "ID of parent node"
          },
          "level": {
            "type": "integer",
            "exclusiveMaximum": 32.0,
            "minimum": 0.0,
            "title": "Level",
            "description": "Index of structure level this node is on"
          },
          "position": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Position",
            "description": "Position among all text nodes on this level"
          },
          "label": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Label",
            "description": "Label for identifying this text node in level context"
          }
        },
        "type": "object",
        "required": [
          "textId",
          "level",
          "position",
          "label"
        ],
        "title": "NodeCreate"
      },
      "NodeRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "textId": {
            "type": "string",
            "title": "Textid",
            "description": "ID of the text this node belongs to",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "parentId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parentid",
            "description": "ID of parent node"
          },
          "level": {
            "type": "integer",
            "exclusiveMaximum": 32.0,
            "minimum": 0.0,
            "title": "Level",
            "description": "Index of structure level this node is on"
          },
          "position": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Position",
            "description": "Position among all text nodes on this level"
          },
          "label": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Label",
            "description": "Label for identifying this text node in level context"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "textId",
          "level",
          "position",
          "label"
        ],
        "title": "NodeRead"
      },
      "NodeUpdate": {
        "properties": {
          "textId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textid"
          },
          "parentId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parentid",
            "description": "ID of parent node"
          },
          "level": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": 32.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Level"
          },
          "position": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Position"
          },
          "label": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 256,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          }
        },
        "type": "object",
        "title": "NodeUpdate"
      },
      "PlaintextResourceConfig": {
        "properties": {
          "category": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 16,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Resource category key"
          },
          "sortOrder": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Sortorder",
            "description": "Sort order for displaying this resource among others",
            "default": 100
          },
          "defaultActive": {
            "type": "boolean",
            "title": "Defaultactive",
            "description": "Whether this resource is active by default when public",
            "default": true
          },
          "showOnParentLevel": {
            "type": "boolean",
            "title": "Showonparentlevel",
            "description": "Show combined contents of this resource on the parent level",
            "default": false
          },
          "deeplLinks": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeepLLinksConfig"
              }
            ],
            "default": {
              "enabled": false,
              "sourceLanguage": "BG",
              "languages": [
                "EN",
                "DE"
              ]
            }
          }
        },
        "type": "object",
        "title": "PlaintextResourceConfig"
      },
      "PlaintextResourceCreate": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Title",
            "description": "Title of this resource"
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/ResourceDescriptionTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Description",
            "description": "Short, concise description of this resource",
            "default": []
          },
          "textId": {
            "type": "string",
            "title": "Textid",
            "description": "ID of the text this resource belongs to",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "level": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Level",
            "description": "Text level this resource belongs to"
          },
          "resourceType": {
            "const": "plaintext",
            "title": "Resourcetype"
          },
          "originalId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Originalid",
            "description": "If this is a version of another resource, this ID references the original"
          },
          "ownerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ownerid",
            "description": "User owning this resource"
          },
          "sharedRead": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "maxItems": 64,
            "title": "Sharedread",
            "description": "Users with shared read access to this resource",
            "default": []
          },
          "sharedWrite": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "maxItems": 64,
            "title": "Sharedwrite",
            "description": "Users with shared write access to this resource",
            "default": []
          },
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "Publication status of this resource",
            "default": false
          },
          "proposed": {
            "type": "boolean",
            "title": "Proposed",
            "description": "Whether this resource has been proposed for publication",
            "default": false
          },
          "citation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Citation",
            "description": "Citation details for this resource"
          },
          "meta": {
            "items": {
              "$ref": "#/components/schemas/Metadate"
            },
            "type": "array",
            "maxItems": 64,
            "minItems": 0,
            "title": "Meta",
            "description": "Arbitrary metadata",
            "default": []
          },
          "comment": {
            "items": {
              "$ref": "#/components/schemas/ResourceCommentTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this resource",
            "default": []
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlaintextResourceConfig"
              }
            ],
            "default": {
              "sortOrder": 100,
              "defaultActive": true,
              "showOnParentLevel": false,
              "deeplLinks": {
                "enabled": false,
                "languages": [
                  "EN",
                  "DE"
                ],
                "sourceLanguage": "BG"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "title",
          "textId",
          "level",
          "resourceType"
        ],
        "title": "PlaintextResourceCreate"
      },
      "PlaintextResourceRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "writable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Writable",
            "description": "Whether this resource is writable for the requesting user"
          },
          "owner": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserReadPublic"
              },
              {
                "type": "null"
              }
            ],
            "description": "Public user data for user owning this resource"
          },
          "sharedReadUsers": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UserReadPublic"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sharedreadusers",
            "description": "Public user data for users allowed to read this resource"
          },
          "sharedWriteUsers": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UserReadPublic"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sharedwriteusers",
            "description": "Public user data for users allowed to write this resource"
          },
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Title",
            "description": "Title of this resource"
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/ResourceDescriptionTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Description",
            "description": "Short, concise description of this resource",
            "default": []
          },
          "textId": {
            "type": "string",
            "title": "Textid",
            "description": "ID of the text this resource belongs to",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "level": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Level",
            "description": "Text level this resource belongs to"
          },
          "resourceType": {
            "const": "plaintext",
            "title": "Resourcetype"
          },
          "originalId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Originalid",
            "description": "If this is a version of another resource, this ID references the original"
          },
          "ownerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ownerid",
            "description": "User owning this resource"
          },
          "sharedRead": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "maxItems": 64,
            "title": "Sharedread",
            "description": "Users with shared read access to this resource",
            "default": []
          },
          "sharedWrite": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "maxItems": 64,
            "title": "Sharedwrite",
            "description": "Users with shared write access to this resource",
            "default": []
          },
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "Publication status of this resource",
            "default": false
          },
          "proposed": {
            "type": "boolean",
            "title": "Proposed",
            "description": "Whether this resource has been proposed for publication",
            "default": false
          },
          "citation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Citation",
            "description": "Citation details for this resource"
          },
          "meta": {
            "items": {
              "$ref": "#/components/schemas/Metadate"
            },
            "type": "array",
            "maxItems": 64,
            "minItems": 0,
            "title": "Meta",
            "description": "Arbitrary metadata",
            "default": []
          },
          "comment": {
            "items": {
              "$ref": "#/components/schemas/ResourceCommentTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this resource",
            "default": []
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlaintextResourceConfig"
              }
            ],
            "default": {
              "sortOrder": 100,
              "defaultActive": true,
              "showOnParentLevel": false,
              "deeplLinks": {
                "enabled": false,
                "languages": [
                  "EN",
                  "DE"
                ],
                "sourceLanguage": "BG"
              }
            }
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "title",
          "textId",
          "level",
          "resourceType"
        ],
        "title": "PlaintextResourceRead"
      },
      "PlaintextResourceUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/ResourceDescriptionTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Description",
            "description": "Short, concise description of this resource",
            "default": []
          },
          "textId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textid"
          },
          "level": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Level"
          },
          "resourceType": {
            "const": "plaintext",
            "title": "Resourcetype"
          },
          "originalId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Originalid",
            "description": "If this is a version of another resource, this ID references the original"
          },
          "ownerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ownerid",
            "description": "User owning this resource"
          },
          "sharedRead": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "maxItems": 64,
            "title": "Sharedread",
            "description": "Users with shared read access to this resource",
            "default": []
          },
          "sharedWrite": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "maxItems": 64,
            "title": "Sharedwrite",
            "description": "Users with shared write access to this resource",
            "default": []
          },
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "Publication status of this resource",
            "default": false
          },
          "proposed": {
            "type": "boolean",
            "title": "Proposed",
            "description": "Whether this resource has been proposed for publication",
            "default": false
          },
          "citation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Citation",
            "description": "Citation details for this resource"
          },
          "meta": {
            "items": {
              "$ref": "#/components/schemas/Metadate"
            },
            "type": "array",
            "maxItems": 64,
            "minItems": 0,
            "title": "Meta",
            "description": "Arbitrary metadata",
            "default": []
          },
          "comment": {
            "items": {
              "$ref": "#/components/schemas/ResourceCommentTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this resource",
            "default": []
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlaintextResourceConfig"
              }
            ],
            "default": {
              "sortOrder": 100,
              "defaultActive": true,
              "showOnParentLevel": false,
              "deeplLinks": {
                "enabled": false,
                "languages": [
                  "EN",
                  "DE"
                ],
                "sourceLanguage": "BG"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "resourceType"
        ],
        "title": "PlaintextResourceUpdate"
      },
      "PlaintextUnitCreate": {
        "properties": {
          "resourceId": {
            "type": "string",
            "title": "Resourceid",
            "description": "Resource ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "resourceType": {
            "const": "plaintext",
            "title": "Resourcetype"
          },
          "nodeId": {
            "type": "string",
            "title": "Nodeid",
            "description": "Parent text node ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this unit"
          },
          "text": {
            "type": "string",
            "maxLength": 102400,
            "minLength": 1,
            "title": "Text",
            "description": "Text content of the plaintext unit"
          }
        },
        "type": "object",
        "required": [
          "resourceId",
          "resourceType",
          "nodeId",
          "text"
        ],
        "title": "PlaintextUnitCreate"
      },
      "PlaintextUnitRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "resourceId": {
            "type": "string",
            "title": "Resourceid",
            "description": "Resource ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "resourceType": {
            "const": "plaintext",
            "title": "Resourcetype"
          },
          "nodeId": {
            "type": "string",
            "title": "Nodeid",
            "description": "Parent text node ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this unit"
          },
          "text": {
            "type": "string",
            "maxLength": 102400,
            "minLength": 1,
            "title": "Text",
            "description": "Text content of the plaintext unit"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "resourceId",
          "resourceType",
          "nodeId",
          "text"
        ],
        "title": "PlaintextUnitRead"
      },
      "PlaintextUnitUpdate": {
        "properties": {
          "resourceId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resourceid"
          },
          "resourceType": {
            "const": "plaintext",
            "title": "Resourcetype"
          },
          "nodeId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nodeid"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this unit"
          },
          "text": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 102400,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Text"
          }
        },
        "type": "object",
        "required": [
          "resourceType"
        ],
        "title": "PlaintextUnitUpdate"
      },
      "PlatformData": {
        "properties": {
          "tekst": {
            "type": "object",
            "title": "Tekst",
            "default": {
              "name": "Tekst",
              "version": "0.0.1",
              "description": "An online text research platform",
              "website": "https://github.com/VedaWebProject/Tekst",
              "license": "AGPL-3.0-or-later",
              "licenseUrl": "https://www.gnu.org/licenses/agpl-3.0.txt"
            }
          },
          "texts": {
            "items": {
              "$ref": "#/components/schemas/TextRead"
            },
            "type": "array",
            "title": "Texts"
          },
          "settings": {
            "$ref": "#/components/schemas/PlatformSettingsRead"
          },
          "security": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformSecurityInfo"
              }
            ],
            "default": {
              "closedMode": false,
              "usersActiveByDefault": false,
              "enableCookieAuth": true,
              "enableJwtAuth": true,
              "authCookieLifetime": 10800
            }
          },
          "systemSegments": {
            "items": {
              "$ref": "#/components/schemas/ClientSegmentRead"
            },
            "type": "array",
            "title": "Systemsegments"
          },
          "infoSegments": {
            "items": {
              "$ref": "#/components/schemas/ClientSegmentHead"
            },
            "type": "array",
            "title": "Infosegments"
          },
          "settingsCacheTtl": {
            "type": "integer",
            "title": "Settingscachettl",
            "default": 60
          }
        },
        "type": "object",
        "required": [
          "texts",
          "settings",
          "systemSegments",
          "infoSegments"
        ],
        "title": "PlatformData",
        "description": "Platform data used by the web client"
      },
      "PlatformDescriptionTranslation": {
        "properties": {
          "locale": {
            "$ref": "#/components/schemas/TranslationLocaleKey"
          },
          "translation": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Translation"
          }
        },
        "type": "object",
        "required": [
          "locale",
          "translation"
        ],
        "title": "PlatformDescriptionTranslation"
      },
      "PlatformNavInfoEntryTranslation": {
        "properties": {
          "locale": {
            "$ref": "#/components/schemas/TranslationLocaleKey"
          },
          "translation": {
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "title": "Translation"
          }
        },
        "type": "object",
        "required": [
          "locale",
          "translation"
        ],
        "title": "PlatformNavInfoEntryTranslation"
      },
      "PlatformSecurityInfo": {
        "properties": {
          "closedMode": {
            "type": "boolean",
            "title": "Closedmode",
            "default": false
          },
          "usersActiveByDefault": {
            "type": "boolean",
            "title": "Usersactivebydefault",
            "default": false
          },
          "enableCookieAuth": {
            "type": "boolean",
            "title": "Enablecookieauth",
            "default": true
          },
          "enableJwtAuth": {
            "type": "boolean",
            "title": "Enablejwtauth",
            "default": true
          },
          "authCookieLifetime": {
            "type": "integer",
            "title": "Authcookielifetime",
            "default": 10800
          }
        },
        "type": "object",
        "title": "PlatformSecurityInfo"
      },
      "PlatformSettingsRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "infoPlatformName": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Infoplatformname",
            "description": "Name of the platform",
            "default": "Tekst-Dev"
          },
          "infoSubtitle": {
            "items": {
              "$ref": "#/components/schemas/PlatformDescriptionTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Infosubtitle",
            "description": "Short description of the platform, in multiple languages",
            "default": [
              {
                "locale": "*",
                "translation": "An online text research platform"
              }
            ]
          },
          "infoTerms": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 512,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Infoterms",
            "description": "URL to page with terms and conditions for API usage"
          },
          "infoContactName": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Infocontactname",
            "description": "Platform contact name"
          },
          "infoContactEmail": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1,
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Infocontactemail",
            "description": "Platform contact email"
          },
          "infoContactUrl": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 512,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Infocontacturl",
            "description": "URL to page with contact info"
          },
          "defaultTextId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Defaulttextid",
            "description": "Default text to load in UI"
          },
          "navInfoEntry": {
            "items": {
              "$ref": "#/components/schemas/PlatformNavInfoEntryTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Navinfoentry",
            "description": "Custom label for main navigation info entry",
            "default": []
          },
          "resourceCategories": {
            "items": {
              "$ref": "#/components/schemas/ResourceCategory"
            },
            "type": "array",
            "maxItems": 32,
            "title": "Resourcecategories",
            "description": "Resource categories to categorize resources in",
            "default": []
          },
          "showResourceCategoryHeadings": {
            "type": "boolean",
            "title": "Showresourcecategoryheadings",
            "description": "Show resource category headings in browse view",
            "default": true
          },
          "alwaysShowResourceCategoryHeadings": {
            "type": "boolean",
            "title": "Alwaysshowresourcecategoryheadings",
            "description": "Show category heading for the only category with resources",
            "default": false
          },
          "alwaysShowTextInfo": {
            "type": "boolean",
            "title": "Alwaysshowtextinfo",
            "description": "Always show text info and selector in header, even on non-text-specific pages",
            "default": true
          },
          "showHeaderInfo": {
            "type": "boolean",
            "title": "Showheaderinfo",
            "description": "Show platform description in header",
            "default": true
          },
          "showFooterInfo": {
            "type": "boolean",
            "title": "Showfooterinfo",
            "description": "Show platform title and description in footer",
            "default": true
          },
          "availableLocales": {
            "items": {
              "$ref": "#/components/schemas/LocaleKey"
            },
            "type": "array",
            "maxItems": 2,
            "minItems": 1,
            "title": "Availablelocales",
            "default": [
              "deDE",
              "enUS"
            ],
            "descriptions": "Locales available for use in platform client"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id"
        ],
        "title": "PlatformSettingsRead"
      },
      "PlatformSettingsUpdate": {
        "properties": {
          "infoPlatformName": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Infoplatformname",
            "description": "Name of the platform",
            "default": "Tekst-Dev"
          },
          "infoSubtitle": {
            "items": {
              "$ref": "#/components/schemas/PlatformDescriptionTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Infosubtitle",
            "description": "Short description of the platform, in multiple languages",
            "default": [
              {
                "locale": "*",
                "translation": "An online text research platform"
              }
            ]
          },
          "infoTerms": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 512,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Infoterms",
            "description": "URL to page with terms and conditions for API usage"
          },
          "infoContactName": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Infocontactname",
            "description": "Platform contact name"
          },
          "infoContactEmail": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1,
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Infocontactemail",
            "description": "Platform contact email"
          },
          "infoContactUrl": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 512,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Infocontacturl",
            "description": "URL to page with contact info"
          },
          "defaultTextId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Defaulttextid",
            "description": "Default text to load in UI"
          },
          "navInfoEntry": {
            "items": {
              "$ref": "#/components/schemas/PlatformNavInfoEntryTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Navinfoentry",
            "description": "Custom label for main navigation info entry",
            "default": []
          },
          "resourceCategories": {
            "items": {
              "$ref": "#/components/schemas/ResourceCategory"
            },
            "type": "array",
            "maxItems": 32,
            "title": "Resourcecategories",
            "description": "Resource categories to categorize resources in",
            "default": []
          },
          "showResourceCategoryHeadings": {
            "type": "boolean",
            "title": "Showresourcecategoryheadings",
            "description": "Show resource category headings in browse view",
            "default": true
          },
          "alwaysShowResourceCategoryHeadings": {
            "type": "boolean",
            "title": "Alwaysshowresourcecategoryheadings",
            "description": "Show category heading for the only category with resources",
            "default": false
          },
          "alwaysShowTextInfo": {
            "type": "boolean",
            "title": "Alwaysshowtextinfo",
            "description": "Always show text info and selector in header, even on non-text-specific pages",
            "default": true
          },
          "showHeaderInfo": {
            "type": "boolean",
            "title": "Showheaderinfo",
            "description": "Show platform description in header",
            "default": true
          },
          "showFooterInfo": {
            "type": "boolean",
            "title": "Showfooterinfo",
            "description": "Show platform title and description in footer",
            "default": true
          },
          "availableLocales": {
            "items": {
              "$ref": "#/components/schemas/LocaleKey"
            },
            "type": "array",
            "maxItems": 2,
            "minItems": 1,
            "title": "Availablelocales",
            "default": [
              "deDE",
              "enUS"
            ],
            "descriptions": "Locales available for use in platform client"
          }
        },
        "type": "object",
        "title": "PlatformSettingsUpdate"
      },
      "PlatformStats": {
        "properties": {
          "usersCount": {
            "type": "integer",
            "title": "Userscount"
          },
          "texts": {
            "items": {
              "$ref": "#/components/schemas/TextStats"
            },
            "type": "array",
            "title": "Texts"
          }
        },
        "type": "object",
        "required": [
          "usersCount",
          "texts"
        ],
        "title": "PlatformStats",
        "description": "Platform statistics data"
      },
      "ResourceCategory": {
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "title": "Key"
          },
          "translations": {
            "items": {
              "$ref": "#/components/schemas/ResourceCategoryTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Translations"
          }
        },
        "type": "object",
        "required": [
          "key",
          "translations"
        ],
        "title": "ResourceCategory"
      },
      "ResourceCategoryTranslation": {
        "properties": {
          "locale": {
            "$ref": "#/components/schemas/TranslationLocaleKey"
          },
          "translation": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Translation"
          }
        },
        "type": "object",
        "required": [
          "locale",
          "translation"
        ],
        "title": "ResourceCategoryTranslation"
      },
      "ResourceCommentTranslation": {
        "properties": {
          "locale": {
            "$ref": "#/components/schemas/TranslationLocaleKey"
          },
          "translation": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 1,
            "title": "Translation"
          }
        },
        "type": "object",
        "required": [
          "locale",
          "translation"
        ],
        "title": "ResourceCommentTranslation"
      },
      "ResourceCoverage": {
        "properties": {
          "covered": {
            "type": "integer",
            "title": "Covered"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": [
          "covered",
          "total"
        ],
        "title": "ResourceCoverage"
      },
      "ResourceDataImportResponse": {
        "properties": {
          "updated": {
            "type": "integer",
            "title": "Updated"
          },
          "created": {
            "type": "integer",
            "title": "Created"
          }
        },
        "type": "object",
        "required": [
          "updated",
          "created"
        ],
        "title": "ResourceDataImportResponse"
      },
      "ResourceDescriptionTranslation": {
        "properties": {
          "locale": {
            "$ref": "#/components/schemas/TranslationLocaleKey"
          },
          "translation": {
            "type": "string",
            "maxLength": 512,
            "minLength": 1,
            "title": "Translation"
          }
        },
        "type": "object",
        "required": [
          "locale",
          "translation"
        ],
        "title": "ResourceDescriptionTranslation"
      },
      "ResourceNodeCoverage": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label"
          },
          "position": {
            "type": "integer",
            "title": "Position"
          },
          "covered": {
            "type": "boolean",
            "title": "Covered",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "label",
          "position"
        ],
        "title": "ResourceNodeCoverage"
      },
      "TextCreate": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Title",
            "description": "Title of this text"
          },
          "slug": {
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "pattern": "^[a-z0-9]+$",
            "title": "Slug",
            "description": "A short identifier for use in URLs and internal operations"
          },
          "subtitle": {
            "items": {
              "$ref": "#/components/schemas/TextSubtitleTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Subtitle",
            "description": "Subtitle translations of this text (if set, it must contain at least one element)",
            "default": []
          },
          "levels": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/TextLevelTranslation"
              },
              "type": "array",
              "maxItems": 3
            },
            "type": "array",
            "maxItems": 32,
            "minItems": 1,
            "title": "Levels",
            "description": "Structure levels of this text and their label translations"
          },
          "defaultLevel": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Defaultlevel",
            "description": "Default structure level for the client to use for browsing this text",
            "default": 0
          },
          "locDelim": {
            "type": "string",
            "maxLength": 3,
            "minLength": 1,
            "title": "Locdelim",
            "description": "Delimiter for displaying text locations",
            "default": ", "
          },
          "labeledLocation": {
            "type": "boolean",
            "title": "Labeledlocation",
            "description": "Whether the UI should label the parts of the browse location with each levels' names",
            "default": true
          },
          "accentColor": {
            "type": "string",
            "format": "color",
            "title": "Accentcolor",
            "description": "Accent color used for this text in the client UI",
            "default": "#305D97"
          },
          "isActive": {
            "type": "boolean",
            "title": "Isactive",
            "description": "Whether the text should be listed for non-admin users in the web client",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "title",
          "slug",
          "levels"
        ],
        "title": "TextCreate"
      },
      "TextLevelTranslation": {
        "properties": {
          "locale": {
            "$ref": "#/components/schemas/TranslationLocaleKey"
          },
          "translation": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Translation"
          }
        },
        "type": "object",
        "required": [
          "locale",
          "translation"
        ],
        "title": "TextLevelTranslation"
      },
      "TextRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Title",
            "description": "Title of this text"
          },
          "slug": {
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "pattern": "^[a-z0-9]+$",
            "title": "Slug",
            "description": "A short identifier for use in URLs and internal operations"
          },
          "subtitle": {
            "items": {
              "$ref": "#/components/schemas/TextSubtitleTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Subtitle",
            "description": "Subtitle translations of this text (if set, it must contain at least one element)",
            "default": []
          },
          "levels": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/TextLevelTranslation"
              },
              "type": "array",
              "maxItems": 3
            },
            "type": "array",
            "maxItems": 32,
            "minItems": 1,
            "title": "Levels",
            "description": "Structure levels of this text and their label translations"
          },
          "defaultLevel": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Defaultlevel",
            "description": "Default structure level for the client to use for browsing this text",
            "default": 0
          },
          "locDelim": {
            "type": "string",
            "maxLength": 3,
            "minLength": 1,
            "title": "Locdelim",
            "description": "Delimiter for displaying text locations",
            "default": ", "
          },
          "labeledLocation": {
            "type": "boolean",
            "title": "Labeledlocation",
            "description": "Whether the UI should label the parts of the browse location with each levels' names",
            "default": true
          },
          "accentColor": {
            "type": "string",
            "format": "color",
            "title": "Accentcolor",
            "description": "Accent color used for this text in the client UI",
            "default": "#305D97"
          },
          "isActive": {
            "type": "boolean",
            "title": "Isactive",
            "description": "Whether the text should be listed for non-admin users in the web client",
            "default": false
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "title",
          "slug",
          "levels"
        ],
        "title": "TextRead"
      },
      "TextStats": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "nodesCount": {
            "type": "integer",
            "title": "Nodescount"
          },
          "resourcesCount": {
            "type": "integer",
            "title": "Resourcescount"
          },
          "resourceTypes": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Resourcetypes"
          }
        },
        "type": "object",
        "required": [
          "id",
          "nodesCount",
          "resourcesCount",
          "resourceTypes"
        ],
        "title": "TextStats",
        "description": "Text statistics data"
      },
      "TextSubtitleTranslation": {
        "properties": {
          "locale": {
            "$ref": "#/components/schemas/TranslationLocaleKey"
          },
          "translation": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Translation"
          }
        },
        "type": "object",
        "required": [
          "locale",
          "translation"
        ],
        "title": "TextSubtitleTranslation"
      },
      "TextUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 16,
                "minLength": 1,
                "pattern": "^[a-z0-9]+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "subtitle": {
            "items": {
              "$ref": "#/components/schemas/TextSubtitleTranslation"
            },
            "type": "array",
            "maxItems": 3,
            "title": "Subtitle",
            "description": "Subtitle translations of this text (if set, it must contain at least one element)",
            "default": []
          },
          "levels": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "$ref": "#/components/schemas/TextLevelTranslation"
                  },
                  "type": "array",
                  "maxItems": 3
                },
                "type": "array",
                "maxItems": 32,
                "minItems": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Levels"
          },
          "defaultLevel": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Defaultlevel",
            "description": "Default structure level for the client to use for browsing this text",
            "default": 0
          },
          "locDelim": {
            "type": "string",
            "maxLength": 3,
            "minLength": 1,
            "title": "Locdelim",
            "description": "Delimiter for displaying text locations",
            "default": ", "
          },
          "labeledLocation": {
            "type": "boolean",
            "title": "Labeledlocation",
            "description": "Whether the UI should label the parts of the browse location with each levels' names",
            "default": true
          },
          "accentColor": {
            "type": "string",
            "format": "color",
            "title": "Accentcolor",
            "description": "Accent color used for this text in the client UI",
            "default": "#305D97"
          },
          "isActive": {
            "type": "boolean",
            "title": "Isactive",
            "description": "Whether the text should be listed for non-admin users in the web client",
            "default": false
          }
        },
        "type": "object",
        "title": "TextUpdate"
      },
      "TranslationLocaleKey": {
        "type": "string",
        "enum": [
          "deDE",
          "enUS",
          "*"
        ]
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "isActive": {
            "type": "boolean",
            "title": "Isactive",
            "default": false
          },
          "isSuperuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issuperuser",
            "default": false
          },
          "isVerified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isverified",
            "default": false
          },
          "username": {
            "type": "string",
            "maxLength": 16,
            "minLength": 4,
            "pattern": "[a-zA-Z0-9\\-_]+",
            "title": "Username"
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Name"
          },
          "affiliation": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Affiliation"
          },
          "locale": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LocaleKey"
              },
              {
                "type": "null"
              }
            ]
          },
          "publicFields": {
            "items": {
              "type": "string",
              "enum": [
                "name",
                "affiliation"
              ]
            },
            "type": "array",
            "title": "Publicfields",
            "description": "Data fields set public by this user",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "email",
          "password",
          "username",
          "name",
          "affiliation"
        ],
        "title": "UserCreate",
        "description": "Dataset for creating a new user"
      },
      "UserRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "isActive": {
            "type": "boolean",
            "title": "Isactive"
          },
          "isSuperuser": {
            "type": "boolean",
            "title": "Issuperuser"
          },
          "isVerified": {
            "type": "boolean",
            "title": "Isverified"
          },
          "username": {
            "type": "string",
            "maxLength": 16,
            "minLength": 4,
            "pattern": "[a-zA-Z0-9\\-_]+",
            "title": "Username"
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Name"
          },
          "affiliation": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Affiliation"
          },
          "locale": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LocaleKey"
              },
              {
                "type": "null"
              }
            ]
          },
          "publicFields": {
            "items": {
              "type": "string",
              "enum": [
                "name",
                "affiliation"
              ]
            },
            "type": "array",
            "title": "Publicfields",
            "description": "Data fields set public by this user",
            "default": []
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "isActive",
          "isSuperuser",
          "isVerified",
          "username",
          "name",
          "affiliation",
          "createdAt"
        ],
        "title": "UserRead",
        "description": "A user registered in the system"
      },
      "UserReadPublic": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "affiliation": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Affiliation"
          },
          "publicFields": {
            "items": {
              "type": "string",
              "enum": [
                "name",
                "affiliation"
              ]
            },
            "type": "array",
            "maxItems": 64,
            "title": "Publicfields",
            "description": "Data fields set public by this user",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "username"
        ],
        "title": "UserReadPublic"
      },
      "UserUpdate": {
        "properties": {
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "isActive": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isactive"
          },
          "isSuperuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issuperuser"
          },
          "isVerified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isverified"
          },
          "username": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 16,
                "minLength": 4,
                "pattern": "[a-zA-Z0-9\\-_]+"
              },
              {
                "type": "null"
              }
            ],
            "title": "Username"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "affiliation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Affiliation"
          },
          "locale": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LocaleKey"
              },
              {
                "type": "null"
              }
            ]
          },
          "publicFields": {
            "items": {
              "type": "string",
              "enum": [
                "name",
                "affiliation"
              ]
            },
            "type": "array",
            "title": "Publicfields",
            "description": "Data fields set public by this user",
            "default": []
          }
        },
        "type": "object",
        "title": "UserUpdate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "APIKeyCookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "tekstuserauth"
      },
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "auth/jwt/login"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "texts",
      "description": "Text-related operations",
      "externalDocs": {
        "description": "View full documentation",
        "url": "https://vedawebproject.github.io/Tekst"
      }
    }
  ]
}