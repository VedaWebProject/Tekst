{
  "openapi": "3.1.0",
  "info": {
    "title": "Tekst-Dev",
    "description": "An online text research platform",
    "termsOfService": "None",
    "contact": {},
    "license": {
      "name": "AGPL-3.0-or-later",
      "url": "https://www.gnu.org/licenses/agpl-3.0.txt"
    },
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "http://127.0.0.1/api"
    }
  ],
  "paths": {
    "/admin/stats": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get stats",
        "operationId": "getStats",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformStats"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/users": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get users",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserRead"
                  },
                  "type": "array",
                  "title": "Response Get Users Admin Users Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/testemail": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Test email",
        "operationId": "testEmail",
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/browse/unit-siblings": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get unit siblings",
        "description": "Returns a list of all data layer units belonging to the data layer\nwith the given ID, associated to nodes that are children of the parent node\nwith the given ID.\n\nAs the resulting list may contain units of arbitrary type, the\nreturned unit objects cannot be typed to their precise layer unit type.\nAlso, the returned unit objects have an additional property containing their\nrespective node's label, level and position.",
        "operationId": "getUnitSiblings",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "layerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "description": "ID of layer the requested units belong to",
              "title": "Layerid"
            },
            "description": "ID of layer the requested units belong to"
          },
          {
            "name": "parentNodeId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "example": "5eb7cf5a86d9755df3a6c593"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ID of node for which siblings to get associated units for",
              "title": "Parentnodeid"
            },
            "description": "ID of node for which siblings to get associated units for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Response Get Unit Siblings Browse Unit Siblings Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/browse/nodes/path": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get node path",
        "description": "Returns the text node path from the node with the given level/position\nas the last element, up to its most distant ancestor node\non structure level 0 as the first element of an array.",
        "operationId": "getNodePath",
        "parameters": [
          {
            "name": "textId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Textid"
            }
          },
          {
            "name": "level",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Level"
            }
          },
          {
            "name": "position",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Position"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeRead"
                  },
                  "title": "Response Get Node Path Browse Nodes Path Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/browse/nodes/{id}/path/options-by-head": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get path options by head id",
        "description": "Returns the options for selecting text locations derived from the node path of\nthe node with the given ID as head.",
        "operationId": "getPathOptionsByHeadId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NodeRead"
                    }
                  },
                  "title": "Response Get Path Options By Head Id Browse Nodes  Id  Path Options By Head Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/browse/nodes/{id}/path/options-by-root": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get path options by root id",
        "description": "Returns the options for selecting text locations derived from the node path of\nthe node with the given ID as root. At each level, the first option is taken\nas the basis for the next level.",
        "operationId": "getPathOptionsByRootId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NodeRead"
                    }
                  },
                  "title": "Response Get Path Options By Root Id Browse Nodes  Id  Path Options By Root Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/browse/layers/{id}/coverage": {
      "get": {
        "tags": [
          "browse"
        ],
        "summary": "Get layer coverage data",
        "operationId": "getLayerCoverageData",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LayerNodeCoverage"
                  },
                  "title": "Response Get Layer Coverage Data Browse Layers  Id  Coverage Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/layers": {
      "post": {
        "tags": [
          "layers"
        ],
        "summary": "Create layer",
        "operationId": "createLayer",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DebugLayerCreate"
                  },
                  {
                    "$ref": "#/components/schemas/PlaintextLayerCreate"
                  }
                ],
                "discriminator": {
                  "propertyName": "layerType",
                  "mapping": {
                    "debug": "#/components/schemas/DebugLayerCreate",
                    "plaintext": "#/components/schemas/PlaintextLayerCreate"
                  }
                },
                "title": "Layer"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugLayerRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextLayerRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "layerType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugLayerRead",
                      "plaintext": "#/components/schemas/PlaintextLayerRead"
                    }
                  },
                  "title": "Response Create Layer Layers Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "layers"
        ],
        "summary": "Find layers",
        "description": "Returns a list of all data layers matching the given criteria.\n\nAs the resulting list of data layers may contain layers of different types, the\nreturned layer objects cannot be typed to their precise layer type.",
        "operationId": "findLayers",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "textId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Textid"
            }
          },
          {
            "name": "level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Level"
            }
          },
          {
            "name": "layerType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Layertype"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 4096,
              "title": "Limit"
            }
          },
          {
            "name": "owners",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include owners' user data, if any",
              "default": false,
              "title": "Owners"
            },
            "description": "Include owners' user data, if any"
          },
          {
            "name": "writable",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Add flag indicating write permissions for requesting user",
              "default": false,
              "title": "Writable"
            },
            "description": "Add flag indicating write permissions for requesting user"
          },
          {
            "name": "shares",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include shared-with users' user data, if any",
              "default": false,
              "title": "Shares"
            },
            "description": "Include shared-with users' user data, if any"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DebugLayerRead"
                      },
                      {
                        "$ref": "#/components/schemas/PlaintextLayerRead"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "layerType",
                      "mapping": {
                        "debug": "#/components/schemas/DebugLayerRead",
                        "plaintext": "#/components/schemas/PlaintextLayerRead"
                      }
                    }
                  },
                  "title": "Response Find Layers Layers Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/layers/{id}": {
      "patch": {
        "tags": [
          "layers"
        ],
        "summary": "Update layer",
        "operationId": "updateLayer",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DebugLayerUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/PlaintextLayerUpdate"
                  }
                ],
                "discriminator": {
                  "propertyName": "layerType",
                  "mapping": {
                    "debug": "#/components/schemas/DebugLayerUpdate",
                    "plaintext": "#/components/schemas/PlaintextLayerUpdate"
                  }
                },
                "title": "Updates"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugLayerRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextLayerRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "layerType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugLayerRead",
                      "plaintext": "#/components/schemas/PlaintextLayerRead"
                    }
                  },
                  "title": "Response Update Layer Layers  Id  Patch"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "layers"
        ],
        "summary": "Get layer",
        "operationId": "getLayer",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          },
          {
            "name": "owners",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include owners' user data, if any",
              "default": false,
              "title": "Owners"
            },
            "description": "Include owners' user data, if any"
          },
          {
            "name": "writable",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Add flag indicating write permissions for requesting user",
              "default": false,
              "title": "Writable"
            },
            "description": "Add flag indicating write permissions for requesting user"
          },
          {
            "name": "shares",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include shared-with users' user data, if any",
              "default": false,
              "title": "Shares"
            },
            "description": "Include shared-with users' user data, if any"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugLayerRead"
                    },
                    {
                      "$ref": "#/components/schemas/PlaintextLayerRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "layerType",
                    "mapping": {
                      "debug": "#/components/schemas/DebugLayerRead",
                      "plaintext": "#/components/schemas/PlaintextLayerRead"
                    }
                  },
                  "title": "Response Get Layer Layers  Id  Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "layers"
        ],
        "summary": "Delete layer",
        "operationId": "deleteLayer",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/layers/{id}/propose": {
      "post": {
        "tags": [
          "layers"
        ],
        "summary": "Propose layer",
        "operationId": "proposeLayer",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/layers/{id}/unpropose": {
      "post": {
        "tags": [
          "layers"
        ],
        "summary": "Unpropose layer",
        "operationId": "unproposeLayer",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/layers/{id}/publish": {
      "post": {
        "tags": [
          "layers"
        ],
        "summary": "Publish layer",
        "operationId": "publishLayer",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/layers/{id}/unpublish": {
      "post": {
        "tags": [
          "layers"
        ],
        "summary": "Unpublish layer",
        "operationId": "unpublishLayer",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/nodes": {
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Create node",
        "description": "Creates a new node. The position will be automatically set to the last position\nof the node's parent (or the first parent before that has children).",
        "operationId": "createNode",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Find nodes",
        "operationId": "findNodes",
        "parameters": [
          {
            "name": "textId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Textid"
            }
          },
          {
            "name": "level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Level"
            }
          },
          {
            "name": "position",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Position"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Parentid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeRead"
                  },
                  "title": "Response Find Nodes Nodes Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/children": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Get children",
        "operationId": "getChildren",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "example": "5eb7cf5a86d9755df3a6c593"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Parentid"
            }
          },
          {
            "name": "textId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "example": "5eb7cf5a86d9755df3a6c593"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Textid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 9999,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeRead"
                  },
                  "title": "Response Get Children Nodes Children Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{id}": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Get node",
        "operationId": "getNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "nodes"
        ],
        "summary": "Update node",
        "operationId": "updateNode",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "nodes"
        ],
        "summary": "Delete node",
        "description": "Deletes the specified node. Also deletes any associated units, child nodes and units associated with child nodes.",
        "operationId": "deleteNode",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteNodeResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{id}/move": {
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Move node",
        "description": "Moves the specified node to a new position on its structure level.",
        "operationId": "moveNode",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveNodeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/platform": {
      "get": {
        "tags": [
          "platform"
        ],
        "summary": "Get platform data",
        "description": "Returns data the client needs to initialize",
        "operationId": "getPlatformData",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformData"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/platform/users/{usernameOrId}": {
      "get": {
        "tags": [
          "platform"
        ],
        "summary": "Get public user info",
        "description": "Returns public information on the user with the specified username or ID",
        "operationId": "getPublicUserInfo",
        "parameters": [
          {
            "name": "usernameOrId",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "example": "5eb7cf5a86d9755df3a6c593"
                }
              ],
              "title": "Usernameorid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserReadPublic"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/platform/users": {
      "get": {
        "tags": [
          "platform"
        ],
        "summary": "Get public users",
        "operationId": "getPublicUsers",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserReadPublic"
                  },
                  "type": "array",
                  "title": "Response Get Public Users Platform Users Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/platform/settings": {
      "patch": {
        "tags": [
          "platform"
        ],
        "summary": "Update platform settings",
        "operationId": "updatePlatformSettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformSettingsUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSettingsRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/platform/segments/{id}": {
      "get": {
        "tags": [
          "platform"
        ],
        "summary": "Get segment",
        "operationId": "getSegment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSegmentRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "platform"
        ],
        "summary": "Update segment",
        "operationId": "updateSegment",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientSegmentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSegmentRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "platform"
        ],
        "summary": "Delete segment",
        "operationId": "deleteSegment",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/platform/segments": {
      "post": {
        "tags": [
          "platform"
        ],
        "summary": "Create segment",
        "operationId": "createSegment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientSegmentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSegmentRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/texts": {
      "get": {
        "tags": [
          "texts"
        ],
        "summary": "Get all texts",
        "operationId": "getAllTexts",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextRead"
                  },
                  "title": "Response Get All Texts Texts Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "texts"
        ],
        "summary": "Create text",
        "operationId": "createText",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/texts/{id}/template": {
      "get": {
        "tags": [
          "texts"
        ],
        "summary": "Download structure template",
        "description": "Download the structure template for a text to help compose a structure\ndefinition that can later be uploaded to the server",
        "operationId": "downloadStructureTemplate",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/texts/{id}/structure": {
      "post": {
        "tags": [
          "texts"
        ],
        "summary": "Upload structure definition",
        "description": "Upload the structure definition for a text to apply as a structure of nodes",
        "operationId": "uploadStructureDefinition",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_structure_definition_texts__id__structure_post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/texts/{id}/level/{index}": {
      "post": {
        "tags": [
          "texts"
        ],
        "summary": "Insert level",
        "operationId": "insertLevel",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          },
          {
            "name": "index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 32,
              "description": "Index to insert the level at",
              "title": "Index"
            },
            "description": "Index to insert the level at"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StructureLevelTranslation"
                },
                "minItems": 1,
                "description": "Label translations for this level",
                "title": "Translations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "texts"
        ],
        "summary": "Delete level",
        "operationId": "deleteLevel",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          },
          {
            "name": "index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 32,
              "description": "Index to insert the level at",
              "title": "Index"
            },
            "description": "Index to insert the level at"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/texts/{id}": {
      "delete": {
        "tags": [
          "texts"
        ],
        "summary": "Delete text",
        "operationId": "deleteText",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "texts"
        ],
        "summary": "Get text",
        "operationId": "getText",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "texts"
        ],
        "summary": "Update text",
        "operationId": "updateText",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/units/debug/{id}": {
      "get": {
        "tags": [
          "units"
        ],
        "summary": "Get unit",
        "description": "Returns the data for a Debug data layer unit",
        "operationId": "getDebugUnit",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebugUnitRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "units"
        ],
        "summary": "Update unit",
        "description": "Updates the data for a Debug data layer unit",
        "operationId": "updateDebugUnit",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DebugUnitUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebugUnitRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/units/debug": {
      "post": {
        "tags": [
          "units"
        ],
        "summary": "Create unit",
        "description": "Creates a Debug data layer unit",
        "operationId": "createDebugUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DebugUnitCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebugUnitRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/units/plaintext/{id}": {
      "get": {
        "tags": [
          "units"
        ],
        "summary": "Get unit",
        "description": "Returns the data for a Plaintext data layer unit",
        "operationId": "getPlaintextUnit",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaintextUnitRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "units"
        ],
        "summary": "Update unit",
        "description": "Updates the data for a Plaintext data layer unit",
        "operationId": "updatePlaintextUnit",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaintextUnitUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaintextUnitRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/units/plaintext": {
      "post": {
        "tags": [
          "units"
        ],
        "summary": "Create unit",
        "description": "Creates a Plaintext data layer unit",
        "operationId": "createPlaintextUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaintextUnitCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaintextUnitRead"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/units/": {
      "get": {
        "tags": [
          "units"
        ],
        "summary": "Find units",
        "description": "Returns a list of all data layer units matching the given criteria.\n\nRespects restricted layers and inactive texts.\nAs the resulting list may contain units of different types, the\nreturned unit objects cannot be typed to their precise layer unit type.",
        "operationId": "findUnits",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "layerId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              "description": "ID (or list of IDs) of layer(s) to return unit data for",
              "default": [],
              "title": "Layerid"
            },
            "description": "ID (or list of IDs) of layer(s) to return unit data for"
          },
          {
            "name": "nodeId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              "description": "ID (or list of IDs) of node(s) to return unit data for",
              "default": [],
              "title": "Nodeid"
            },
            "description": "ID (or list of IDs) of node(s) to return unit data for"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Return at most <limit> items",
              "default": 1000,
              "title": "Limit"
            },
            "description": "Return at most <limit> items"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Response Find Units Units  Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/cookie/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "operationId": "auth:cookie.login",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_auth_cookie_login_auth_cookie_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "LOGIN_BAD_CREDENTIALS": {
                    "summary": "Bad credentials or the user is inactive.",
                    "value": {
                      "detail": "LOGIN_BAD_CREDENTIALS"
                    }
                  },
                  "LOGIN_USER_NOT_VERIFIED": {
                    "summary": "The user is not verified.",
                    "value": {
                      "detail": "LOGIN_USER_NOT_VERIFIED"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/cookie/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "operationId": "auth:cookie.logout",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/auth/jwt/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "operationId": "auth:jwt.login",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_auth_jwt_login_auth_jwt_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BearerResponse"
                },
                "example": {
                  "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI",
                  "token_type": "bearer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "LOGIN_BAD_CREDENTIALS": {
                    "summary": "Bad credentials or the user is inactive.",
                    "value": {
                      "detail": "LOGIN_BAD_CREDENTIALS"
                    }
                  },
                  "LOGIN_USER_NOT_VERIFIED": {
                    "summary": "The user is not verified.",
                    "value": {
                      "detail": "LOGIN_USER_NOT_VERIFIED"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/jwt/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "operationId": "auth:jwt.logout",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register",
        "operationId": "register:register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "REGISTER_USER_ALREADY_EXISTS": {
                    "summary": "A user with this email already exists.",
                    "value": {
                      "detail": "REGISTER_USER_ALREADY_EXISTS"
                    }
                  },
                  "REGISTER_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "REGISTER_INVALID_PASSWORD",
                        "reason": "Password should beat least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/request-verify-token": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Request verify token",
        "operationId": "verify:requestToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_verify_request_token_auth_request_verify_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Verify",
        "operationId": "verify:verify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_verify_verify_auth_verify_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "VERIFY_USER_BAD_TOKEN": {
                    "summary": "Bad token, not existing user ornot the e-mail currently set for the user.",
                    "value": {
                      "detail": "VERIFY_USER_BAD_TOKEN"
                    }
                  },
                  "VERIFY_USER_ALREADY_VERIFIED": {
                    "summary": "The user is already verified.",
                    "value": {
                      "detail": "VERIFY_USER_ALREADY_VERIFIED"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Forgot password",
        "operationId": "reset:forgotPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_reset_forgot_password_auth_forgot_password_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Reset password",
        "operationId": "reset:resetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_reset_reset_password_auth_reset_password_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "RESET_PASSWORD_BAD_TOKEN": {
                    "summary": "Bad or expired token.",
                    "value": {
                      "detail": "RESET_PASSWORD_BAD_TOKEN"
                    }
                  },
                  "RESET_PASSWORD_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "RESET_PASSWORD_INVALID_PASSWORD",
                        "reason": "Password should be at least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Me",
        "operationId": "users:currentUser",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update me",
        "operationId": "users:patchCurrentUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "UPDATE_USER_EMAIL_ALREADY_EXISTS": {
                    "summary": "A user with this email already exists.",
                    "value": {
                      "detail": "UPDATE_USER_EMAIL_ALREADY_EXISTS"
                    }
                  },
                  "UPDATE_USER_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "UPDATE_USER_INVALID_PASSWORD",
                        "reason": "Password should beat least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user",
        "operationId": "users:user",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "403": {
            "description": "Not a superuser."
          },
          "404": {
            "description": "The user does not exist."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update user",
        "operationId": "users:patchUser",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "403": {
            "description": "Not a superuser."
          },
          "404": {
            "description": "The user does not exist."
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "UPDATE_USER_EMAIL_ALREADY_EXISTS": {
                    "summary": "A user with this email already exists.",
                    "value": {
                      "detail": "UPDATE_USER_EMAIL_ALREADY_EXISTS"
                    }
                  },
                  "UPDATE_USER_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "UPDATE_USER_INVALID_PASSWORD",
                        "reason": "Password should beat least 3 characters"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user",
        "operationId": "users:deleteUser",
        "security": [
          {
            "APIKeyCookie": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "403": {
            "description": "Not a superuser."
          },
          "404": {
            "description": "The user does not exist."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BearerResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type"
        ],
        "title": "BearerResponse"
      },
      "Body_auth_cookie_login_auth_cookie_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_auth_cookie_login_auth_cookie_login_post"
      },
      "Body_auth_jwt_login_auth_jwt_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_auth_jwt_login_auth_jwt_login_post"
      },
      "Body_reset_forgot_password_auth_forgot_password_post": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "Body_reset_forgot_password_auth_forgot_password_post"
      },
      "Body_reset_reset_password_auth_reset_password_post": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "token",
          "password"
        ],
        "title": "Body_reset_reset_password_auth_reset_password_post"
      },
      "Body_upload_structure_definition_texts__id__structure_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "JSON file containing the text's structure"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_structure_definition_texts__id__structure_post"
      },
      "Body_verify_request_token_auth_request_verify_token_post": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "Body_verify_request_token_auth_request_verify_token_post"
      },
      "Body_verify_verify_auth_verify_post": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "Body_verify_verify_auth_verify_post"
      },
      "ClientSegmentCreate": {
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "pattern": "[a-zA-Z0-9\\-_]+",
            "title": "Key",
            "description": "Key of this segment. System segment keys must start with `system`."
          },
          "isSystemSegment": {
            "type": "boolean",
            "title": "Issystemsegment",
            "description": "Whether this is a system segment (will be set automatically)",
            "default": false
          },
          "editorMode": {
            "type": "string",
            "enum": [
              "wysiwyg",
              "html"
            ],
            "title": "Editormode",
            "description": "Last used editor mode",
            "default": "wysiwyg"
          },
          "locale": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "deDE",
                  "enUS"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Locale",
            "description": "Locale indicating the translation language of this segment"
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 32
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Title of this segment"
          },
          "html": {
            "type": "string",
            "maxLength": 1048576,
            "title": "Html",
            "description": "HTML content of this segment"
          }
        },
        "type": "object",
        "required": [
          "key",
          "html"
        ],
        "title": "ClientSegmentCreate"
      },
      "ClientSegmentHead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "locale": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "deDE",
                  "enUS"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Locale"
          }
        },
        "type": "object",
        "required": [
          "id",
          "key"
        ],
        "title": "ClientSegmentHead"
      },
      "ClientSegmentRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "key": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "pattern": "[a-zA-Z0-9\\-_]+",
            "title": "Key",
            "description": "Key of this segment. System segment keys must start with `system`."
          },
          "isSystemSegment": {
            "type": "boolean",
            "title": "Issystemsegment",
            "description": "Whether this is a system segment (will be set automatically)",
            "default": false
          },
          "editorMode": {
            "type": "string",
            "enum": [
              "wysiwyg",
              "html"
            ],
            "title": "Editormode",
            "description": "Last used editor mode",
            "default": "wysiwyg"
          },
          "locale": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "deDE",
                  "enUS"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Locale",
            "description": "Locale indicating the translation language of this segment"
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 32
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Title of this segment"
          },
          "html": {
            "type": "string",
            "maxLength": 1048576,
            "title": "Html",
            "description": "HTML content of this segment"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "key",
          "html"
        ],
        "title": "ClientSegmentRead"
      },
      "ClientSegmentUpdate": {
        "properties": {
          "key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Key"
          },
          "isSystemSegment": {
            "type": "boolean",
            "title": "Issystemsegment",
            "description": "Whether this is a system segment (will be set automatically)",
            "default": false
          },
          "editorMode": {
            "type": "string",
            "enum": [
              "wysiwyg",
              "html"
            ],
            "title": "Editormode",
            "description": "Last used editor mode",
            "default": "wysiwyg"
          },
          "locale": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "deDE",
                  "enUS"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Locale",
            "description": "Locale indicating the translation language of this segment"
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 32
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Title of this segment"
          },
          "html": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Html"
          }
        },
        "type": "object",
        "title": "ClientSegmentUpdate"
      },
      "DebugLayerConfig": {
        "properties": {
          "deeplLinks": {
            "$ref": "#/components/schemas/DeepLLinksConfig"
          }
        },
        "type": "object",
        "title": "DebugLayerConfig"
      },
      "DebugLayerCreate": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Title",
            "description": "Title of this layer"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 512,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Short, concise description of this data layer"
          },
          "textId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textid",
            "description": "ID of the text this layer belongs to"
          },
          "level": {
            "type": "integer",
            "title": "Level",
            "description": "Text level this layer belongs to"
          },
          "layerType": {
            "const": "debug",
            "title": "Layertype"
          },
          "ownerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ownerid",
            "description": "User owning this layer"
          },
          "sharedRead": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "title": "Sharedread",
            "description": "Users with shared read access to this layer",
            "default": []
          },
          "sharedWrite": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "title": "Sharedwrite",
            "description": "Users with shared write access to this layer",
            "default": []
          },
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "Publication status of this layer",
            "default": false
          },
          "proposed": {
            "type": "boolean",
            "title": "Proposed",
            "description": "Whether this layer has been proposed for publication",
            "default": false
          },
          "citation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Citation",
            "description": "Citation details for this layer"
          },
          "meta": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Metadate"
                },
                "type": "array",
                "maxItems": 64,
                "minItems": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta",
            "description": "Arbitrary metadata"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this layer"
          },
          "config": {
            "$ref": "#/components/schemas/DebugLayerConfig"
          }
        },
        "type": "object",
        "required": [
          "title",
          "level",
          "layerType"
        ],
        "title": "DebugLayerCreate"
      },
      "DebugLayerRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "writable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Writable",
            "description": "Whether this layer is writable for the requesting user"
          },
          "owner": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserReadPublic"
              },
              {
                "type": "null"
              }
            ],
            "description": "Public user data for user owning this layer"
          },
          "sharedReadUsers": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UserReadPublic"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sharedreadusers",
            "description": "Public user data for users allowed to read this layer"
          },
          "sharedWriteUsers": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UserReadPublic"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sharedwriteusers",
            "description": "Public user data for users allowed to write this layer"
          },
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Title",
            "description": "Title of this layer"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 512,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Short, concise description of this data layer"
          },
          "textId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textid",
            "description": "ID of the text this layer belongs to"
          },
          "level": {
            "type": "integer",
            "title": "Level",
            "description": "Text level this layer belongs to"
          },
          "layerType": {
            "const": "debug",
            "title": "Layertype"
          },
          "ownerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ownerid",
            "description": "User owning this layer"
          },
          "sharedRead": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "title": "Sharedread",
            "description": "Users with shared read access to this layer",
            "default": []
          },
          "sharedWrite": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "title": "Sharedwrite",
            "description": "Users with shared write access to this layer",
            "default": []
          },
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "Publication status of this layer",
            "default": false
          },
          "proposed": {
            "type": "boolean",
            "title": "Proposed",
            "description": "Whether this layer has been proposed for publication",
            "default": false
          },
          "citation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Citation",
            "description": "Citation details for this layer"
          },
          "meta": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Metadate"
                },
                "type": "array",
                "maxItems": 64,
                "minItems": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta",
            "description": "Arbitrary metadata"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this layer"
          },
          "config": {
            "$ref": "#/components/schemas/DebugLayerConfig"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "title",
          "level",
          "layerType"
        ],
        "title": "DebugLayerRead"
      },
      "DebugLayerUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 512,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Short, concise description of this data layer"
          },
          "textId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textid",
            "description": "ID of the text this layer belongs to"
          },
          "level": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level"
          },
          "layerType": {
            "const": "debug",
            "title": "Layertype"
          },
          "ownerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ownerid",
            "description": "User owning this layer"
          },
          "sharedRead": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "title": "Sharedread",
            "description": "Users with shared read access to this layer",
            "default": []
          },
          "sharedWrite": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "title": "Sharedwrite",
            "description": "Users with shared write access to this layer",
            "default": []
          },
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "Publication status of this layer",
            "default": false
          },
          "proposed": {
            "type": "boolean",
            "title": "Proposed",
            "description": "Whether this layer has been proposed for publication",
            "default": false
          },
          "citation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Citation",
            "description": "Citation details for this layer"
          },
          "meta": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Metadate"
                },
                "type": "array",
                "maxItems": 64,
                "minItems": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta",
            "description": "Arbitrary metadata"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this layer"
          },
          "config": {
            "$ref": "#/components/schemas/DebugLayerConfig"
          }
        },
        "type": "object",
        "required": [
          "layerType"
        ],
        "title": "DebugLayerUpdate"
      },
      "DebugUnitCreate": {
        "properties": {
          "layerId": {
            "type": "string",
            "title": "Layerid",
            "description": "Data layer ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "nodeId": {
            "type": "string",
            "title": "Nodeid",
            "description": "Parent text node ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this unit"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "Text content of the debug unit"
          }
        },
        "type": "object",
        "required": [
          "layerId",
          "nodeId"
        ],
        "title": "DebugUnitCreate"
      },
      "DebugUnitRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "layerId": {
            "type": "string",
            "title": "Layerid",
            "description": "Data layer ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "nodeId": {
            "type": "string",
            "title": "Nodeid",
            "description": "Parent text node ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this unit"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "Text content of the debug unit"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "layerId",
          "nodeId"
        ],
        "title": "DebugUnitRead"
      },
      "DebugUnitUpdate": {
        "properties": {
          "layerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Layerid"
          },
          "nodeId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nodeid"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this unit"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "Text content of the debug unit"
          }
        },
        "type": "object",
        "title": "DebugUnitUpdate"
      },
      "DeepLLinksConfig": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Enable/disable quick translation links to DeepL",
            "default": false
          },
          "sourceLanguage": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "BG",
                  "CS",
                  "DA",
                  "DE",
                  "EL",
                  "EN",
                  "ES",
                  "ET",
                  "FI",
                  "FR",
                  "HU",
                  "ID",
                  "IT",
                  "JA",
                  "LT",
                  "LV",
                  "NL",
                  "PL",
                  "PT",
                  "RO",
                  "RU",
                  "SK",
                  "SL",
                  "SV",
                  "TR",
                  "UK",
                  "ZH"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Sourcelanguage",
            "description": "Source language",
            "default": "BG"
          },
          "languages": {
            "items": {
              "type": "string",
              "enum": [
                "BG",
                "CS",
                "DA",
                "DE",
                "EL",
                "EN",
                "ES",
                "ET",
                "FI",
                "FR",
                "HU",
                "ID",
                "IT",
                "JA",
                "LT",
                "LV",
                "NL",
                "PL",
                "PT",
                "RO",
                "RU",
                "SK",
                "SL",
                "SV",
                "TR",
                "UK",
                "ZH"
              ]
            },
            "type": "array",
            "title": "Languages",
            "description": "Target languages to display links for",
            "default": [
              "EN",
              "DE"
            ]
          }
        },
        "type": "object",
        "title": "DeepLLinksConfig"
      },
      "DeleteNodeResult": {
        "properties": {
          "units": {
            "type": "integer",
            "title": "Units"
          },
          "nodes": {
            "type": "integer",
            "title": "Nodes"
          }
        },
        "type": "object",
        "required": [
          "units",
          "nodes"
        ],
        "title": "DeleteNodeResult"
      },
      "ErrorModel": {
        "properties": {
          "detail": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            ],
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "ErrorModel"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LayerNodeCoverage": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label"
          },
          "position": {
            "type": "integer",
            "title": "Position"
          },
          "covered": {
            "type": "boolean",
            "title": "Covered"
          }
        },
        "type": "object",
        "required": [
          "label",
          "position",
          "covered"
        ],
        "title": "LayerNodeCoverage"
      },
      "Metadate": {
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "title": "Key"
          },
          "value": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "Metadate"
      },
      "MoveNodeRequestBody": {
        "properties": {
          "position": {
            "type": "integer",
            "title": "Position"
          },
          "after": {
            "type": "boolean",
            "title": "After"
          },
          "parentId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parentid"
          }
        },
        "type": "object",
        "required": [
          "position",
          "after",
          "parentId"
        ],
        "title": "MoveNodeRequestBody"
      },
      "NodeCreate": {
        "properties": {
          "textId": {
            "type": "string",
            "title": "Textid",
            "description": "ID of the text this node belongs to",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "parentId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parentid",
            "description": "ID of parent node"
          },
          "level": {
            "type": "integer",
            "exclusiveMaximum": 32.0,
            "minimum": 0.0,
            "title": "Level",
            "description": "Index of structure level this node is on"
          },
          "position": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Position",
            "description": "Position among all text nodes on this level"
          },
          "label": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Label",
            "description": "Label for identifying this text node in level context"
          }
        },
        "type": "object",
        "required": [
          "textId",
          "level",
          "position",
          "label"
        ],
        "title": "NodeCreate"
      },
      "NodeRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "textId": {
            "type": "string",
            "title": "Textid",
            "description": "ID of the text this node belongs to",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "parentId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parentid",
            "description": "ID of parent node"
          },
          "level": {
            "type": "integer",
            "exclusiveMaximum": 32.0,
            "minimum": 0.0,
            "title": "Level",
            "description": "Index of structure level this node is on"
          },
          "position": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Position",
            "description": "Position among all text nodes on this level"
          },
          "label": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Label",
            "description": "Label for identifying this text node in level context"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "textId",
          "level",
          "position",
          "label"
        ],
        "title": "NodeRead"
      },
      "NodeUpdate": {
        "properties": {
          "textId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textid"
          },
          "parentId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parentid",
            "description": "ID of parent node"
          },
          "level": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level"
          },
          "position": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Position"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          }
        },
        "type": "object",
        "title": "NodeUpdate"
      },
      "PlaintextLayerConfig": {
        "properties": {
          "deeplLinks": {
            "$ref": "#/components/schemas/DeepLLinksConfig"
          }
        },
        "type": "object",
        "title": "PlaintextLayerConfig"
      },
      "PlaintextLayerCreate": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Title",
            "description": "Title of this layer"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 512,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Short, concise description of this data layer"
          },
          "textId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textid",
            "description": "ID of the text this layer belongs to"
          },
          "level": {
            "type": "integer",
            "title": "Level",
            "description": "Text level this layer belongs to"
          },
          "layerType": {
            "const": "plaintext",
            "title": "Layertype"
          },
          "ownerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ownerid",
            "description": "User owning this layer"
          },
          "sharedRead": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "title": "Sharedread",
            "description": "Users with shared read access to this layer",
            "default": []
          },
          "sharedWrite": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "title": "Sharedwrite",
            "description": "Users with shared write access to this layer",
            "default": []
          },
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "Publication status of this layer",
            "default": false
          },
          "proposed": {
            "type": "boolean",
            "title": "Proposed",
            "description": "Whether this layer has been proposed for publication",
            "default": false
          },
          "citation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Citation",
            "description": "Citation details for this layer"
          },
          "meta": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Metadate"
                },
                "type": "array",
                "maxItems": 64,
                "minItems": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta",
            "description": "Arbitrary metadata"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this layer"
          },
          "config": {
            "$ref": "#/components/schemas/PlaintextLayerConfig"
          }
        },
        "type": "object",
        "required": [
          "title",
          "level",
          "layerType"
        ],
        "title": "PlaintextLayerCreate"
      },
      "PlaintextLayerRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "writable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Writable",
            "description": "Whether this layer is writable for the requesting user"
          },
          "owner": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserReadPublic"
              },
              {
                "type": "null"
              }
            ],
            "description": "Public user data for user owning this layer"
          },
          "sharedReadUsers": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UserReadPublic"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sharedreadusers",
            "description": "Public user data for users allowed to read this layer"
          },
          "sharedWriteUsers": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UserReadPublic"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sharedwriteusers",
            "description": "Public user data for users allowed to write this layer"
          },
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Title",
            "description": "Title of this layer"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 512,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Short, concise description of this data layer"
          },
          "textId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textid",
            "description": "ID of the text this layer belongs to"
          },
          "level": {
            "type": "integer",
            "title": "Level",
            "description": "Text level this layer belongs to"
          },
          "layerType": {
            "const": "plaintext",
            "title": "Layertype"
          },
          "ownerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ownerid",
            "description": "User owning this layer"
          },
          "sharedRead": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "title": "Sharedread",
            "description": "Users with shared read access to this layer",
            "default": []
          },
          "sharedWrite": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "title": "Sharedwrite",
            "description": "Users with shared write access to this layer",
            "default": []
          },
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "Publication status of this layer",
            "default": false
          },
          "proposed": {
            "type": "boolean",
            "title": "Proposed",
            "description": "Whether this layer has been proposed for publication",
            "default": false
          },
          "citation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Citation",
            "description": "Citation details for this layer"
          },
          "meta": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Metadate"
                },
                "type": "array",
                "maxItems": 64,
                "minItems": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta",
            "description": "Arbitrary metadata"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this layer"
          },
          "config": {
            "$ref": "#/components/schemas/PlaintextLayerConfig"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "title",
          "level",
          "layerType"
        ],
        "title": "PlaintextLayerRead"
      },
      "PlaintextLayerUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 512,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Short, concise description of this data layer"
          },
          "textId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textid",
            "description": "ID of the text this layer belongs to"
          },
          "level": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level"
          },
          "layerType": {
            "const": "plaintext",
            "title": "Layertype"
          },
          "ownerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ownerid",
            "description": "User owning this layer"
          },
          "sharedRead": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "title": "Sharedread",
            "description": "Users with shared read access to this layer",
            "default": []
          },
          "sharedWrite": {
            "items": {
              "type": "string",
              "example": "5eb7cf5a86d9755df3a6c593"
            },
            "type": "array",
            "title": "Sharedwrite",
            "description": "Users with shared write access to this layer",
            "default": []
          },
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "Publication status of this layer",
            "default": false
          },
          "proposed": {
            "type": "boolean",
            "title": "Proposed",
            "description": "Whether this layer has been proposed for publication",
            "default": false
          },
          "citation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Citation",
            "description": "Citation details for this layer"
          },
          "meta": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Metadate"
                },
                "type": "array",
                "maxItems": 64,
                "minItems": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta",
            "description": "Arbitrary metadata"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this layer"
          },
          "config": {
            "$ref": "#/components/schemas/PlaintextLayerConfig"
          }
        },
        "type": "object",
        "required": [
          "layerType"
        ],
        "title": "PlaintextLayerUpdate"
      },
      "PlaintextUnitCreate": {
        "properties": {
          "layerId": {
            "type": "string",
            "title": "Layerid",
            "description": "Data layer ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "nodeId": {
            "type": "string",
            "title": "Nodeid",
            "description": "Parent text node ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this unit"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "Text content of the plaintext unit"
          }
        },
        "type": "object",
        "required": [
          "layerId",
          "nodeId"
        ],
        "title": "PlaintextUnitCreate"
      },
      "PlaintextUnitRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "layerId": {
            "type": "string",
            "title": "Layerid",
            "description": "Data layer ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "nodeId": {
            "type": "string",
            "title": "Nodeid",
            "description": "Parent text node ID",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this unit"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "Text content of the plaintext unit"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "layerId",
          "nodeId"
        ],
        "title": "PlaintextUnitRead"
      },
      "PlaintextUnitUpdate": {
        "properties": {
          "layerId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Layerid"
          },
          "nodeId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nodeid"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Plaintext, potentially multiline comment on this unit"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "Text content of the plaintext unit"
          }
        },
        "type": "object",
        "title": "PlaintextUnitUpdate"
      },
      "PlatformData": {
        "properties": {
          "tekst": {
            "type": "object",
            "title": "Tekst",
            "default": {
              "name": "Tekst",
              "version": "0.0.1",
              "description": "An online text research platform",
              "website": "https://github.com/VedaWebProject/Tekst",
              "license": "AGPL-3.0-or-later",
              "licenseUrl": "https://www.gnu.org/licenses/agpl-3.0.txt"
            }
          },
          "texts": {
            "items": {
              "$ref": "#/components/schemas/TextRead"
            },
            "type": "array",
            "title": "Texts"
          },
          "settings": {
            "$ref": "#/components/schemas/PlatformSettingsRead"
          },
          "security": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformSecurityInfo"
              }
            ],
            "default": {
              "closedMode": false,
              "usersActiveByDefault": false,
              "enableCookieAuth": true,
              "enableJwtAuth": true,
              "authCookieLifetime": 10800
            }
          },
          "systemSegments": {
            "items": {
              "$ref": "#/components/schemas/ClientSegmentRead"
            },
            "type": "array",
            "title": "Systemsegments"
          },
          "infoSegments": {
            "items": {
              "$ref": "#/components/schemas/ClientSegmentHead"
            },
            "type": "array",
            "title": "Infosegments"
          }
        },
        "type": "object",
        "required": [
          "texts",
          "settings",
          "systemSegments",
          "infoSegments"
        ],
        "title": "PlatformData",
        "description": "Platform data used by the web client"
      },
      "PlatformSecurityInfo": {
        "properties": {
          "closedMode": {
            "type": "boolean",
            "title": "Closedmode",
            "default": false
          },
          "usersActiveByDefault": {
            "type": "boolean",
            "title": "Usersactivebydefault",
            "default": false
          },
          "enableCookieAuth": {
            "type": "boolean",
            "title": "Enablecookieauth",
            "default": true
          },
          "enableJwtAuth": {
            "type": "boolean",
            "title": "Enablejwtauth",
            "default": true
          },
          "authCookieLifetime": {
            "type": "integer",
            "title": "Authcookielifetime",
            "default": 10800
          }
        },
        "type": "object",
        "title": "PlatformSecurityInfo"
      },
      "PlatformSettingsRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "infoPlatformName": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Infoplatformname",
            "description": "Name of the platform",
            "default": "Tekst-Dev"
          },
          "infoDescription": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 128
              },
              {
                "type": "null"
              }
            ],
            "title": "Infodescription",
            "description": "Short description of the platform",
            "default": "An online text research platform"
          },
          "infoTerms": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Infoterms",
            "description": "URL to page with terms and conditions for API usage"
          },
          "infoContactName": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Infocontactname",
            "description": "Platform contact name"
          },
          "infoContactEmail": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1,
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Infocontactemail",
            "description": "Platform contact email"
          },
          "infoContactUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Infocontacturl",
            "description": "URL to page with contact info"
          },
          "defaultTextId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Defaulttextid",
            "description": "Default text to load in UI"
          },
          "showHeaderInfo": {
            "type": "boolean",
            "title": "Showheaderinfo",
            "description": "Show platform description in header",
            "default": true
          },
          "showFooterInfo": {
            "type": "boolean",
            "title": "Showfooterinfo",
            "description": "Show platform title and description in footer",
            "default": true
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id"
        ],
        "title": "PlatformSettingsRead"
      },
      "PlatformSettingsUpdate": {
        "properties": {
          "infoPlatformName": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Infoplatformname",
            "description": "Name of the platform",
            "default": "Tekst-Dev"
          },
          "infoDescription": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 128
              },
              {
                "type": "null"
              }
            ],
            "title": "Infodescription",
            "description": "Short description of the platform",
            "default": "An online text research platform"
          },
          "infoTerms": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 512,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Infoterms",
            "description": "URL to page with terms and conditions for API usage"
          },
          "infoContactName": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Infocontactname",
            "description": "Platform contact name"
          },
          "infoContactEmail": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64,
                "minLength": 1,
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Infocontactemail",
            "description": "Platform contact email"
          },
          "infoContactUrl": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 512,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Infocontacturl",
            "description": "URL to page with contact info"
          },
          "defaultTextId": {
            "anyOf": [
              {
                "type": "string",
                "example": "5eb7cf5a86d9755df3a6c593"
              },
              {
                "type": "null"
              }
            ],
            "title": "Defaulttextid",
            "description": "Default text to load in UI"
          },
          "showHeaderInfo": {
            "type": "boolean",
            "title": "Showheaderinfo",
            "description": "Show platform description in header",
            "default": true
          },
          "showFooterInfo": {
            "type": "boolean",
            "title": "Showfooterinfo",
            "description": "Show platform title and description in footer",
            "default": true
          }
        },
        "type": "object",
        "title": "PlatformSettingsUpdate"
      },
      "PlatformStats": {
        "properties": {
          "usersCount": {
            "type": "integer",
            "title": "Userscount"
          },
          "texts": {
            "items": {
              "$ref": "#/components/schemas/TextStats"
            },
            "type": "array",
            "title": "Texts"
          }
        },
        "type": "object",
        "required": [
          "usersCount",
          "texts"
        ],
        "title": "PlatformStats",
        "description": "Platform statistics data"
      },
      "StructureLevelTranslation": {
        "properties": {
          "locale": {
            "type": "string",
            "enum": [
              "deDE",
              "enUS"
            ],
            "title": "Locale"
          },
          "label": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Label"
          }
        },
        "type": "object",
        "required": [
          "locale",
          "label"
        ],
        "title": "StructureLevelTranslation"
      },
      "SubtitleTranslation": {
        "properties": {
          "locale": {
            "type": "string",
            "enum": [
              "deDE",
              "enUS"
            ],
            "title": "Locale"
          },
          "subtitle": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Subtitle"
          }
        },
        "type": "object",
        "required": [
          "locale",
          "subtitle"
        ],
        "title": "SubtitleTranslation"
      },
      "TextCreate": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Title",
            "description": "Title of this text"
          },
          "slug": {
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "pattern": "^[a-z0-9]+$",
            "title": "Slug",
            "description": "A short identifier for use in URLs and internal operations"
          },
          "subtitle": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/SubtitleTranslation"
                },
                "type": "array",
                "maxItems": 32,
                "minItems": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtitle",
            "description": "Subtitle translations of this text (if set, it must contain at least one element)"
          },
          "levels": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/StructureLevelTranslation"
              },
              "type": "array",
              "minItems": 1
            },
            "type": "array",
            "maxItems": 32,
            "minItems": 1,
            "title": "Levels"
          },
          "defaultLevel": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Defaultlevel",
            "description": "Default structure level for the client to use for browsing this text",
            "default": 0
          },
          "locDelim": {
            "type": "string",
            "maxLength": 3,
            "minLength": 1,
            "title": "Locdelim",
            "description": "Delimiter for displaying text locations",
            "default": ", "
          },
          "labeledLocation": {
            "type": "boolean",
            "title": "Labeledlocation",
            "description": "Whether the UI should label the parts of the browse location with each levels' names",
            "default": true
          },
          "accentColor": {
            "type": "string",
            "format": "color",
            "title": "Accentcolor",
            "description": "Accent color used for this text in the client UI",
            "default": "#305D97"
          },
          "isActive": {
            "type": "boolean",
            "title": "Isactive",
            "description": "Whether the text should be listed for non-admin users in the web client",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "title",
          "slug",
          "levels"
        ],
        "title": "TextCreate"
      },
      "TextRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Title",
            "description": "Title of this text"
          },
          "slug": {
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "pattern": "^[a-z0-9]+$",
            "title": "Slug",
            "description": "A short identifier for use in URLs and internal operations"
          },
          "subtitle": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/SubtitleTranslation"
                },
                "type": "array",
                "maxItems": 32,
                "minItems": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtitle",
            "description": "Subtitle translations of this text (if set, it must contain at least one element)"
          },
          "levels": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/StructureLevelTranslation"
              },
              "type": "array",
              "minItems": 1
            },
            "type": "array",
            "maxItems": 32,
            "minItems": 1,
            "title": "Levels"
          },
          "defaultLevel": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Defaultlevel",
            "description": "Default structure level for the client to use for browsing this text",
            "default": 0
          },
          "locDelim": {
            "type": "string",
            "maxLength": 3,
            "minLength": 1,
            "title": "Locdelim",
            "description": "Delimiter for displaying text locations",
            "default": ", "
          },
          "labeledLocation": {
            "type": "boolean",
            "title": "Labeledlocation",
            "description": "Whether the UI should label the parts of the browse location with each levels' names",
            "default": true
          },
          "accentColor": {
            "type": "string",
            "format": "color",
            "title": "Accentcolor",
            "description": "Accent color used for this text in the client UI",
            "default": "#305D97"
          },
          "isActive": {
            "type": "boolean",
            "title": "Isactive",
            "description": "Whether the text should be listed for non-admin users in the web client",
            "default": false
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "title",
          "slug",
          "levels"
        ],
        "title": "TextRead"
      },
      "TextStats": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "nodesCount": {
            "type": "integer",
            "title": "Nodescount"
          },
          "layersCount": {
            "type": "integer",
            "title": "Layerscount"
          },
          "layerTypes": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Layertypes"
          }
        },
        "type": "object",
        "required": [
          "id",
          "nodesCount",
          "layersCount",
          "layerTypes"
        ],
        "title": "TextStats",
        "description": "Text statistics data"
      },
      "TextUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "subtitle": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/SubtitleTranslation"
                },
                "type": "array",
                "maxItems": 32,
                "minItems": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtitle",
            "description": "Subtitle translations of this text (if set, it must contain at least one element)"
          },
          "levels": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "$ref": "#/components/schemas/StructureLevelTranslation"
                  },
                  "type": "array",
                  "minItems": 1
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Levels"
          },
          "defaultLevel": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Defaultlevel",
            "description": "Default structure level for the client to use for browsing this text",
            "default": 0
          },
          "locDelim": {
            "type": "string",
            "maxLength": 3,
            "minLength": 1,
            "title": "Locdelim",
            "description": "Delimiter for displaying text locations",
            "default": ", "
          },
          "labeledLocation": {
            "type": "boolean",
            "title": "Labeledlocation",
            "description": "Whether the UI should label the parts of the browse location with each levels' names",
            "default": true
          },
          "accentColor": {
            "type": "string",
            "format": "color",
            "title": "Accentcolor",
            "description": "Accent color used for this text in the client UI",
            "default": "#305D97"
          },
          "isActive": {
            "type": "boolean",
            "title": "Isactive",
            "description": "Whether the text should be listed for non-admin users in the web client",
            "default": false
          }
        },
        "type": "object",
        "title": "TextUpdate"
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "isActive": {
            "type": "boolean",
            "title": "Isactive",
            "default": false
          },
          "isSuperuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issuperuser",
            "default": false
          },
          "isVerified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isverified",
            "default": false
          },
          "username": {
            "type": "string",
            "maxLength": 16,
            "minLength": 4,
            "pattern": "[a-zA-Z0-9\\-_]+",
            "title": "Username"
          },
          "firstName": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Firstname"
          },
          "lastName": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Lastname"
          },
          "affiliation": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Affiliation"
          },
          "locale": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "deDE",
                  "enUS"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Locale"
          },
          "publicFields": {
            "items": {
              "type": "string",
              "enum": [
                "id",
                "firstName",
                "lastName",
                "affiliation"
              ]
            },
            "type": "array",
            "title": "Publicfields",
            "description": "Data fields set public by this user",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "email",
          "password",
          "username",
          "firstName",
          "lastName",
          "affiliation"
        ],
        "title": "UserCreate",
        "description": "Dataset for creating a new user"
      },
      "UserRead": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "isActive": {
            "type": "boolean",
            "title": "Isactive"
          },
          "isSuperuser": {
            "type": "boolean",
            "title": "Issuperuser"
          },
          "isVerified": {
            "type": "boolean",
            "title": "Isverified"
          },
          "username": {
            "type": "string",
            "maxLength": 16,
            "minLength": 4,
            "pattern": "[a-zA-Z0-9\\-_]+",
            "title": "Username"
          },
          "firstName": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Firstname"
          },
          "lastName": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Lastname"
          },
          "affiliation": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Affiliation"
          },
          "locale": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "deDE",
                  "enUS"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Locale"
          },
          "publicFields": {
            "items": {
              "type": "string",
              "enum": [
                "id",
                "firstName",
                "lastName",
                "affiliation"
              ]
            },
            "type": "array",
            "title": "Publicfields",
            "description": "Data fields set public by this user",
            "default": []
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "isActive",
          "isSuperuser",
          "isVerified",
          "username",
          "firstName",
          "lastName",
          "affiliation",
          "createdAt"
        ],
        "title": "UserRead",
        "description": "A user registered in the system"
      },
      "UserReadPublic": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "example": "5eb7cf5a86d9755df3a6c593"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "firstName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Firstname"
          },
          "lastName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lastname"
          },
          "affiliation": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Affiliation"
          }
        },
        "type": "object",
        "required": [
          "id",
          "username"
        ],
        "title": "UserReadPublic"
      },
      "UserUpdate": {
        "properties": {
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "isActive": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isactive"
          },
          "isSuperuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issuperuser"
          },
          "isVerified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isverified"
          },
          "username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Username"
          },
          "firstName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Firstname"
          },
          "lastName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lastname"
          },
          "affiliation": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Affiliation"
          },
          "locale": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "deDE",
                  "enUS"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Locale"
          },
          "publicFields": {
            "items": {
              "type": "string",
              "enum": [
                "id",
                "firstName",
                "lastName",
                "affiliation"
              ]
            },
            "type": "array",
            "title": "Publicfields",
            "description": "Data fields set public by this user",
            "default": []
          }
        },
        "type": "object",
        "title": "UserUpdate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "APIKeyCookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "tekstuserauth"
      },
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "auth/jwt/login"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "texts",
      "description": "Text-related operations",
      "externalDocs": {
        "description": "View full documentation",
        "url": "https://vedawebproject.github.io/Tekst"
      }
    }
  ]
}