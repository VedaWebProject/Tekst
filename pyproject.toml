[tool.poetry]
name = "textrig"
version = "0.0.1"
description = "An open and collaborative text research platform"
readme = "README.md"
repository = "https://github.com/VedaWebProject/TextRig"
documentation = "https://github.com/VedaWebProject/TextRig"
keywords = ["text", "research", "platform", "collaboration"]
authors = ["BÃ¶rge Kiss <bkis@bkis.github.io>"]
license = "AGPL-3.0-or-later"
classifiers = [
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Development Status :: 1 - Planning",
]

[tool.poetry.urls]
"VedaWeb Project Website" = "https://vedaweb.uni-koeln.de"
"License" = "https://www.gnu.org/licenses/agpl-3.0.txt"

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.78"
ujson = "^5.4"
python-dotenv = "^0.20"
motor = "^3.0.0"

[tool.poetry.dev-dependencies]
pytest = "^7.1"
isort = "^5.10"
black = "^22.3"
coverage = {extras = ["toml"], version = "^6.4"}
requests = "^2.28"
uvicorn = "^0.18"
flake8 = "^5.0.2"

[tool.isort]
profile = "black"
src_paths = ["src", "tests"]
line_length = 88
lines_after_imports = 2

[tool.black]
line-length = 88
target-version = ["py310"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
source = ["textrig"]
branch = true
omit = [
    "*/**/__main__.py",
    "*/**/__init__.py"
]

[tool.coverage.report]
precision = 2
skip_empty = true

[tool.coverage.html]
title = "TextRig - Test Coverage Report"


[tool.poe.tasks]

    [tool.poe.tasks.format]
    help = "Run isort and black to format code base"
    interpreter = ["bash", "zsh"]
    shell = """
        isort .
        black .
    """

    [tool.poe.tasks.format-check]
    help = "Check code formatting using isort and black"
    interpreter = ["bash", "zsh"]
    shell = """
        isort . --check --diff
        black . --check --diff
    """

    [tool.poe.tasks.lint]
    help = "Run flake8 linter"
    cmd = "flake8 ."

    [tool.poe.tasks.test]
    help = "Run test suite with pytest"
    interpreter = ["bash", "zsh"]
    shell = """
        coverage run -m pytest && coverage report
    """

    [tool.poe.tasks.run]
    help = "Run the application (only for development!)"
    interpreter = ["bash", "zsh"]
    shell = """
        DEV_MODE=true poetry run uvicorn --reload --reload-dir textrig textrig.main:app
    """

    [tool.poe.tasks.check]
    help = "Run all checks on code base: tests, linting, code style, import order"
    sequence = ["test", "lint", "format-check"]
    ignore_fail = "return_non_zero"

    [tool.poe.tasks.clean]
    help = "Cleanup of generated files (won't work on Windows)"
    interpreter = ["bash", "zsh"]
    shell = """
        shopt -s globstar
        rm -rf \
            **/__pycache__ \
            .pytest_cache \
            .coverage \
            .venv/ \
            .env/ \
            dist \
            htmlcov \
    """

    [tool.poe.tasks.stack-up]
    help = "Create and start development service stack with docker compose"
    cmd = "docker compose -f docker/stack.dev.yml up --detach"

    [tool.poe.tasks.stack-down]
    help = "Stop and delete development service stack with docker compose"
    cmd = "docker compose -f docker/stack.dev.yml down --volumes"

    [tool.poe.tasks.stack-start]
    help = "Start existing development service stack with docker compose"
    cmd = "docker compose -f docker/stack.dev.yml start --detach"

    [tool.poe.tasks.stack-stop]
    help = "Stop running development service stack with docker compose"
    cmd = "docker compose -f docker/stack.dev.yml stop"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
