[tool.poetry]
name = "textrig"
version = "0.0.1"
description = "An open and collaborative text research platform"
readme = "README.md"
repository = "https://github.com/VedaWebProject/textrig-server"
documentation = "https://github.com/VedaWebProject/textrig"
keywords = ["text", "research", "platform", "collaboration"]
authors = ["BÃ¶rge Kiss <bkis@bkis.github.io>"]
license = "AGPL-3.0-or-later"
classifiers = [
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Development Status :: 1 - Planning",
]

[tool.poetry.urls]
"VedaWeb Project Website" = "https://vedaweb.uni-koeln.de"
"License" = "https://www.gnu.org/licenses/agpl-3.0.txt"

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.87"
ujson = "^5.4"
python-dotenv = "^0.20"
email-validator = "^1.2.1"
motor = "^3.0.0"
python-multipart = "^0.0.5"
pyhumps = "^3.8.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2"
isort = "^5.10"
black = "^22.3"
coverage = {extras = ["toml"], version = "^6.4"}
requests = "^2.28"
uvicorn = "^0.18"
flake8 = "^5.0.2"
pytest-datadir = "^1.3.1"
colorlog = "^6.7.0"
pytest-dotenv = "^0.5.2"
httpx = "^0.23.0"

[tool.isort]
profile = "black"
src_paths = ["src", "tests"]
line_length = 88
lines_after_imports = 2

[tool.black]
line-length = 88
target-version = ["py310"]

[tool.pytest.ini_options]
testpaths = ["tests"]
env_override_existing_values = 1
env_files = [".env.dev", ".env.test"]

[tool.coverage.run]
source = ["textrig"]
branch = true
omit = [
    "*/**/__main__.py",
    "*/**/__init__.py"
]

[tool.coverage.report]
precision = 2
skip_empty = true

[tool.coverage.html]
title = "TextRig - Test Coverage Report"


[tool.poe.tasks]

    [tool.poe.tasks.format]
    help = "Run isort and black to format code base"
    interpreter = ["bash", "zsh"]
    shell = """
        poetry run isort .
        poetry run black .
    """

    [tool.poe.tasks.format-check]
    help = "Check code formatting using isort and black"
    interpreter = ["bash", "zsh"]
    shell = """
        poetry run isort . --check --diff
        poetry run black . --check --diff
    """

    [tool.poe.tasks.lint]
    help = "Run flake8 linter"
    cmd = "flake8 ."

    [tool.poe.tasks.run-tests]
    help = "Run test suite with pytest"
    interpreter = ["bash", "zsh"]
    shell = """
        TR_DEV_MODE=true ; TESTING=true
        poetry run coverage run -m pytest && poetry run coverage report -m
    """

    [tool.poe.tasks.test]
    help = "Run tests, start and stop test services stack automatically"
    sequence = ["test-stack-up", "run-tests", "test-stack-down"]
    ignore_fail = "return_non_zero"

    [tool.poe.tasks.run-app]
    help = "Run the application dev server (only for development!)"
    interpreter = ["bash", "zsh"]
    shell = """
    TR_DEV_MODE=true poetry run python3 -m textrig
    """

    [tool.poe.tasks.run]
    help = "Run dev services stack and dev server, clean up afterwards"
    sequence = ["dev-stack-up", "run-app", "dev-stack-down"]

    [tool.poe.tasks.check]
    help = "Run all checks on code base: tests, linting, code style, import order"
    sequence = ["test", "lint", "format-check"]
    ignore_fail = "return_non_zero"

    [tool.poe.tasks.clean]
    help = "Cleanup of generated files (won't work on Windows)"
    interpreter = ["bash", "zsh"]
    shell = """
        shopt -s globstar
        rm -rf \
            **/__pycache__ \
            .pytest_cache \
            .coverage \
            .venv/ \
            .env/ \
            dist \
            htmlcov \
    """

    [tool.poe.tasks.dev-stack-up]
    help = "Run dev services stack"
    interpreter = ["bash", "zsh"]
    shell = """
        docker compose -f docker-compose.yml --profile dev -p textrig-dev up --detach
    """

    [tool.poe.tasks.dev-stack-down]
    help = "Stop dev stack and clean up all resources"
    interpreter = ["bash", "zsh"]
    shell = """
        docker compose -f docker-compose.yml --profile dev -p textrig-dev down --volumes
    """

    [tool.poe.tasks.test-stack-up]
    help = "Run test services stack"
    interpreter = ["bash", "zsh"]
    shell = """
        docker compose -f docker-compose.yml --profile test -p textrig-testing up --detach
    """

    [tool.poe.tasks.test-stack-down]
    help = "Stop test stack and clean up all resources"
    interpreter = ["bash", "zsh"]
    shell = """
        docker compose -f docker-compose.yml --profile test -p textrig-testing down --volumes
    """

    [tool.poe.tasks.build-image]
    help = "Build and tag production Docker image for app"
    interpreter = ["bash", "zsh"]
    shell = """
        TEXTRIG_VERSION=$(poetry run python3 -c "from textrig import __version__ as v; print(v, end='')")
        docker build \\
            --tag textrig-server:latest \\
            --tag textrig-server:$TEXTRIG_VERSION \\
            --target prod .
    """


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
