/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/admin/stats': {
    /** Get stats */
    get: operations['getStats'];
  };
  '/admin/users': {
    /** Get users */
    get: operations['getUsers'];
  };
  '/admin/testemail': {
    /** Test email */
    get: operations['testEmail'];
  };
  '/browse/unit-siblings': {
    /**
     * Get unit siblings
     * @description Returns a list of all data layer units belonging to the data layer
     * with the given ID, associated to nodes that are children of the parent node
     * with the given ID.
     *
     * As the resulting list may contain units of arbitrary type, the
     * returned unit objects cannot be typed to their precise layer unit type.
     * Also, the returned unit objects have an additional property containing their
     * respective node's label, level and position.
     */
    get: operations['getUnitSiblings'];
  };
  '/browse/nodes/path': {
    /**
     * Get node path
     * @description Returns the text node path from the node with the given level/position
     * as the last element, up to its most distant ancestor node
     * on structure level 0 as the first element of an array.
     */
    get: operations['getNodePath'];
  };
  '/browse/nodes/{id}/path/options-by-head': {
    /**
     * Get path options by head id
     * @description Returns the options for selecting text locations derived from the node path of
     * the node with the given ID as head.
     */
    get: operations['getPathOptionsByHeadId'];
  };
  '/browse/nodes/{id}/path/options-by-root': {
    /**
     * Get path options by root id
     * @description Returns the options for selecting text locations derived from the node path of
     * the node with the given ID as root. At each level, the first option is taken
     * as the basis for the next level.
     */
    get: operations['getPathOptionsByRootId'];
  };
  '/browse/layers/{id}/coverage': {
    /** Get layer coverage data */
    get: operations['getLayerCoverageData'];
  };
  '/layers': {
    /**
     * Find layers
     * @description Returns a list of all data layers matching the given criteria.
     *
     * As the resulting list of data layers may contain layers of different types, the
     * returned layer objects cannot be typed to their precise layer type.
     */
    get: operations['findLayers'];
    /** Create layer */
    post: operations['createLayer'];
  };
  '/layers/{id}': {
    /** Get layer */
    get: operations['getLayer'];
    /** Delete layer */
    delete: operations['deleteLayer'];
    /** Update layer */
    patch: operations['updateLayer'];
  };
  '/layers/{id}/propose': {
    /** Propose layer */
    post: operations['proposeLayer'];
  };
  '/layers/{id}/unpropose': {
    /** Unpropose layer */
    post: operations['unproposeLayer'];
  };
  '/layers/{id}/publish': {
    /** Publish layer */
    post: operations['publishLayer'];
  };
  '/layers/{id}/unpublish': {
    /** Unpublish layer */
    post: operations['unpublishLayer'];
  };
  '/nodes': {
    /** Find nodes */
    get: operations['findNodes'];
    /**
     * Create node
     * @description Creates a new node. The position will be automatically set to the last position
     * of the node's parent (or the first parent before that has children).
     */
    post: operations['createNode'];
  };
  '/nodes/children': {
    /** Get children */
    get: operations['getChildren'];
  };
  '/nodes/{id}': {
    /** Get node */
    get: operations['getNode'];
    /**
     * Delete node
     * @description Deletes the specified node. Also deletes any associated units, child nodes and units associated with child nodes.
     */
    delete: operations['deleteNode'];
    /** Update node */
    patch: operations['updateNode'];
  };
  '/nodes/{id}/move': {
    /**
     * Move node
     * @description Moves the specified node to a new position on its structure level.
     */
    post: operations['moveNode'];
  };
  '/platform': {
    /**
     * Get platform data
     * @description Returns data the client needs to initialize
     */
    get: operations['getPlatformData'];
  };
  '/platform/users/{usernameOrId}': {
    /**
     * Get public user info
     * @description Returns public information on the user with the specified username or ID
     */
    get: operations['getPublicUserInfo'];
  };
  '/platform/users': {
    /** Get public users */
    get: operations['getPublicUsers'];
  };
  '/platform/settings': {
    /** Update platform settings */
    patch: operations['updatePlatformSettings'];
  };
  '/platform/segments/{id}': {
    /** Get segment */
    get: operations['getSegment'];
    /** Delete segment */
    delete: operations['deleteSegment'];
    /** Update segment */
    patch: operations['updateSegment'];
  };
  '/platform/segments': {
    /** Create segment */
    post: operations['createSegment'];
  };
  '/texts': {
    /** Get all texts */
    get: operations['getAllTexts'];
    /** Create text */
    post: operations['createText'];
  };
  '/texts/{id}/template': {
    /**
     * Download structure template
     * @description Download the structure template for a text to help compose a structure
     * definition that can later be uploaded to the server
     */
    get: operations['downloadStructureTemplate'];
  };
  '/texts/{id}/structure': {
    /**
     * Upload structure definition
     * @description Upload the structure definition for a text to apply as a structure of nodes
     */
    post: operations['uploadStructureDefinition'];
  };
  '/texts/{id}/level/{index}': {
    /** Insert level */
    post: operations['insertLevel'];
    /** Delete level */
    delete: operations['deleteLevel'];
  };
  '/texts/{id}': {
    /** Get text */
    get: operations['getText'];
    /** Delete text */
    delete: operations['deleteText'];
    /** Update text */
    patch: operations['updateText'];
  };
  '/units/debug/{id}': {
    /**
     * Get unit
     * @description Returns the data for a Debug data layer unit
     */
    get: operations['getDebugUnit'];
    /**
     * Update unit
     * @description Updates the data for a Debug data layer unit
     */
    patch: operations['updateDebugUnit'];
  };
  '/units/debug': {
    /**
     * Create unit
     * @description Creates a Debug data layer unit
     */
    post: operations['createDebugUnit'];
  };
  '/units/plaintext/{id}': {
    /**
     * Get unit
     * @description Returns the data for a Plaintext data layer unit
     */
    get: operations['getPlaintextUnit'];
    /**
     * Update unit
     * @description Updates the data for a Plaintext data layer unit
     */
    patch: operations['updatePlaintextUnit'];
  };
  '/units/plaintext': {
    /**
     * Create unit
     * @description Creates a Plaintext data layer unit
     */
    post: operations['createPlaintextUnit'];
  };
  '/units/': {
    /**
     * Find units
     * @description Returns a list of all data layer units matching the given criteria.
     *
     * Respects restricted layers and inactive texts.
     * As the resulting list may contain units of different types, the
     * returned unit objects cannot be typed to their precise layer unit type.
     */
    get: operations['findUnits'];
  };
  '/auth/cookie/login': {
    /** Login */
    post: operations['auth:cookie.login'];
  };
  '/auth/cookie/logout': {
    /** Logout */
    post: operations['auth:cookie.logout'];
  };
  '/auth/jwt/login': {
    /** Login */
    post: operations['auth:jwt.login'];
  };
  '/auth/jwt/logout': {
    /** Logout */
    post: operations['auth:jwt.logout'];
  };
  '/auth/register': {
    /** Register */
    post: operations['register:register'];
  };
  '/auth/request-verify-token': {
    /** Request verify token */
    post: operations['verify:requestToken'];
  };
  '/auth/verify': {
    /** Verify */
    post: operations['verify:verify'];
  };
  '/auth/forgot-password': {
    /** Forgot password */
    post: operations['reset:forgotPassword'];
  };
  '/auth/reset-password': {
    /** Reset password */
    post: operations['reset:resetPassword'];
  };
  '/users/me': {
    /** Me */
    get: operations['users:currentUser'];
    /** Update me */
    patch: operations['users:patchCurrentUser'];
  };
  '/users/{id}': {
    /** Get user */
    get: operations['users:user'];
    /** Delete user */
    delete: operations['users:deleteUser'];
    /** Update user */
    patch: operations['users:patchUser'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** BearerResponse */
    BearerResponse: {
      /** Access Token */
      access_token: string;
      /** Token Type */
      token_type: string;
    };
    /** Body_auth_cookie_login_auth_cookie_login_post */
    Body_auth_cookie_login_auth_cookie_login_post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** Body_auth_jwt_login_auth_jwt_login_post */
    Body_auth_jwt_login_auth_jwt_login_post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** Body_reset_forgot_password_auth_forgot_password_post */
    Body_reset_forgot_password_auth_forgot_password_post: {
      /**
       * Email
       * Format: email
       */
      email: string;
    };
    /** Body_reset_reset_password_auth_reset_password_post */
    Body_reset_reset_password_auth_reset_password_post: {
      /** Token */
      token: string;
      /** Password */
      password: string;
    };
    /** Body_upload_structure_definition_texts__id__structure_post */
    Body_upload_structure_definition_texts__id__structure_post: {
      /**
       * File
       * Format: binary
       * @description JSON file containing the text's structure
       */
      file: string;
    };
    /** Body_verify_request_token_auth_request_verify_token_post */
    Body_verify_request_token_auth_request_verify_token_post: {
      /**
       * Email
       * Format: email
       */
      email: string;
    };
    /** Body_verify_verify_auth_verify_post */
    Body_verify_verify_auth_verify_post: {
      /** Token */
      token: string;
    };
    /** ClientSegmentCreate */
    ClientSegmentCreate: {
      /**
       * Key
       * @description Key of this segment. System segment keys must start with `system`.
       */
      key: string;
      /**
       * Issystemsegment
       * @description Whether this is a system segment (will be set automatically)
       * @default false
       */
      isSystemSegment?: boolean;
      /**
       * Editormode
       * @description Last used editor mode
       * @default wysiwyg
       * @enum {string}
       */
      editorMode?: 'wysiwyg' | 'html';
      /**
       * Locale
       * @description Locale indicating the translation language of this segment
       */
      locale?: ('deDE' | 'enUS') | null;
      /**
       * Title
       * @description Title of this segment
       */
      title?: string | null;
      /**
       * Html
       * @description HTML content of this segment
       */
      html: string;
    };
    /** ClientSegmentHead */
    ClientSegmentHead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /** Key */
      key: string;
      /** Title */
      title?: string | null;
      /** Locale */
      locale?: ('deDE' | 'enUS') | null;
    };
    /** ClientSegmentRead */
    ClientSegmentRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Key
       * @description Key of this segment. System segment keys must start with `system`.
       */
      key: string;
      /**
       * Issystemsegment
       * @description Whether this is a system segment (will be set automatically)
       * @default false
       */
      isSystemSegment?: boolean;
      /**
       * Editormode
       * @description Last used editor mode
       * @default wysiwyg
       * @enum {string}
       */
      editorMode?: 'wysiwyg' | 'html';
      /**
       * Locale
       * @description Locale indicating the translation language of this segment
       */
      locale?: ('deDE' | 'enUS') | null;
      /**
       * Title
       * @description Title of this segment
       */
      title?: string | null;
      /**
       * Html
       * @description HTML content of this segment
       */
      html: string;
      [key: string]: unknown;
    };
    /** ClientSegmentUpdate */
    ClientSegmentUpdate: {
      /** Key */
      key?: string | null;
      /**
       * Issystemsegment
       * @description Whether this is a system segment (will be set automatically)
       * @default false
       */
      isSystemSegment?: boolean;
      /**
       * Editormode
       * @description Last used editor mode
       * @default wysiwyg
       * @enum {string}
       */
      editorMode?: 'wysiwyg' | 'html';
      /**
       * Locale
       * @description Locale indicating the translation language of this segment
       */
      locale?: ('deDE' | 'enUS') | null;
      /**
       * Title
       * @description Title of this segment
       */
      title?: string | null;
      /** Html */
      html?: string | null;
    };
    /** DebugLayerConfig */
    DebugLayerConfig: {
      deeplLinks?: components['schemas']['DeepLLinksConfig'];
    };
    /** DebugLayerCreate */
    DebugLayerCreate: {
      /**
       * Title
       * @description Title of this layer
       */
      title: string;
      /**
       * Description
       * @description Short, concise description of this data layer
       */
      description?: string | null;
      /**
       * Textid
       * @description ID of the text this layer belongs to
       */
      textId?: string | null;
      /**
       * Level
       * @description Text level this layer belongs to
       */
      level: number;
      /**
       * Layertype
       * @constant
       */
      layerType: 'debug';
      /**
       * Ownerid
       * @description User owning this layer
       */
      ownerId?: string | null;
      /**
       * Sharedread
       * @description Users with shared read access to this layer
       * @default []
       */
      sharedRead?: string[];
      /**
       * Sharedwrite
       * @description Users with shared write access to this layer
       * @default []
       */
      sharedWrite?: string[];
      /**
       * Public
       * @description Publication status of this layer
       * @default false
       */
      public?: boolean;
      /**
       * Proposed
       * @description Whether this layer has been proposed for publication
       * @default false
       */
      proposed?: boolean;
      /**
       * Citation
       * @description Citation details for this layer
       */
      citation?: string | null;
      /**
       * Meta
       * @description Arbitrary metadata
       */
      meta?: components['schemas']['Metadate'][] | null;
      /**
       * Comment
       * @description Plaintext, potentially multiline comment on this layer
       */
      comment?: string | null;
      config?: components['schemas']['DebugLayerConfig'];
    };
    /** DebugLayerRead */
    DebugLayerRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Writable
       * @description Whether this layer is writable for the requesting user
       */
      writable?: boolean | null;
      /** @description Public user data for user owning this layer */
      owner?: components['schemas']['UserReadPublic'] | null;
      /**
       * Sharedreadusers
       * @description Public user data for users allowed to read this layer
       */
      sharedReadUsers?: components['schemas']['UserReadPublic'][] | null;
      /**
       * Sharedwriteusers
       * @description Public user data for users allowed to write this layer
       */
      sharedWriteUsers?: components['schemas']['UserReadPublic'][] | null;
      /**
       * Title
       * @description Title of this layer
       */
      title: string;
      /**
       * Description
       * @description Short, concise description of this data layer
       */
      description?: string | null;
      /**
       * Textid
       * @description ID of the text this layer belongs to
       */
      textId?: string | null;
      /**
       * Level
       * @description Text level this layer belongs to
       */
      level: number;
      /**
       * Layertype
       * @constant
       */
      layerType: 'debug';
      /**
       * Ownerid
       * @description User owning this layer
       */
      ownerId?: string | null;
      /**
       * Sharedread
       * @description Users with shared read access to this layer
       * @default []
       */
      sharedRead?: string[];
      /**
       * Sharedwrite
       * @description Users with shared write access to this layer
       * @default []
       */
      sharedWrite?: string[];
      /**
       * Public
       * @description Publication status of this layer
       * @default false
       */
      public?: boolean;
      /**
       * Proposed
       * @description Whether this layer has been proposed for publication
       * @default false
       */
      proposed?: boolean;
      /**
       * Citation
       * @description Citation details for this layer
       */
      citation?: string | null;
      /**
       * Meta
       * @description Arbitrary metadata
       */
      meta?: components['schemas']['Metadate'][] | null;
      /**
       * Comment
       * @description Plaintext, potentially multiline comment on this layer
       */
      comment?: string | null;
      config?: components['schemas']['DebugLayerConfig'];
      [key: string]: unknown;
    };
    /** DebugLayerUpdate */
    DebugLayerUpdate: {
      /** Title */
      title?: string | null;
      /**
       * Description
       * @description Short, concise description of this data layer
       */
      description?: string | null;
      /**
       * Textid
       * @description ID of the text this layer belongs to
       */
      textId?: string | null;
      /** Level */
      level?: number | null;
      /**
       * Layertype
       * @constant
       */
      layerType: 'debug';
      /**
       * Ownerid
       * @description User owning this layer
       */
      ownerId?: string | null;
      /**
       * Sharedread
       * @description Users with shared read access to this layer
       * @default []
       */
      sharedRead?: string[];
      /**
       * Sharedwrite
       * @description Users with shared write access to this layer
       * @default []
       */
      sharedWrite?: string[];
      /**
       * Public
       * @description Publication status of this layer
       * @default false
       */
      public?: boolean;
      /**
       * Proposed
       * @description Whether this layer has been proposed for publication
       * @default false
       */
      proposed?: boolean;
      /**
       * Citation
       * @description Citation details for this layer
       */
      citation?: string | null;
      /**
       * Meta
       * @description Arbitrary metadata
       */
      meta?: components['schemas']['Metadate'][] | null;
      /**
       * Comment
       * @description Plaintext, potentially multiline comment on this layer
       */
      comment?: string | null;
      config?: components['schemas']['DebugLayerConfig'];
    };
    /** DebugUnitCreate */
    DebugUnitCreate: {
      /**
       * Layerid
       * @description Data layer ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      layerId: string;
      /**
       * Nodeid
       * @description Parent text node ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      nodeId: string;
      /**
       * Comment
       * @description Plaintext, potentially multiline comment on this unit
       */
      comment?: string | null;
      /**
       * Text
       * @description Text content of the debug unit
       */
      text?: string | null;
    };
    /** DebugUnitRead */
    DebugUnitRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Layerid
       * @description Data layer ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      layerId: string;
      /**
       * Nodeid
       * @description Parent text node ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      nodeId: string;
      /**
       * Comment
       * @description Plaintext, potentially multiline comment on this unit
       */
      comment?: string | null;
      /**
       * Text
       * @description Text content of the debug unit
       */
      text?: string | null;
      [key: string]: unknown;
    };
    /** DebugUnitUpdate */
    DebugUnitUpdate: {
      /** Layerid */
      layerId?: string | null;
      /** Nodeid */
      nodeId?: string | null;
      /**
       * Comment
       * @description Plaintext, potentially multiline comment on this unit
       */
      comment?: string | null;
      /**
       * Text
       * @description Text content of the debug unit
       */
      text?: string | null;
    };
    /** DeepLLinksConfig */
    DeepLLinksConfig: {
      /**
       * Enabled
       * @description Enable/disable quick translation links to DeepL
       * @default false
       */
      enabled?: boolean;
      /**
       * Sourcelanguage
       * @description Source language
       * @default BG
       */
      sourceLanguage?:
        | (
            | 'BG'
            | 'CS'
            | 'DA'
            | 'DE'
            | 'EL'
            | 'EN'
            | 'ES'
            | 'ET'
            | 'FI'
            | 'FR'
            | 'HU'
            | 'ID'
            | 'IT'
            | 'JA'
            | 'LT'
            | 'LV'
            | 'NL'
            | 'PL'
            | 'PT'
            | 'RO'
            | 'RU'
            | 'SK'
            | 'SL'
            | 'SV'
            | 'TR'
            | 'UK'
            | 'ZH'
          )
        | null;
      /**
       * Languages
       * @description Target languages to display links for
       * @default [
       *   "EN",
       *   "DE"
       * ]
       */
      languages?: (
        | 'BG'
        | 'CS'
        | 'DA'
        | 'DE'
        | 'EL'
        | 'EN'
        | 'ES'
        | 'ET'
        | 'FI'
        | 'FR'
        | 'HU'
        | 'ID'
        | 'IT'
        | 'JA'
        | 'LT'
        | 'LV'
        | 'NL'
        | 'PL'
        | 'PT'
        | 'RO'
        | 'RU'
        | 'SK'
        | 'SL'
        | 'SV'
        | 'TR'
        | 'UK'
        | 'ZH'
      )[];
    };
    /** DeleteNodeResult */
    DeleteNodeResult: {
      /** Units */
      units: number;
      /** Nodes */
      nodes: number;
    };
    /** ErrorModel */
    ErrorModel: {
      /** Detail */
      detail:
        | string
        | {
            [key: string]: string;
          };
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** LayerNodeCoverage */
    LayerNodeCoverage: {
      /** Label */
      label: string;
      /** Position */
      position: number;
      /** Covered */
      covered: boolean;
    };
    /** Metadate */
    Metadate: {
      /** Key */
      key: string;
      /** Value */
      value: string;
    };
    /** MoveNodeRequestBody */
    MoveNodeRequestBody: {
      /** Position */
      position: number;
      /** After */
      after: boolean;
      /** Parentid */
      parentId: string | null;
    };
    /** NodeCreate */
    NodeCreate: {
      /**
       * Textid
       * @description ID of the text this node belongs to
       * @example 5eb7cf5a86d9755df3a6c593
       */
      textId: string;
      /**
       * Parentid
       * @description ID of parent node
       */
      parentId?: string | null;
      /**
       * Level
       * @description Index of structure level this node is on
       */
      level: number;
      /**
       * Position
       * @description Position among all text nodes on this level
       */
      position: number;
      /**
       * Label
       * @description Label for identifying this text node in level context
       */
      label: string;
    };
    /** NodeRead */
    NodeRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Textid
       * @description ID of the text this node belongs to
       * @example 5eb7cf5a86d9755df3a6c593
       */
      textId: string;
      /**
       * Parentid
       * @description ID of parent node
       */
      parentId?: string | null;
      /**
       * Level
       * @description Index of structure level this node is on
       */
      level: number;
      /**
       * Position
       * @description Position among all text nodes on this level
       */
      position: number;
      /**
       * Label
       * @description Label for identifying this text node in level context
       */
      label: string;
      [key: string]: unknown;
    };
    /** NodeUpdate */
    NodeUpdate: {
      /** Textid */
      textId?: string | null;
      /**
       * Parentid
       * @description ID of parent node
       */
      parentId?: string | null;
      /** Level */
      level?: number | null;
      /** Position */
      position?: number | null;
      /** Label */
      label?: string | null;
    };
    /** PlaintextLayerConfig */
    PlaintextLayerConfig: {
      deeplLinks?: components['schemas']['DeepLLinksConfig'];
    };
    /** PlaintextLayerCreate */
    PlaintextLayerCreate: {
      /**
       * Title
       * @description Title of this layer
       */
      title: string;
      /**
       * Description
       * @description Short, concise description of this data layer
       */
      description?: string | null;
      /**
       * Textid
       * @description ID of the text this layer belongs to
       */
      textId?: string | null;
      /**
       * Level
       * @description Text level this layer belongs to
       */
      level: number;
      /**
       * Layertype
       * @constant
       */
      layerType: 'plaintext';
      /**
       * Ownerid
       * @description User owning this layer
       */
      ownerId?: string | null;
      /**
       * Sharedread
       * @description Users with shared read access to this layer
       * @default []
       */
      sharedRead?: string[];
      /**
       * Sharedwrite
       * @description Users with shared write access to this layer
       * @default []
       */
      sharedWrite?: string[];
      /**
       * Public
       * @description Publication status of this layer
       * @default false
       */
      public?: boolean;
      /**
       * Proposed
       * @description Whether this layer has been proposed for publication
       * @default false
       */
      proposed?: boolean;
      /**
       * Citation
       * @description Citation details for this layer
       */
      citation?: string | null;
      /**
       * Meta
       * @description Arbitrary metadata
       */
      meta?: components['schemas']['Metadate'][] | null;
      /**
       * Comment
       * @description Plaintext, potentially multiline comment on this layer
       */
      comment?: string | null;
      config?: components['schemas']['PlaintextLayerConfig'];
    };
    /** PlaintextLayerRead */
    PlaintextLayerRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Writable
       * @description Whether this layer is writable for the requesting user
       */
      writable?: boolean | null;
      /** @description Public user data for user owning this layer */
      owner?: components['schemas']['UserReadPublic'] | null;
      /**
       * Sharedreadusers
       * @description Public user data for users allowed to read this layer
       */
      sharedReadUsers?: components['schemas']['UserReadPublic'][] | null;
      /**
       * Sharedwriteusers
       * @description Public user data for users allowed to write this layer
       */
      sharedWriteUsers?: components['schemas']['UserReadPublic'][] | null;
      /**
       * Title
       * @description Title of this layer
       */
      title: string;
      /**
       * Description
       * @description Short, concise description of this data layer
       */
      description?: string | null;
      /**
       * Textid
       * @description ID of the text this layer belongs to
       */
      textId?: string | null;
      /**
       * Level
       * @description Text level this layer belongs to
       */
      level: number;
      /**
       * Layertype
       * @constant
       */
      layerType: 'plaintext';
      /**
       * Ownerid
       * @description User owning this layer
       */
      ownerId?: string | null;
      /**
       * Sharedread
       * @description Users with shared read access to this layer
       * @default []
       */
      sharedRead?: string[];
      /**
       * Sharedwrite
       * @description Users with shared write access to this layer
       * @default []
       */
      sharedWrite?: string[];
      /**
       * Public
       * @description Publication status of this layer
       * @default false
       */
      public?: boolean;
      /**
       * Proposed
       * @description Whether this layer has been proposed for publication
       * @default false
       */
      proposed?: boolean;
      /**
       * Citation
       * @description Citation details for this layer
       */
      citation?: string | null;
      /**
       * Meta
       * @description Arbitrary metadata
       */
      meta?: components['schemas']['Metadate'][] | null;
      /**
       * Comment
       * @description Plaintext, potentially multiline comment on this layer
       */
      comment?: string | null;
      config?: components['schemas']['PlaintextLayerConfig'];
      [key: string]: unknown;
    };
    /** PlaintextLayerUpdate */
    PlaintextLayerUpdate: {
      /** Title */
      title?: string | null;
      /**
       * Description
       * @description Short, concise description of this data layer
       */
      description?: string | null;
      /**
       * Textid
       * @description ID of the text this layer belongs to
       */
      textId?: string | null;
      /** Level */
      level?: number | null;
      /**
       * Layertype
       * @constant
       */
      layerType: 'plaintext';
      /**
       * Ownerid
       * @description User owning this layer
       */
      ownerId?: string | null;
      /**
       * Sharedread
       * @description Users with shared read access to this layer
       * @default []
       */
      sharedRead?: string[];
      /**
       * Sharedwrite
       * @description Users with shared write access to this layer
       * @default []
       */
      sharedWrite?: string[];
      /**
       * Public
       * @description Publication status of this layer
       * @default false
       */
      public?: boolean;
      /**
       * Proposed
       * @description Whether this layer has been proposed for publication
       * @default false
       */
      proposed?: boolean;
      /**
       * Citation
       * @description Citation details for this layer
       */
      citation?: string | null;
      /**
       * Meta
       * @description Arbitrary metadata
       */
      meta?: components['schemas']['Metadate'][] | null;
      /**
       * Comment
       * @description Plaintext, potentially multiline comment on this layer
       */
      comment?: string | null;
      config?: components['schemas']['PlaintextLayerConfig'];
    };
    /** PlaintextUnitCreate */
    PlaintextUnitCreate: {
      /**
       * Layerid
       * @description Data layer ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      layerId: string;
      /**
       * Nodeid
       * @description Parent text node ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      nodeId: string;
      /**
       * Comment
       * @description Plaintext, potentially multiline comment on this unit
       */
      comment?: string | null;
      /**
       * Text
       * @description Text content of the plaintext unit
       */
      text?: string | null;
    };
    /** PlaintextUnitRead */
    PlaintextUnitRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Layerid
       * @description Data layer ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      layerId: string;
      /**
       * Nodeid
       * @description Parent text node ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      nodeId: string;
      /**
       * Comment
       * @description Plaintext, potentially multiline comment on this unit
       */
      comment?: string | null;
      /**
       * Text
       * @description Text content of the plaintext unit
       */
      text?: string | null;
      [key: string]: unknown;
    };
    /** PlaintextUnitUpdate */
    PlaintextUnitUpdate: {
      /** Layerid */
      layerId?: string | null;
      /** Nodeid */
      nodeId?: string | null;
      /**
       * Comment
       * @description Plaintext, potentially multiline comment on this unit
       */
      comment?: string | null;
      /**
       * Text
       * @description Text content of the plaintext unit
       */
      text?: string | null;
    };
    /**
     * PlatformData
     * @description Platform data used by the web client
     */
    PlatformData: {
      /**
       * Tekst
       * @default {
       *   "name": "Tekst",
       *   "version": "0.0.1",
       *   "description": "An online text research platform",
       *   "website": "https://github.com/VedaWebProject/Tekst",
       *   "license": "AGPL-3.0-or-later",
       *   "licenseUrl": "https://www.gnu.org/licenses/agpl-3.0.txt"
       * }
       */
      tekst?: Record<string, never>;
      /** Texts */
      texts: components['schemas']['TextRead'][];
      settings: components['schemas']['PlatformSettingsRead'];
      /**
       * @default {
       *   "closedMode": false,
       *   "usersActiveByDefault": false,
       *   "enableCookieAuth": true,
       *   "enableJwtAuth": true,
       *   "authCookieLifetime": 10800
       * }
       */
      security?: components['schemas']['PlatformSecurityInfo'];
      /** Systemsegments */
      systemSegments: components['schemas']['ClientSegmentRead'][];
      /** Infosegments */
      infoSegments: components['schemas']['ClientSegmentHead'][];
    };
    /** PlatformSecurityInfo */
    PlatformSecurityInfo: {
      /**
       * Closedmode
       * @default false
       */
      closedMode?: boolean;
      /**
       * Usersactivebydefault
       * @default false
       */
      usersActiveByDefault?: boolean;
      /**
       * Enablecookieauth
       * @default true
       */
      enableCookieAuth?: boolean;
      /**
       * Enablejwtauth
       * @default true
       */
      enableJwtAuth?: boolean;
      /**
       * Authcookielifetime
       * @default 10800
       */
      authCookieLifetime?: number;
    };
    /** PlatformSettingsRead */
    PlatformSettingsRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Infoplatformname
       * @description Name of the platform
       * @default Tekst-Dev
       */
      infoPlatformName?: string;
      /**
       * Infodescription
       * @description Short description of the platform
       * @default An online text research platform
       */
      infoDescription?: string | null;
      /**
       * Infoterms
       * @description URL to page with terms and conditions for API usage
       */
      infoTerms?: string | null;
      /**
       * Infocontactname
       * @description Platform contact name
       */
      infoContactName?: string | null;
      /**
       * Infocontactemail
       * @description Platform contact email
       */
      infoContactEmail?: string | null;
      /**
       * Infocontacturl
       * @description URL to page with contact info
       */
      infoContactUrl?: string | null;
      /**
       * Defaulttextid
       * @description Default text to load in UI
       */
      defaultTextId?: string | null;
      /**
       * Showheaderinfo
       * @description Show platform description in header
       * @default true
       */
      showHeaderInfo?: boolean;
      /**
       * Showfooterinfo
       * @description Show platform title and description in footer
       * @default true
       */
      showFooterInfo?: boolean;
      [key: string]: unknown;
    };
    /** PlatformSettingsUpdate */
    PlatformSettingsUpdate: {
      /**
       * Infoplatformname
       * @description Name of the platform
       * @default Tekst-Dev
       */
      infoPlatformName?: string;
      /**
       * Infodescription
       * @description Short description of the platform
       * @default An online text research platform
       */
      infoDescription?: string | null;
      /**
       * Infoterms
       * @description URL to page with terms and conditions for API usage
       */
      infoTerms?: string | null;
      /**
       * Infocontactname
       * @description Platform contact name
       */
      infoContactName?: string | null;
      /**
       * Infocontactemail
       * @description Platform contact email
       */
      infoContactEmail?: string | null;
      /**
       * Infocontacturl
       * @description URL to page with contact info
       */
      infoContactUrl?: string | null;
      /**
       * Defaulttextid
       * @description Default text to load in UI
       */
      defaultTextId?: string | null;
      /**
       * Showheaderinfo
       * @description Show platform description in header
       * @default true
       */
      showHeaderInfo?: boolean;
      /**
       * Showfooterinfo
       * @description Show platform title and description in footer
       * @default true
       */
      showFooterInfo?: boolean;
    };
    /**
     * PlatformStats
     * @description Platform statistics data
     */
    PlatformStats: {
      /** Userscount */
      usersCount: number;
      /** Texts */
      texts: components['schemas']['TextStats'][];
    };
    /** StructureLevelTranslation */
    StructureLevelTranslation: {
      /**
       * Locale
       * @enum {string}
       */
      locale: 'deDE' | 'enUS';
      /** Label */
      label: string;
    };
    /** SubtitleTranslation */
    SubtitleTranslation: {
      /**
       * Locale
       * @enum {string}
       */
      locale: 'deDE' | 'enUS';
      /** Subtitle */
      subtitle: string;
    };
    /** TextCreate */
    TextCreate: {
      /**
       * Title
       * @description Title of this text
       */
      title: string;
      /**
       * Slug
       * @description A short identifier for use in URLs and internal operations
       */
      slug: string;
      /**
       * Subtitle
       * @description Subtitle translations of this text (if set, it must contain at least one element)
       */
      subtitle?: components['schemas']['SubtitleTranslation'][] | null;
      /** Levels */
      levels: components['schemas']['StructureLevelTranslation'][][];
      /**
       * Defaultlevel
       * @description Default structure level for the client to use for browsing this text
       * @default 0
       */
      defaultLevel?: number;
      /**
       * Locdelim
       * @description Delimiter for displaying text locations
       * @default ,
       */
      locDelim?: string;
      /**
       * Labeledlocation
       * @description Whether the UI should label the parts of the browse location with each levels' names
       * @default true
       */
      labeledLocation?: boolean;
      /**
       * Accentcolor
       * Format: color
       * @description Accent color used for this text in the client UI
       * @default #305D97
       */
      accentColor?: string;
      /**
       * Isactive
       * @description Whether the text should be listed for non-admin users in the web client
       * @default false
       */
      isActive?: boolean;
    };
    /** TextRead */
    TextRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Title
       * @description Title of this text
       */
      title: string;
      /**
       * Slug
       * @description A short identifier for use in URLs and internal operations
       */
      slug: string;
      /**
       * Subtitle
       * @description Subtitle translations of this text (if set, it must contain at least one element)
       */
      subtitle?: components['schemas']['SubtitleTranslation'][] | null;
      /** Levels */
      levels: components['schemas']['StructureLevelTranslation'][][];
      /**
       * Defaultlevel
       * @description Default structure level for the client to use for browsing this text
       * @default 0
       */
      defaultLevel?: number;
      /**
       * Locdelim
       * @description Delimiter for displaying text locations
       * @default ,
       */
      locDelim?: string;
      /**
       * Labeledlocation
       * @description Whether the UI should label the parts of the browse location with each levels' names
       * @default true
       */
      labeledLocation?: boolean;
      /**
       * Accentcolor
       * Format: color
       * @description Accent color used for this text in the client UI
       * @default #305D97
       */
      accentColor?: string;
      /**
       * Isactive
       * @description Whether the text should be listed for non-admin users in the web client
       * @default false
       */
      isActive?: boolean;
      [key: string]: unknown;
    };
    /**
     * TextStats
     * @description Text statistics data
     */
    TextStats: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /** Nodescount */
      nodesCount: number;
      /** Layerscount */
      layersCount: number;
      /** Layertypes */
      layerTypes: {
        [key: string]: number;
      };
    };
    /** TextUpdate */
    TextUpdate: {
      /** Title */
      title?: string | null;
      /** Slug */
      slug?: string | null;
      /**
       * Subtitle
       * @description Subtitle translations of this text (if set, it must contain at least one element)
       */
      subtitle?: components['schemas']['SubtitleTranslation'][] | null;
      /** Levels */
      levels?: components['schemas']['StructureLevelTranslation'][][] | null;
      /**
       * Defaultlevel
       * @description Default structure level for the client to use for browsing this text
       * @default 0
       */
      defaultLevel?: number;
      /**
       * Locdelim
       * @description Delimiter for displaying text locations
       * @default ,
       */
      locDelim?: string;
      /**
       * Labeledlocation
       * @description Whether the UI should label the parts of the browse location with each levels' names
       * @default true
       */
      labeledLocation?: boolean;
      /**
       * Accentcolor
       * Format: color
       * @description Accent color used for this text in the client UI
       * @default #305D97
       */
      accentColor?: string;
      /**
       * Isactive
       * @description Whether the text should be listed for non-admin users in the web client
       * @default false
       */
      isActive?: boolean;
    };
    /**
     * UserCreate
     * @description Dataset for creating a new user
     */
    UserCreate: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
      /**
       * Isactive
       * @default false
       */
      isActive?: boolean;
      /**
       * Issuperuser
       * @default false
       */
      isSuperuser?: boolean | null;
      /**
       * Isverified
       * @default false
       */
      isVerified?: boolean | null;
      /** Username */
      username: string;
      /** Firstname */
      firstName: string;
      /** Lastname */
      lastName: string;
      /** Affiliation */
      affiliation: string;
      /** Locale */
      locale?: ('deDE' | 'enUS') | null;
      /**
       * Publicfields
       * @description Data fields set public by this user
       * @default []
       */
      publicFields?: ('id' | 'firstName' | 'lastName' | 'affiliation')[];
    };
    /**
     * UserRead
     * @description A user registered in the system
     */
    UserRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Isactive */
      isActive: boolean;
      /** Issuperuser */
      isSuperuser: boolean;
      /** Isverified */
      isVerified: boolean;
      /** Username */
      username: string;
      /** Firstname */
      firstName: string;
      /** Lastname */
      lastName: string;
      /** Affiliation */
      affiliation: string;
      /** Locale */
      locale?: ('deDE' | 'enUS') | null;
      /**
       * Publicfields
       * @description Data fields set public by this user
       * @default []
       */
      publicFields?: ('id' | 'firstName' | 'lastName' | 'affiliation')[];
      /**
       * Createdat
       * Format: date-time
       */
      createdAt: string;
    };
    /** UserReadPublic */
    UserReadPublic: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /** Username */
      username: string;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /** Affiliation */
      affiliation?: string | null;
    };
    /** UserUpdate */
    UserUpdate: {
      /** Password */
      password?: string | null;
      /** Email */
      email?: string | null;
      /** Isactive */
      isActive?: boolean | null;
      /** Issuperuser */
      isSuperuser?: boolean | null;
      /** Isverified */
      isVerified?: boolean | null;
      /** Username */
      username?: string | null;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /** Affiliation */
      affiliation?: string | null;
      /** Locale */
      locale?: ('deDE' | 'enUS') | null;
      /**
       * Publicfields
       * @description Data fields set public by this user
       * @default []
       */
      publicFields?: ('id' | 'firstName' | 'lastName' | 'affiliation')[];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Get stats */
  getStats: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PlatformStats'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /** Get users */
  getUsers: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRead'][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /** Test email */
  testEmail: {
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get unit siblings
   * @description Returns a list of all data layer units belonging to the data layer
   * with the given ID, associated to nodes that are children of the parent node
   * with the given ID.
   *
   * As the resulting list may contain units of arbitrary type, the
   * returned unit objects cannot be typed to their precise layer unit type.
   * Also, the returned unit objects have an additional property containing their
   * respective node's label, level and position.
   */
  getUnitSiblings: {
    parameters: {
      query: {
        /** @description ID of layer the requested units belong to */
        layerId: string;
        /** @description ID of node for which siblings to get associated units for */
        parentNodeId?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': Record<string, never>[];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get node path
   * @description Returns the text node path from the node with the given level/position
   * as the last element, up to its most distant ancestor node
   * on structure level 0 as the first element of an array.
   */
  getNodePath: {
    parameters: {
      query: {
        textId: string;
        level: number;
        position: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['NodeRead'][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get path options by head id
   * @description Returns the options for selecting text locations derived from the node path of
   * the node with the given ID as head.
   */
  getPathOptionsByHeadId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['NodeRead'][][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get path options by root id
   * @description Returns the options for selecting text locations derived from the node path of
   * the node with the given ID as root. At each level, the first option is taken
   * as the basis for the next level.
   */
  getPathOptionsByRootId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['NodeRead'][][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get layer coverage data */
  getLayerCoverageData: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LayerNodeCoverage'][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Find layers
   * @description Returns a list of all data layers matching the given criteria.
   *
   * As the resulting list of data layers may contain layers of different types, the
   * returned layer objects cannot be typed to their precise layer type.
   */
  findLayers: {
    parameters: {
      query: {
        textId: string;
        level?: number;
        layerType?: string;
        limit?: number;
        /** @description Include owners' user data, if any */
        owners?: boolean;
        /** @description Add flag indicating write permissions for requesting user */
        writable?: boolean;
        /** @description Include shared-with users' user data, if any */
        shares?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': (
            | components['schemas']['DebugLayerRead']
            | components['schemas']['PlaintextLayerRead']
          )[];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create layer */
  createLayer: {
    requestBody: {
      content: {
        'application/json':
          | components['schemas']['DebugLayerCreate']
          | components['schemas']['PlaintextLayerCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json':
            | components['schemas']['DebugLayerRead']
            | components['schemas']['PlaintextLayerRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get layer */
  getLayer: {
    parameters: {
      query?: {
        /** @description Include owners' user data, if any */
        owners?: boolean;
        /** @description Add flag indicating write permissions for requesting user */
        writable?: boolean;
        /** @description Include shared-with users' user data, if any */
        shares?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json':
            | components['schemas']['DebugLayerRead']
            | components['schemas']['PlaintextLayerRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Delete layer */
  deleteLayer: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Update layer */
  updateLayer: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json':
          | components['schemas']['DebugLayerUpdate']
          | components['schemas']['PlaintextLayerUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json':
            | components['schemas']['DebugLayerRead']
            | components['schemas']['PlaintextLayerRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Propose layer */
  proposeLayer: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Unpropose layer */
  unproposeLayer: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Publish layer */
  publishLayer: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Unpublish layer */
  unpublishLayer: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Find nodes */
  findNodes: {
    parameters: {
      query: {
        textId: string;
        level?: number;
        position?: number;
        parentId?: string;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['NodeRead'][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Create node
   * @description Creates a new node. The position will be automatically set to the last position
   * of the node's parent (or the first parent before that has children).
   */
  createNode: {
    requestBody: {
      content: {
        'application/json': components['schemas']['NodeCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['NodeRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get children */
  getChildren: {
    parameters: {
      query?: {
        parentId?: string | null;
        textId?: string | null;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['NodeRead'][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get node */
  getNode: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['NodeRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Delete node
   * @description Deletes the specified node. Also deletes any associated units, child nodes and units associated with child nodes.
   */
  deleteNode: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['DeleteNodeResult'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Update node */
  updateNode: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NodeUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['NodeRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Move node
   * @description Moves the specified node to a new position on its structure level.
   */
  moveNode: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MoveNodeRequestBody'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['NodeRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get platform data
   * @description Returns data the client needs to initialize
   */
  getPlatformData: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PlatformData'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get public user info
   * @description Returns public information on the user with the specified username or ID
   */
  getPublicUserInfo: {
    parameters: {
      path: {
        usernameOrId: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserReadPublic'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get public users */
  getPublicUsers: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserReadPublic'][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /** Update platform settings */
  updatePlatformSettings: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PlatformSettingsUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PlatformSettingsRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get segment */
  getSegment: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ClientSegmentRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Delete segment */
  deleteSegment: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Update segment */
  updateSegment: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ClientSegmentUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ClientSegmentRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create segment */
  createSegment: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ClientSegmentCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['ClientSegmentRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get all texts */
  getAllTexts: {
    parameters: {
      query?: {
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextRead'][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create text */
  createText: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TextCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['TextRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Download structure template
   * @description Download the structure template for a text to help compose a structure
   * definition that can later be uploaded to the server
   */
  downloadStructureTemplate: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Upload structure definition
   * @description Upload the structure definition for a text to apply as a structure of nodes
   */
  uploadStructureDefinition: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_structure_definition_texts__id__structure_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Insert level */
  insertLevel: {
    parameters: {
      path: {
        id: string;
        /** @description Index to insert the level at */
        index: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['StructureLevelTranslation'][];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Delete level */
  deleteLevel: {
    parameters: {
      path: {
        id: string;
        /** @description Index to insert the level at */
        index: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get text */
  getText: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Delete text */
  deleteText: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Update text */
  updateText: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TextUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get unit
   * @description Returns the data for a Debug data layer unit
   */
  getDebugUnit: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['DebugUnitRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Update unit
   * @description Updates the data for a Debug data layer unit
   */
  updateDebugUnit: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DebugUnitUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['DebugUnitRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Create unit
   * @description Creates a Debug data layer unit
   */
  createDebugUnit: {
    requestBody: {
      content: {
        'application/json': components['schemas']['DebugUnitCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['DebugUnitRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get unit
   * @description Returns the data for a Plaintext data layer unit
   */
  getPlaintextUnit: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PlaintextUnitRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Update unit
   * @description Updates the data for a Plaintext data layer unit
   */
  updatePlaintextUnit: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PlaintextUnitUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PlaintextUnitRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Create unit
   * @description Creates a Plaintext data layer unit
   */
  createPlaintextUnit: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PlaintextUnitCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['PlaintextUnitRead'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Find units
   * @description Returns a list of all data layer units matching the given criteria.
   *
   * Respects restricted layers and inactive texts.
   * As the resulting list may contain units of different types, the
   * returned unit objects cannot be typed to their precise layer unit type.
   */
  findUnits: {
    parameters: {
      query?: {
        /** @description ID (or list of IDs) of layer(s) to return unit data for */
        layerId?: string[];
        /** @description ID (or list of IDs) of node(s) to return unit data for */
        nodeId?: string[];
        /** @description Return at most <limit> items */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': Record<string, never>[];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Login */
  'auth:cookie.login': {
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['Body_auth_cookie_login_auth_cookie_login_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Logout */
  'auth:cookie.logout': {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
    };
  };
  /** Login */
  'auth:jwt.login': {
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['Body_auth_jwt_login_auth_jwt_login_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['BearerResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Logout */
  'auth:jwt.logout': {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
    };
  };
  /** Register */
  'register:register': {
    requestBody: {
      content: {
        'application/json': components['schemas']['UserCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Request verify token */
  'verify:requestToken': {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_verify_request_token_auth_request_verify_token_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Verify */
  'verify:verify': {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_verify_verify_auth_verify_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Forgot password */
  'reset:forgotPassword': {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_reset_forgot_password_auth_forgot_password_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Reset password */
  'reset:resetPassword': {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_reset_reset_password_auth_reset_password_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Me */
  'users:currentUser': {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
    };
  };
  /** Update me */
  'users:patchCurrentUser': {
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get user */
  'users:user': {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
      /** @description Not a superuser. */
      403: {
        content: never;
      };
      /** @description The user does not exist. */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Delete user */
  'users:deleteUser': {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
      /** @description Not a superuser. */
      403: {
        content: never;
      };
      /** @description The user does not exist. */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Update user */
  'users:patchUser': {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
      /** @description Not a superuser. */
      403: {
        content: never;
      };
      /** @description The user does not exist. */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
