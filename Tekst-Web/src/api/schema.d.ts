/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/bookmarks/{id}': {
    /** Delete bookmark */
    delete: operations['deleteBookmark'];
  };
  '/bookmarks': {
    /**
     * Get user bookmarks
     * @description Returns all bookmarks that belong to the requesting user
     */
    get: operations['getUserBookmarks'];
    /**
     * Create bookmark
     * @description Creates a bookmark for the requesting user
     */
    post: operations['createBookmark'];
  };
  '/browse/content-siblings': {
    /**
     * Get content siblings
     * @description Returns a list of all resource contents belonging to the resource
     * with the given ID, associated to locations that are children of the parent location
     * with the given ID.
     *
     * As the resulting list may contain contents of arbitrary type, the
     * returned content objects cannot be typed to their precise resource content type.
     */
    get: operations['getContentSiblings'];
  };
  '/browse/location-data': {
    /**
     * Get location data
     * @description Returns the location path from the location with the given level/position
     * as the last element, up to its most distant ancestor location
     * on structure level 0 as the first element of an array as well as all contents
     * for the given resource(s) referencing the locations in the location path.
     */
    get: operations['getLocationData'];
  };
  '/browse/nearest-content-position': {
    /**
     * Get nearest content position
     * @description Finds the nearest location the given resource holds content for and returns
     * its position index or -1 if no content was found.
     */
    get: operations['getNearestContentPosition'];
  };
  '/browse/locations/{id}/path/options-by-head': {
    /**
     * Get path options by head id
     * @description Returns the options for selecting text locations derived from the location path of
     * the location with the given ID as head.
     */
    get: operations['getPathOptionsByHeadId'];
  };
  '/browse/locations/{id}/path/options-by-root': {
    /**
     * Get path options by root
     * @description Returns the options for selecting text locations derived from the location path of
     * the location with the given ID as root. At each level, the first option is taken
     * as the basis for the next level.
     */
    get: operations['getPathOptionsByRoot'];
  };
  '/browse/resources/{id}/coverage': {
    /** Get resource coverage data */
    get: operations['getResourceCoverageData'];
  };
  '/browse/resources/{id}/coverage-details': {
    /** Get detailed resource coverage data */
    get: operations['getDetailedResourceCoverageData'];
  };
  '/contents': {
    /**
     * Find contents
     * @description Returns a list of all resource contents matching the given criteria.
     *
     * Respects restricted resources and inactive texts.
     * As the resulting list may contain contents of different types, the
     * returned content objects cannot be typed to their precise resource content type.
     */
    get: operations['findContents'];
    /** Create content */
    post: operations['createContent'];
  };
  '/contents/{id}': {
    /**
     * Get content
     * @description A generic route for retrieving a content by ID from the database
     */
    get: operations['getContent'];
    /** Delete content */
    delete: operations['deleteContent'];
    /** Update content */
    patch: operations['updateContent'];
  };
  '/locations': {
    /** Find locations */
    get: operations['findLocations'];
    /**
     * Create location
     * @description Creates a new location. The position will be automatically set to the last position
     * of the location's parent (or the first parent before that has children).
     */
    post: operations['createLocation'];
  };
  '/locations/children': {
    /** Get children */
    get: operations['getChildren'];
  };
  '/locations/{id}': {
    /** Get location */
    get: operations['getLocation'];
    /**
     * Delete location
     * @description Deletes the specified location. Also deletes any associated contents,
     * child locations and contents associated with child locations.
     */
    delete: operations['deleteLocation'];
    /** Update location */
    patch: operations['updateLocation'];
  };
  '/locations/{id}/move': {
    /**
     * Move location
     * @description Moves the specified location to a new position on its level.
     */
    post: operations['moveLocation'];
  };
  '/messages': {
    /**
     * Get messages
     * @description Returns all messages for/from the requesting user
     */
    get: operations['getMessages'];
    /**
     * Send message
     * @description Creates a message for the specified recipient
     */
    post: operations['sendMessage'];
  };
  '/messages/{id}': {
    /**
     * Delete message
     * @description Deletes the message with the given ID
     */
    delete: operations['deleteMessage'];
  };
  '/messages/threads/{id}': {
    /**
     * Delete thread
     * @description Marks all received messages from the given user as deleted or actually deletes them,
     * depending on the current deletion status
     */
    delete: operations['deleteThread'];
  };
  '/messages/threads/{id}/read': {
    /**
     * Mark thread read
     * @description Marks all received messages from the given user as read
     */
    post: operations['markThreadRead'];
  };
  '/platform': {
    /**
     * Get platform data
     * @description Returns data the client needs to initialize
     */
    get: operations['getPlatformData'];
  };
  '/platform/settings': {
    /** Update platform settings */
    patch: operations['updatePlatformSettings'];
  };
  '/platform/segments/{id}': {
    /** Get segment */
    get: operations['getSegment'];
    /** Delete segment */
    delete: operations['deleteSegment'];
    /** Update segment */
    patch: operations['updateSegment'];
  };
  '/platform/segments': {
    /** Create segment */
    post: operations['createSegment'];
  };
  '/platform/stats': {
    /** Get statistics */
    get: operations['getStatistics'];
  };
  '/platform/locks/{key}': {
    /** Get lock status */
    get: operations['getLockStatus'];
  };
  '/platform/locks': {
    /** Get locks status */
    get: operations['getLocksStatus'];
    /** Release locks */
    delete: operations['releaseLocks'];
  };
  '/resources': {
    /**
     * Find resources
     * @description Returns a list of all resources matching the given criteria.
     *
     * As the resulting list of resources may contain resources of different types, the
     * returned resource objects cannot be typed to their precise resource type.
     */
    get: operations['findResources'];
    /** Create resource */
    post: operations['createResource'];
  };
  '/resources/{id}/version': {
    /** Create resource version */
    post: operations['createResourceVersion'];
  };
  '/resources/{id}': {
    /** Get resource */
    get: operations['getResource'];
    /** Delete resource */
    delete: operations['deleteResource'];
    /** Update resource */
    patch: operations['updateResource'];
  };
  '/resources/{id}/transfer': {
    /** Transfer resource */
    post: operations['transferResource'];
  };
  '/resources/{id}/propose': {
    /** Propose resource */
    post: operations['proposeResource'];
  };
  '/resources/{id}/unpropose': {
    /** Unpropose resource */
    post: operations['unproposeResource'];
  };
  '/resources/{id}/publish': {
    /** Publish resource */
    post: operations['publishResource'];
  };
  '/resources/{id}/unpublish': {
    /** Unpublish resource */
    post: operations['unpublishResource'];
  };
  '/resources/{id}/template': {
    /** Get resource template */
    get: operations['getResourceTemplate'];
  };
  '/resources/{id}/import': {
    /** Import resource data */
    post: operations['importResourceData'];
  };
  '/search': {
    /** Perform search */
    post: operations['performSearch'];
  };
  '/search/index/create': {
    /** Create search index */
    get: operations['createSearchIndex'];
  };
  '/search/index/info': {
    /** Get search index info */
    get: operations['getSearchIndexInfo'];
  };
  '/texts': {
    /**
     * Get all texts
     * @description Returns a list of all texts.
     * Only users with admin permissions will see inactive texts.
     */
    get: operations['getAllTexts'];
    /** Create text */
    post: operations['createText'];
  };
  '/texts/{id}/template': {
    /**
     * Download structure template
     * @description Download the structure template for a text to help compose a structure
     * definition that can later be uploaded to the server
     */
    get: operations['downloadStructureTemplate'];
  };
  '/texts/{id}/structure': {
    /**
     * Import text structure
     * @description Upload the structure definition for a text to apply as a structure of locations
     */
    post: operations['importTextStructure'];
  };
  '/texts/{id}/level/{index}': {
    /** Insert level */
    post: operations['insertLevel'];
    /** Delete level */
    delete: operations['deleteLevel'];
  };
  '/texts/{id}': {
    /** Get text */
    get: operations['getText'];
    /** Delete text */
    delete: operations['deleteText'];
    /** Update text */
    patch: operations['updateText'];
  };
  '/users/me': {
    /** Me */
    get: operations['users:currentUser'];
    /** Delete me */
    delete: operations['deleteMe'];
    /** Update me */
    patch: operations['users:patchCurrentUser'];
  };
  '/users': {
    /** Get users */
    get: operations['getUsers'];
  };
  '/users/public/{user}': {
    /**
     * Get public user
     * @description Returns public information on the user with the specified username or ID
     */
    get: operations['getPublicUser'];
  };
  '/users/public': {
    /**
     * Find public users
     * @description Returns a list of public users matching the given query.
     *
     * Only returns active user accounts. The query is considered to match a full token
     * (e.g. first name, last name, username, a word in the affiliation field).
     */
    get: operations['findPublicUsers'];
  };
  '/auth/cookie/login': {
    /** Login */
    post: operations['auth:cookie.login'];
  };
  '/auth/cookie/logout': {
    /** Logout */
    post: operations['auth:cookie.logout'];
  };
  '/auth/jwt/login': {
    /** Login */
    post: operations['auth:jwt.login'];
  };
  '/auth/jwt/logout': {
    /** Logout */
    post: operations['auth:jwt.logout'];
  };
  '/auth/register': {
    /** Register */
    post: operations['register:register'];
  };
  '/auth/request-verify-token': {
    /** Request verify token */
    post: operations['verify:requestToken'];
  };
  '/auth/verify': {
    /** Verify */
    post: operations['verify:verify'];
  };
  '/auth/forgot-password': {
    /** Forgot password */
    post: operations['reset:forgotPassword'];
  };
  '/auth/reset-password': {
    /** Reset password */
    post: operations['reset:resetPassword'];
  };
  '/users/{id}': {
    /** Get user */
    get: operations['users:user'];
    /** Delete user */
    delete: operations['users:deleteUser'];
    /** Update user */
    patch: operations['users:patchUser'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @constant */
    AdminNotificationTrigger: 'userAwaitsActivation';
    /** AdvancedSearchRequestBody */
    AdvancedSearchRequestBody: {
      /**
       * Type
       * @description Search type
       * @constant
       */
      type: 'advanced';
      /**
       * Q
       * @description Resource-specific queries
       */
      q: components['schemas']['ResourceSearchQuery'][];
      /**
       * @description General search settings
       * @default {
       *   "pg": 1,
       *   "pgs": 10,
       *   "strict": false
       * }
       */
      gen?: components['schemas']['GeneralSearchSettings'];
      /**
       * @description Advanced search settings
       * @default {}
       */
      adv?: components['schemas']['AdvancedSearchSettings'];
    };
    /** AdvancedSearchSettings */
    AdvancedSearchSettings: Record<string, never>;
    /** BearerResponse */
    BearerResponse: {
      /** Access Token */
      access_token: string;
      /** Token Type */
      token_type: string;
    };
    /** Body_auth_cookie_login_auth_cookie_login_post */
    Body_auth_cookie_login_auth_cookie_login_post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** Body_auth_jwt_login_auth_jwt_login_post */
    Body_auth_jwt_login_auth_jwt_login_post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** Body_import_resource_data_resources__id__import_post */
    Body_import_resource_data_resources__id__import_post: {
      /**
       * File
       * Format: binary
       * @description JSON file containing the resource data
       */
      file: Blob;
    };
    /** Body_import_text_structure_texts__id__structure_post */
    Body_import_text_structure_texts__id__structure_post: {
      /**
       * File
       * Format: binary
       * @description JSON file containing the text's structure
       */
      file: Blob;
    };
    /** Body_reset_forgot_password_auth_forgot_password_post */
    Body_reset_forgot_password_auth_forgot_password_post: {
      /**
       * Email
       * Format: email
       */
      email: string;
    };
    /** Body_reset_reset_password_auth_reset_password_post */
    Body_reset_reset_password_auth_reset_password_post: {
      /** Token */
      token: string;
      /** Password */
      password: string;
    };
    /** Body_verify_request_token_auth_request_verify_token_post */
    Body_verify_request_token_auth_request_verify_token_post: {
      /**
       * Email
       * Format: email
       */
      email: string;
    };
    /** Body_verify_verify_auth_verify_post */
    Body_verify_verify_auth_verify_post: {
      /** Token */
      token: string;
    };
    /** BookmarkCreate */
    BookmarkCreate: {
      /**
       * Locationid
       * @example 5eb7cf5a86d9755df3a6c593
       */
      locationId: string;
      /** Comment */
      comment?: string | null;
    };
    /** BookmarkRead */
    BookmarkRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Userid
       * @example 5eb7cf5a86d9755df3a6c593
       */
      userId: string;
      /**
       * Textid
       * @example 5eb7cf5a86d9755df3a6c593
       */
      textId: string;
      /**
       * Locationid
       * @example 5eb7cf5a86d9755df3a6c593
       */
      locationId: string;
      /** Level */
      level: number;
      /** Position */
      position: number;
      /** Locationlabels */
      locationLabels: string[];
      /** Comment */
      comment?: string | null;
      [key: string]: unknown;
    };
    /** ClientSegmentCreate */
    ClientSegmentCreate: {
      /**
       * Key
       * @description Key of this segment. System segment keys must start with `system`.
       */
      key: string;
      /**
       * Issystemsegment
       * @description Whether this is a system segment (will be set automatically)
       * @default false
       */
      isSystemSegment?: boolean;
      /**
       * Editormode
       * @description Last used editor mode
       * @default wysiwyg
       * @enum {string}
       */
      editorMode?: 'wysiwyg' | 'html';
      /** @description Locale indicating the translation language of this segment */
      locale: components['schemas']['TranslationLocaleKey'];
      /**
       * Title
       * @description Title of this segment
       */
      title?: string | null;
      /**
       * Html
       * @description HTML content of this segment
       */
      html: string;
    };
    /** ClientSegmentHead */
    ClientSegmentHead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /** Key */
      key: string;
      /** Title */
      title?: string | null;
      locale: components['schemas']['TranslationLocaleKey'];
    };
    /** ClientSegmentRead */
    ClientSegmentRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Key
       * @description Key of this segment. System segment keys must start with `system`.
       */
      key: string;
      /**
       * Issystemsegment
       * @description Whether this is a system segment (will be set automatically)
       * @default false
       */
      isSystemSegment?: boolean;
      /**
       * Editormode
       * @description Last used editor mode
       * @default wysiwyg
       * @enum {string}
       */
      editorMode?: 'wysiwyg' | 'html';
      /** @description Locale indicating the translation language of this segment */
      locale: components['schemas']['TranslationLocaleKey'];
      /**
       * Title
       * @description Title of this segment
       */
      title?: string | null;
      /**
       * Html
       * @description HTML content of this segment
       */
      html: string;
      [key: string]: unknown;
    };
    /** ClientSegmentUpdate */
    ClientSegmentUpdate: {
      /** Key */
      key?: string | null;
      /**
       * Issystemsegment
       * @description Whether this is a system segment (will be set automatically)
       * @default false
       */
      isSystemSegment?: boolean;
      /**
       * Editormode
       * @description Last used editor mode
       * @default wysiwyg
       * @enum {string}
       */
      editorMode?: 'wysiwyg' | 'html';
      locale?: components['schemas']['TranslationLocaleKey'] | null;
      /**
       * Title
       * @description Title of this segment
       */
      title?: string | null;
      /** Html */
      html?: string | null;
    };
    /** CommonResourceConfig */
    CommonResourceConfig: {
      /**
       * Category
       * @description Resource category key
       */
      category?: string | null;
      /**
       * Sortorder
       * @description Sort order for displaying this resource among others
       * @default 100
       */
      sortOrder?: number;
      /**
       * Defaultactive
       * @description Whether this resource is active by default when public
       * @default true
       */
      defaultActive?: boolean;
      /**
       * Showonparentlevel
       * @description Show combined contents of this resource on the parent level
       * @default false
       */
      showOnParentLevel?: boolean;
    };
    /** CommonResourceSearchQueryData */
    CommonResourceSearchQueryData: {
      /**
       * Opt
       * @description Whether this query matching is optional for the location to be considered a search hit
       * @default true
       */
      opt?: boolean;
      /**
       * Res
       * @description ID of the resource to search in
       * @example 5eb7cf5a86d9755df3a6c593
       */
      res: string;
      /**
       * Cmt
       * @description Comment
       * @default
       */
      cmt?: string;
    };
    /**
     * DeepLLinksConfig
     * @description Resource configuration model for DeepL translation links.
     * The corresponding field MUST be named `deepl_links`!
     */
    DeepLLinksConfig: {
      /**
       * Enabled
       * @description Enable/disable quick translation links to DeepL
       * @default false
       */
      enabled?: boolean;
      /**
       * Sourcelanguage
       * @description Source language
       * @default BG
       */
      sourceLanguage?:
        | (
            | 'BG'
            | 'CS'
            | 'DA'
            | 'DE'
            | 'EL'
            | 'EN'
            | 'ES'
            | 'ET'
            | 'FI'
            | 'FR'
            | 'HU'
            | 'ID'
            | 'IT'
            | 'JA'
            | 'LT'
            | 'LV'
            | 'NL'
            | 'PL'
            | 'PT'
            | 'RO'
            | 'RU'
            | 'SK'
            | 'SL'
            | 'SV'
            | 'TR'
            | 'UK'
            | 'ZH'
          )
        | null;
      /**
       * Languages
       * @description Target languages to display links for
       * @default [
       *   "EN",
       *   "DE"
       * ]
       */
      languages?: (
        | 'BG'
        | 'CS'
        | 'DA'
        | 'DE'
        | 'EL'
        | 'EN'
        | 'ES'
        | 'ET'
        | 'FI'
        | 'FR'
        | 'HU'
        | 'ID'
        | 'IT'
        | 'JA'
        | 'LT'
        | 'LV'
        | 'NL'
        | 'PL'
        | 'PT'
        | 'RO'
        | 'RU'
        | 'SK'
        | 'SL'
        | 'SV'
        | 'TR'
        | 'UK'
        | 'ZH'
      )[];
    };
    /** DeleteLocationResult */
    DeleteLocationResult: {
      /** Contents */
      contents: number;
      /** Locations */
      locations: number;
    };
    /** ErrorDetail */
    ErrorDetail: {
      /** Key */
      key: string;
      /** Msg */
      msg?: string | null;
      /** Values */
      values?: {
        [key: string]: string | number | boolean;
      } | null;
    };
    /** ErrorModel */
    ErrorModel: {
      /** Detail */
      detail:
        | string
        | {
            [key: string]: string;
          };
    };
    /** GeneralPlainTextResourceConfig */
    GeneralPlainTextResourceConfig: {
      /**
       * Defaultcollapsed
       * @description Whether contents of this resource should be collapsed by default
       * @default false
       */
      defaultCollapsed?: boolean;
      /**
       * Reducedviewoneline
       * @description Show contents as single line of text when in reduced view
       * @default false
       */
      reducedViewOneline?: boolean;
      /**
       * Font
       * @description Name of the font to use for this resource.
       */
      font?: string | null;
    };
    /** GeneralRichTextResourceConfig */
    GeneralRichTextResourceConfig: {
      /**
       * Defaultcollapsed
       * @description Whether contents of this resource should be collapsed by default
       * @default true
       */
      defaultCollapsed?: boolean;
      /**
       * Font
       * @description Name of the font to use for this resource.
       */
      font?: string | null;
    };
    /** GeneralSearchSettings */
    GeneralSearchSettings: {
      /**
       * Pg
       * @description Page number
       * @default 1
       */
      pg?: number;
      /**
       * Pgs
       * @description Page size
       * @default 10
       */
      pgs?: number;
      /** @description Sorting preset */
      sort?: components['schemas']['SortingPreset'] | null;
      /**
       * Strict
       * @default false
       */
      strict?: boolean;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** IndexInfoResponse */
    IndexInfoResponse: {
      /** Documents */
      documents: number;
      /** Size */
      size: string;
      /** Searches */
      searches: number;
      /**
       * Lastindexed
       * Format: date-time
       */
      lastIndexed: string;
    };
    /** @enum {string} */
    LocaleKey: 'deDE' | 'enUS';
    /** LocationCreate */
    LocationCreate: {
      /**
       * Textid
       * @description ID of the text this location belongs to
       * @example 5eb7cf5a86d9755df3a6c593
       */
      textId: string;
      /**
       * Parentid
       * @description ID of parent location
       */
      parentId?: string | null;
      /**
       * Level
       * @description Index of structure level this location is on
       */
      level: number;
      /**
       * Position
       * @description Position among all text locations on this level
       */
      position: number;
      /**
       * Label
       * @description Label for identifying this text location in level context
       */
      label: string;
    };
    /** LocationData */
    LocationData: {
      /**
       * Locationpath
       * @default []
       */
      locationPath?: components['schemas']['LocationRead'][];
      /**
       * Contents
       * @default []
       */
      contents?: (
        | components['schemas']['PlainTextContentRead']
        | components['schemas']['RichTextContentRead']
      )[];
    };
    /** LocationRead */
    LocationRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Textid
       * @description ID of the text this location belongs to
       * @example 5eb7cf5a86d9755df3a6c593
       */
      textId: string;
      /**
       * Parentid
       * @description ID of parent location
       */
      parentId?: string | null;
      /**
       * Level
       * @description Index of structure level this location is on
       */
      level: number;
      /**
       * Position
       * @description Position among all text locations on this level
       */
      position: number;
      /**
       * Label
       * @description Label for identifying this text location in level context
       */
      label: string;
      [key: string]: unknown;
    };
    /** LocationUpdate */
    LocationUpdate: {
      /** Textid */
      textId?: string | null;
      /**
       * Parentid
       * @description ID of parent location
       */
      parentId?: string | null;
      /** Level */
      level?: number | null;
      /** Position */
      position?: number | null;
      /** Label */
      label?: string | null;
    };
    /**
     * LockKey
     * @enum {string}
     */
    LockKey: 'index_create_update' | 'text_structure_import';
    /** @enum {string} */
    MaybePrivateUserField: 'name' | 'affiliation' | 'bio';
    MaybePrivateUserFields: components['schemas']['MaybePrivateUserField'][];
    /** MessageCreate */
    MessageCreate: {
      /**
       * Sender
       * @description ID of the sender or None if this is a system message
       */
      sender?: string | null;
      /**
       * Recipient
       * @description ID of the recipient
       * @example 5eb7cf5a86d9755df3a6c593
       */
      recipient: string;
      /**
       * Content
       * @description Content of the message
       */
      content: string;
      /**
       * Time
       * Format: date-time
       * @description Time when the message was sent
       * @default 2024-03-20T16:40:56.509092
       */
      time?: string;
      /**
       * Read
       * @description Whether the message has been read by the recipient
       * @default false
       */
      read?: boolean;
      /**
       * Deleted
       * @description ID of the user who deleted the message or None if not deleted
       */
      deleted?: string | null;
    };
    /** MessageRead */
    MessageRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Sender
       * @description ID of the sender or None if this is a system message
       */
      sender?: string | null;
      /**
       * Recipient
       * @description ID of the recipient
       * @example 5eb7cf5a86d9755df3a6c593
       */
      recipient: string;
      /**
       * Content
       * @description Content of the message
       */
      content: string;
      /**
       * Time
       * Format: date-time
       * @description Time when the message was sent
       * @default 2024-03-20T16:40:56.509092
       */
      time?: string;
      /**
       * Read
       * @description Whether the message has been read by the recipient
       * @default false
       */
      read?: boolean;
      /**
       * Deleted
       * @description ID of the user who deleted the message or None if not deleted
       */
      deleted?: string | null;
      senderUser: components['schemas']['UserReadPublic'] | null;
      recipientUser: components['schemas']['UserReadPublic'];
      [key: string]: unknown;
    };
    /** Metadate */
    Metadate: {
      /** Key */
      key: string;
      /** Value */
      value: string;
    };
    /** MoveLocationRequestBody */
    MoveLocationRequestBody: {
      /** Position */
      position: number;
      /** After */
      after: boolean;
      /** Parentid */
      parentId: string | null;
    };
    /** OskMode */
    OskMode: {
      /** Key */
      key: string;
      /** Name */
      name: string;
      /** Font */
      font?: string | null;
    };
    /** PlainTextContentCreate */
    PlainTextContentCreate: {
      /**
       * Resourceid
       * @description Resource ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      resourceId: string;
      /**
       * Resourcetype
       * @constant
       */
      resourceType: 'plainText';
      /**
       * Locationid
       * @description Parent text location ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      locationId: string;
      /**
       * Comment
       * @description Plain text, potentially multiline comment that will be displayed with the content
       */
      comment?: string | null;
      /**
       * Notes
       * @description Plain text, potentially multiline working notes on this content meant as an aid for people editing this content
       */
      notes?: string | null;
      /**
       * Text
       * @description Text content of the plain text content object
       */
      text: string;
    };
    /** PlainTextContentRead */
    PlainTextContentRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Resourceid
       * @description Resource ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      resourceId: string;
      /**
       * Resourcetype
       * @constant
       */
      resourceType: 'plainText';
      /**
       * Locationid
       * @description Parent text location ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      locationId: string;
      /**
       * Comment
       * @description Plain text, potentially multiline comment that will be displayed with the content
       */
      comment?: string | null;
      /**
       * Notes
       * @description Plain text, potentially multiline working notes on this content meant as an aid for people editing this content
       */
      notes?: string | null;
      /**
       * Text
       * @description Text content of the plain text content object
       */
      text: string;
      [key: string]: unknown;
    };
    /** PlainTextContentUpdate */
    PlainTextContentUpdate: {
      /** Resourceid */
      resourceId?: string | null;
      /**
       * Resourcetype
       * @constant
       */
      resourceType: 'plainText';
      /** Locationid */
      locationId?: string | null;
      /**
       * Comment
       * @description Plain text, potentially multiline comment that will be displayed with the content
       */
      comment?: string | null;
      /**
       * Notes
       * @description Plain text, potentially multiline working notes on this content meant as an aid for people editing this content
       */
      notes?: string | null;
      /** Text */
      text?: string | null;
    };
    /** PlainTextResourceConfig */
    PlainTextResourceConfig: {
      /**
       * @default {
       *   "sortOrder": 100,
       *   "defaultActive": true,
       *   "showOnParentLevel": false
       * }
       */
      common?: components['schemas']['CommonResourceConfig'];
      /**
       * @default {
       *   "defaultCollapsed": false,
       *   "reducedViewOneline": false
       * }
       */
      general?: components['schemas']['GeneralPlainTextResourceConfig'];
      /**
       * @default {
       *   "enabled": false,
       *   "sourceLanguage": "BG",
       *   "languages": [
       *     "EN",
       *     "DE"
       *   ]
       * }
       */
      deeplLinks?: components['schemas']['DeepLLinksConfig'];
    };
    /** PlainTextResourceCreate */
    PlainTextResourceCreate: {
      /**
       * Title
       * @description Title of this resource
       */
      title: string;
      /**
       * Description
       * @description Short, concise description of this resource
       * @default []
       */
      description?: components['schemas']['ResourceDescriptionTranslation'][];
      /**
       * Textid
       * @description ID of the text this resource belongs to
       * @example 5eb7cf5a86d9755df3a6c593
       */
      textId: string;
      /**
       * Level
       * @description Text level this resource belongs to
       */
      level: number;
      /**
       * Resourcetype
       * @constant
       */
      resourceType: 'plainText';
      /**
       * Originalid
       * @description If this is a version of another resource, this ID references the original
       */
      originalId?: string | null;
      /**
       * Ownerid
       * @description User owning this resource
       */
      ownerId?: string | null;
      /**
       * Sharedread
       * @description Users with shared read access to this resource
       * @default []
       */
      sharedRead?: string[];
      /**
       * Sharedwrite
       * @description Users with shared write access to this resource
       * @default []
       */
      sharedWrite?: string[];
      /**
       * Public
       * @description Publication status of this resource
       * @default false
       */
      public?: boolean;
      /**
       * Proposed
       * @description Whether this resource has been proposed for publication
       * @default false
       */
      proposed?: boolean;
      /**
       * Citation
       * @description Citation details for this resource
       */
      citation?: string | null;
      /**
       * Meta
       * @description Arbitrary metadata
       * @default []
       */
      meta?: components['schemas']['Metadate'][];
      /**
       * Comment
       * @description Plain text, potentially multiline comment on this resource
       * @default []
       */
      comment?: components['schemas']['ResourceCommentTranslation'][];
      /**
       * @default {
       *   "common": {
       *     "defaultActive": true,
       *     "showOnParentLevel": false,
       *     "sortOrder": 100
       *   },
       *   "general": {
       *     "defaultCollapsed": false,
       *     "reducedViewOneline": false
       *   },
       *   "deeplLinks": {
       *     "enabled": false,
       *     "languages": [
       *       "EN",
       *       "DE"
       *     ],
       *     "sourceLanguage": "BG"
       *   }
       * }
       */
      config?: components['schemas']['PlainTextResourceConfig'];
    };
    /** PlainTextResourceRead */
    PlainTextResourceRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Writable
       * @description Whether this resource is writable for the requesting user
       */
      writable?: boolean | null;
      /** @description Public user data for user owning this resource */
      owner?: components['schemas']['UserReadPublic'] | null;
      /**
       * Sharedreadusers
       * @description Public user data for users allowed to read this resource
       */
      sharedReadUsers?: components['schemas']['UserReadPublic'][] | null;
      /**
       * Sharedwriteusers
       * @description Public user data for users allowed to write this resource
       */
      sharedWriteUsers?: components['schemas']['UserReadPublic'][] | null;
      /**
       * Title
       * @description Title of this resource
       */
      title: string;
      /**
       * Description
       * @description Short, concise description of this resource
       * @default []
       */
      description?: components['schemas']['ResourceDescriptionTranslation'][];
      /**
       * Textid
       * @description ID of the text this resource belongs to
       * @example 5eb7cf5a86d9755df3a6c593
       */
      textId: string;
      /**
       * Level
       * @description Text level this resource belongs to
       */
      level: number;
      /**
       * Resourcetype
       * @constant
       */
      resourceType: 'plainText';
      /**
       * Originalid
       * @description If this is a version of another resource, this ID references the original
       */
      originalId?: string | null;
      /**
       * Ownerid
       * @description User owning this resource
       */
      ownerId?: string | null;
      /**
       * Sharedread
       * @description Users with shared read access to this resource
       * @default []
       */
      sharedRead?: string[];
      /**
       * Sharedwrite
       * @description Users with shared write access to this resource
       * @default []
       */
      sharedWrite?: string[];
      /**
       * Public
       * @description Publication status of this resource
       * @default false
       */
      public?: boolean;
      /**
       * Proposed
       * @description Whether this resource has been proposed for publication
       * @default false
       */
      proposed?: boolean;
      /**
       * Citation
       * @description Citation details for this resource
       */
      citation?: string | null;
      /**
       * Meta
       * @description Arbitrary metadata
       * @default []
       */
      meta?: components['schemas']['Metadate'][];
      /**
       * Comment
       * @description Plain text, potentially multiline comment on this resource
       * @default []
       */
      comment?: components['schemas']['ResourceCommentTranslation'][];
      /**
       * @default {
       *   "common": {
       *     "defaultActive": true,
       *     "showOnParentLevel": false,
       *     "sortOrder": 100
       *   },
       *   "general": {
       *     "defaultCollapsed": false,
       *     "reducedViewOneline": false
       *   },
       *   "deeplLinks": {
       *     "enabled": false,
       *     "languages": [
       *       "EN",
       *       "DE"
       *     ],
       *     "sourceLanguage": "BG"
       *   }
       * }
       */
      config?: components['schemas']['PlainTextResourceConfig'];
      [key: string]: unknown;
    };
    /** PlainTextResourceUpdate */
    PlainTextResourceUpdate: {
      /** Title */
      title?: string | null;
      /**
       * Description
       * @description Short, concise description of this resource
       * @default []
       */
      description?: components['schemas']['ResourceDescriptionTranslation'][];
      /** Textid */
      textId?: string | null;
      /** Level */
      level?: number | null;
      /**
       * Resourcetype
       * @constant
       */
      resourceType: 'plainText';
      /**
       * Originalid
       * @description If this is a version of another resource, this ID references the original
       */
      originalId?: string | null;
      /**
       * Ownerid
       * @description User owning this resource
       */
      ownerId?: string | null;
      /**
       * Sharedread
       * @description Users with shared read access to this resource
       * @default []
       */
      sharedRead?: string[];
      /**
       * Sharedwrite
       * @description Users with shared write access to this resource
       * @default []
       */
      sharedWrite?: string[];
      /**
       * Public
       * @description Publication status of this resource
       * @default false
       */
      public?: boolean;
      /**
       * Proposed
       * @description Whether this resource has been proposed for publication
       * @default false
       */
      proposed?: boolean;
      /**
       * Citation
       * @description Citation details for this resource
       */
      citation?: string | null;
      /**
       * Meta
       * @description Arbitrary metadata
       * @default []
       */
      meta?: components['schemas']['Metadate'][];
      /**
       * Comment
       * @description Plain text, potentially multiline comment on this resource
       * @default []
       */
      comment?: components['schemas']['ResourceCommentTranslation'][];
      /**
       * @default {
       *   "common": {
       *     "defaultActive": true,
       *     "showOnParentLevel": false,
       *     "sortOrder": 100
       *   },
       *   "general": {
       *     "defaultCollapsed": false,
       *     "reducedViewOneline": false
       *   },
       *   "deeplLinks": {
       *     "enabled": false,
       *     "languages": [
       *       "EN",
       *       "DE"
       *     ],
       *     "sourceLanguage": "BG"
       *   }
       * }
       */
      config?: components['schemas']['PlainTextResourceConfig'];
    };
    /** PlainTextSearchQuery */
    PlainTextSearchQuery: {
      /**
       * Type
       * @description Type of the resource to search in
       * @constant
       */
      type: 'plainText';
      /**
       * Text
       * @default
       */
      text?: string;
    };
    /**
     * PlatformData
     * @description Platform data used by the web client
     */
    PlatformData: {
      /** Texts */
      texts: components['schemas']['TextRead'][];
      settings: components['schemas']['PlatformSettingsRead'];
      /**
       * @default {
       *   "closedMode": false,
       *   "usersActiveByDefault": false,
       *   "enableCookieAuth": true,
       *   "enableJwtAuth": true,
       *   "authCookieLifetime": 10800
       * }
       */
      security?: components['schemas']['PlatformSecurityInfo'];
      /** Systemsegments */
      systemSegments: components['schemas']['ClientSegmentRead'][];
      /** Infosegments */
      infoSegments: components['schemas']['ClientSegmentHead'][];
      /**
       * Settingscachettl
       * @default 60
       */
      settingsCacheTtl?: number;
      /**
       * Tekst
       * @default {
       *   "name": "Tekst",
       *   "version": "0.0.1",
       *   "description": "An online text research platform",
       *   "license": "AGPL-3.0-or-later",
       *   "licenseUrl": "https://www.gnu.org/licenses/agpl-3.0.txt",
       *   "website": "https://github.com/VedaWebProject/Tekst",
       *   "documentation": "https://vedawebproject.github.io/Tekst"
       * }
       */
      tekst?: {
        [key: string]: string;
      };
    };
    /** PlatformDescriptionTranslation */
    PlatformDescriptionTranslation: {
      locale: components['schemas']['TranslationLocaleKey'];
      /** Translation */
      translation: string;
    };
    /** PlatformNavInfoEntryTranslation */
    PlatformNavInfoEntryTranslation: {
      locale: components['schemas']['TranslationLocaleKey'];
      /** Translation */
      translation: string;
    };
    /** PlatformSecurityInfo */
    PlatformSecurityInfo: {
      /**
       * Closedmode
       * @default false
       */
      closedMode?: boolean;
      /**
       * Usersactivebydefault
       * @default false
       */
      usersActiveByDefault?: boolean;
      /**
       * Enablecookieauth
       * @default true
       */
      enableCookieAuth?: boolean;
      /**
       * Enablejwtauth
       * @default true
       */
      enableJwtAuth?: boolean;
      /**
       * Authcookielifetime
       * @default 10800
       */
      authCookieLifetime?: number;
    };
    /** PlatformSettingsRead */
    PlatformSettingsRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Infoplatformname
       * @description Name of the platform
       * @default Tekst-Dev
       */
      infoPlatformName?: string;
      /**
       * Infosubtitle
       * @description Short description of the platform, in multiple languages
       * @default [
       *   {
       *     "locale": "*",
       *     "translation": "An online text research platform"
       *   }
       * ]
       */
      infoSubtitle?: components['schemas']['PlatformDescriptionTranslation'][];
      /**
       * Infoterms
       * @description URL to page with terms and conditions for API usage
       */
      infoTerms?: string | null;
      /**
       * Infocontactname
       * @description Platform contact name
       * @default Tekst Administrator
       */
      infoContactName?: string | null;
      /**
       * Infocontactemail
       * @description Platform contact email
       * @default noreply@tekst-contact-email-not-set.com
       */
      infoContactEmail?: string | null;
      /**
       * Infocontacturl
       * @description URL to page with contact info
       */
      infoContactUrl?: string | null;
      /**
       * Defaulttextid
       * @description Default text to load in UI
       */
      defaultTextId?: string | null;
      /**
       * Navinfoentry
       * @description Custom label for main navigation info entry
       * @default []
       */
      navInfoEntry?: components['schemas']['PlatformNavInfoEntryTranslation'][];
      /**
       * Resourcecategories
       * @description Resource categories to categorize resources in
       * @default []
       */
      resourceCategories?: components['schemas']['ResourceCategory'][];
      /**
       * Customfonts
       * @description CSS font family names for use in resources
       * @default []
       */
      customFonts?: string[];
      /**
       * Showresourcecategoryheadings
       * @description Show resource category headings in browse view
       * @default true
       */
      showResourceCategoryHeadings?: boolean;
      /**
       * Alwaysshowresourcecategoryheadings
       * @description Show category heading for the only category with resources
       * @default false
       */
      alwaysShowResourceCategoryHeadings?: boolean;
      /**
       * Alwaysshowtextinfo
       * @description Always show text info and selector in header, even on non-text-specific pages
       * @default true
       */
      alwaysShowTextInfo?: boolean;
      /**
       * Showtekstfooterhint
       * @description Show a small hint to the Tekst software in the footer
       * @default true
       */
      showTekstFooterHint?: boolean;
      /**
       * Availablelocales
       * @default [
       *   "deDE",
       *   "enUS"
       * ]
       */
      availableLocales?: components['schemas']['LocaleKey'][];
      /**
       * Oskmodes
       * @description OSK modes available for use in platform client
       * @default []
       */
      oskModes?: components['schemas']['OskMode'][];
      [key: string]: unknown;
    };
    /** PlatformSettingsUpdate */
    PlatformSettingsUpdate: {
      /**
       * Infoplatformname
       * @description Name of the platform
       * @default Tekst-Dev
       */
      infoPlatformName?: string;
      /**
       * Infosubtitle
       * @description Short description of the platform, in multiple languages
       * @default [
       *   {
       *     "locale": "*",
       *     "translation": "An online text research platform"
       *   }
       * ]
       */
      infoSubtitle?: components['schemas']['PlatformDescriptionTranslation'][];
      /**
       * Infoterms
       * @description URL to page with terms and conditions for API usage
       */
      infoTerms?: string | null;
      /**
       * Infocontactname
       * @description Platform contact name
       * @default Tekst Administrator
       */
      infoContactName?: string | null;
      /**
       * Infocontactemail
       * @description Platform contact email
       * @default noreply@tekst-contact-email-not-set.com
       */
      infoContactEmail?: string | null;
      /**
       * Infocontacturl
       * @description URL to page with contact info
       */
      infoContactUrl?: string | null;
      /**
       * Defaulttextid
       * @description Default text to load in UI
       */
      defaultTextId?: string | null;
      /**
       * Navinfoentry
       * @description Custom label for main navigation info entry
       * @default []
       */
      navInfoEntry?: components['schemas']['PlatformNavInfoEntryTranslation'][];
      /**
       * Resourcecategories
       * @description Resource categories to categorize resources in
       * @default []
       */
      resourceCategories?: components['schemas']['ResourceCategory'][];
      /**
       * Customfonts
       * @description CSS font family names for use in resources
       * @default []
       */
      customFonts?: string[];
      /**
       * Showresourcecategoryheadings
       * @description Show resource category headings in browse view
       * @default true
       */
      showResourceCategoryHeadings?: boolean;
      /**
       * Alwaysshowresourcecategoryheadings
       * @description Show category heading for the only category with resources
       * @default false
       */
      alwaysShowResourceCategoryHeadings?: boolean;
      /**
       * Alwaysshowtextinfo
       * @description Always show text info and selector in header, even on non-text-specific pages
       * @default true
       */
      alwaysShowTextInfo?: boolean;
      /**
       * Showtekstfooterhint
       * @description Show a small hint to the Tekst software in the footer
       * @default true
       */
      showTekstFooterHint?: boolean;
      /**
       * Availablelocales
       * @default [
       *   "deDE",
       *   "enUS"
       * ]
       */
      availableLocales?: components['schemas']['LocaleKey'][];
      /**
       * Oskmodes
       * @description OSK modes available for use in platform client
       * @default []
       */
      oskModes?: components['schemas']['OskMode'][];
    };
    /**
     * PlatformStats
     * @description Platform statistics data
     */
    PlatformStats: {
      /** Userscount */
      usersCount: number;
      /** Texts */
      texts: components['schemas']['TextStats'][];
    };
    /** QuickSearchRequestBody */
    QuickSearchRequestBody: {
      /**
       * Type
       * @description Search type
       * @constant
       */
      type: 'quick';
      /**
       * Q
       * @description Query string
       * @default *
       */
      q?: string;
      /**
       * @description General search settings
       * @default {
       *   "pg": 1,
       *   "pgs": 10,
       *   "strict": false
       * }
       */
      gen?: components['schemas']['GeneralSearchSettings'];
      /**
       * @description Quick search settings
       * @default {
       *   "op": "OR"
       * }
       */
      qck?: components['schemas']['QuickSearchSettings'];
    };
    /** QuickSearchSettings */
    QuickSearchSettings: {
      /**
       * Op
       * @description Default operator
       * @default OR
       * @enum {string}
       */
      op?: 'AND' | 'OR';
      /** Texts */
      texts?: string[] | null;
    };
    /** ResourceCategory */
    ResourceCategory: {
      /** Key */
      key: string;
      /** Translations */
      translations: components['schemas']['ResourceCategoryTranslation'][];
    };
    /** ResourceCategoryTranslation */
    ResourceCategoryTranslation: {
      locale: components['schemas']['TranslationLocaleKey'];
      /** Translation */
      translation: string;
    };
    /** ResourceCommentTranslation */
    ResourceCommentTranslation: {
      locale: components['schemas']['TranslationLocaleKey'];
      /** Translation */
      translation: string;
    };
    /** ResourceCoverage */
    ResourceCoverage: {
      /** Covered */
      covered: number;
      /** Total */
      total: number;
    };
    /** ResourceCoverageDetails */
    ResourceCoverageDetails: {
      /** Parentlabels */
      parentLabels: string[];
      /** Locationscoverage */
      locationsCoverage: components['schemas']['ResourceLocationCoverage'][][];
    };
    /** ResourceDataImportResponse */
    ResourceDataImportResponse: {
      /** Updated */
      updated: number;
      /** Created */
      created: number;
      /** Errors */
      errors: number;
    };
    /** ResourceDescriptionTranslation */
    ResourceDescriptionTranslation: {
      locale: components['schemas']['TranslationLocaleKey'];
      /** Translation */
      translation: string;
    };
    /** ResourceLocationCoverage */
    ResourceLocationCoverage: {
      /** Label */
      label: string;
      /** Position */
      position: number;
      /**
       * Covered
       * @default false
       */
      covered?: boolean;
    };
    /** ResourceSearchQuery */
    ResourceSearchQuery: {
      /** @description Common resource search query data */
      cmn: components['schemas']['CommonResourceSearchQueryData'];
      /**
       * Rts
       * @description Resource type-specific search query data
       */
      rts:
        | components['schemas']['PlainTextSearchQuery']
        | components['schemas']['RichTextSearchQuery'];
    };
    /** RichTextContentCreate */
    RichTextContentCreate: {
      /**
       * Resourceid
       * @description Resource ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      resourceId: string;
      /**
       * Resourcetype
       * @constant
       */
      resourceType: 'richText';
      /**
       * Locationid
       * @description Parent text location ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      locationId: string;
      /**
       * Comment
       * @description Plain text, potentially multiline comment that will be displayed with the content
       */
      comment?: string | null;
      /**
       * Notes
       * @description Plain text, potentially multiline working notes on this content meant as an aid for people editing this content
       */
      notes?: string | null;
      /**
       * Html
       * @description HTML content of the rich text content object
       */
      html: string;
      /**
       * Editormode
       * @description Last used editor mode for this content
       * @default wysiwyg
       * @enum {string}
       */
      editorMode?: 'wysiwyg' | 'html';
    };
    /** RichTextContentRead */
    RichTextContentRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Resourceid
       * @description Resource ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      resourceId: string;
      /**
       * Resourcetype
       * @constant
       */
      resourceType: 'richText';
      /**
       * Locationid
       * @description Parent text location ID
       * @example 5eb7cf5a86d9755df3a6c593
       */
      locationId: string;
      /**
       * Comment
       * @description Plain text, potentially multiline comment that will be displayed with the content
       */
      comment?: string | null;
      /**
       * Notes
       * @description Plain text, potentially multiline working notes on this content meant as an aid for people editing this content
       */
      notes?: string | null;
      /**
       * Html
       * @description HTML content of the rich text content object
       */
      html: string;
      /**
       * Editormode
       * @description Last used editor mode for this content
       * @default wysiwyg
       * @enum {string}
       */
      editorMode?: 'wysiwyg' | 'html';
      [key: string]: unknown;
    };
    /** RichTextContentUpdate */
    RichTextContentUpdate: {
      /** Resourceid */
      resourceId?: string | null;
      /**
       * Resourcetype
       * @constant
       */
      resourceType: 'richText';
      /** Locationid */
      locationId?: string | null;
      /**
       * Comment
       * @description Plain text, potentially multiline comment that will be displayed with the content
       */
      comment?: string | null;
      /**
       * Notes
       * @description Plain text, potentially multiline working notes on this content meant as an aid for people editing this content
       */
      notes?: string | null;
      /** Html */
      html?: string | null;
      /**
       * Editormode
       * @description Last used editor mode for this content
       * @default wysiwyg
       * @enum {string}
       */
      editorMode?: 'wysiwyg' | 'html';
    };
    /** RichTextResourceConfig */
    RichTextResourceConfig: {
      /**
       * @default {
       *   "sortOrder": 100,
       *   "defaultActive": true,
       *   "showOnParentLevel": false
       * }
       */
      common?: components['schemas']['CommonResourceConfig'];
      /**
       * @default {
       *   "defaultCollapsed": true
       * }
       */
      general?: components['schemas']['GeneralRichTextResourceConfig'];
    };
    /** RichTextResourceCreate */
    RichTextResourceCreate: {
      /**
       * Title
       * @description Title of this resource
       */
      title: string;
      /**
       * Description
       * @description Short, concise description of this resource
       * @default []
       */
      description?: components['schemas']['ResourceDescriptionTranslation'][];
      /**
       * Textid
       * @description ID of the text this resource belongs to
       * @example 5eb7cf5a86d9755df3a6c593
       */
      textId: string;
      /**
       * Level
       * @description Text level this resource belongs to
       */
      level: number;
      /**
       * Resourcetype
       * @constant
       */
      resourceType: 'richText';
      /**
       * Originalid
       * @description If this is a version of another resource, this ID references the original
       */
      originalId?: string | null;
      /**
       * Ownerid
       * @description User owning this resource
       */
      ownerId?: string | null;
      /**
       * Sharedread
       * @description Users with shared read access to this resource
       * @default []
       */
      sharedRead?: string[];
      /**
       * Sharedwrite
       * @description Users with shared write access to this resource
       * @default []
       */
      sharedWrite?: string[];
      /**
       * Public
       * @description Publication status of this resource
       * @default false
       */
      public?: boolean;
      /**
       * Proposed
       * @description Whether this resource has been proposed for publication
       * @default false
       */
      proposed?: boolean;
      /**
       * Citation
       * @description Citation details for this resource
       */
      citation?: string | null;
      /**
       * Meta
       * @description Arbitrary metadata
       * @default []
       */
      meta?: components['schemas']['Metadate'][];
      /**
       * Comment
       * @description Plain text, potentially multiline comment on this resource
       * @default []
       */
      comment?: components['schemas']['ResourceCommentTranslation'][];
      /**
       * @default {
       *   "common": {
       *     "defaultActive": true,
       *     "showOnParentLevel": false,
       *     "sortOrder": 100
       *   },
       *   "general": {
       *     "defaultCollapsed": true
       *   }
       * }
       */
      config?: components['schemas']['RichTextResourceConfig'];
    };
    /** RichTextResourceRead */
    RichTextResourceRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Writable
       * @description Whether this resource is writable for the requesting user
       */
      writable?: boolean | null;
      /** @description Public user data for user owning this resource */
      owner?: components['schemas']['UserReadPublic'] | null;
      /**
       * Sharedreadusers
       * @description Public user data for users allowed to read this resource
       */
      sharedReadUsers?: components['schemas']['UserReadPublic'][] | null;
      /**
       * Sharedwriteusers
       * @description Public user data for users allowed to write this resource
       */
      sharedWriteUsers?: components['schemas']['UserReadPublic'][] | null;
      /**
       * Title
       * @description Title of this resource
       */
      title: string;
      /**
       * Description
       * @description Short, concise description of this resource
       * @default []
       */
      description?: components['schemas']['ResourceDescriptionTranslation'][];
      /**
       * Textid
       * @description ID of the text this resource belongs to
       * @example 5eb7cf5a86d9755df3a6c593
       */
      textId: string;
      /**
       * Level
       * @description Text level this resource belongs to
       */
      level: number;
      /**
       * Resourcetype
       * @constant
       */
      resourceType: 'richText';
      /**
       * Originalid
       * @description If this is a version of another resource, this ID references the original
       */
      originalId?: string | null;
      /**
       * Ownerid
       * @description User owning this resource
       */
      ownerId?: string | null;
      /**
       * Sharedread
       * @description Users with shared read access to this resource
       * @default []
       */
      sharedRead?: string[];
      /**
       * Sharedwrite
       * @description Users with shared write access to this resource
       * @default []
       */
      sharedWrite?: string[];
      /**
       * Public
       * @description Publication status of this resource
       * @default false
       */
      public?: boolean;
      /**
       * Proposed
       * @description Whether this resource has been proposed for publication
       * @default false
       */
      proposed?: boolean;
      /**
       * Citation
       * @description Citation details for this resource
       */
      citation?: string | null;
      /**
       * Meta
       * @description Arbitrary metadata
       * @default []
       */
      meta?: components['schemas']['Metadate'][];
      /**
       * Comment
       * @description Plain text, potentially multiline comment on this resource
       * @default []
       */
      comment?: components['schemas']['ResourceCommentTranslation'][];
      /**
       * @default {
       *   "common": {
       *     "defaultActive": true,
       *     "showOnParentLevel": false,
       *     "sortOrder": 100
       *   },
       *   "general": {
       *     "defaultCollapsed": true
       *   }
       * }
       */
      config?: components['schemas']['RichTextResourceConfig'];
      [key: string]: unknown;
    };
    /** RichTextResourceUpdate */
    RichTextResourceUpdate: {
      /** Title */
      title?: string | null;
      /**
       * Description
       * @description Short, concise description of this resource
       * @default []
       */
      description?: components['schemas']['ResourceDescriptionTranslation'][];
      /** Textid */
      textId?: string | null;
      /** Level */
      level?: number | null;
      /**
       * Resourcetype
       * @constant
       */
      resourceType: 'richText';
      /**
       * Originalid
       * @description If this is a version of another resource, this ID references the original
       */
      originalId?: string | null;
      /**
       * Ownerid
       * @description User owning this resource
       */
      ownerId?: string | null;
      /**
       * Sharedread
       * @description Users with shared read access to this resource
       * @default []
       */
      sharedRead?: string[];
      /**
       * Sharedwrite
       * @description Users with shared write access to this resource
       * @default []
       */
      sharedWrite?: string[];
      /**
       * Public
       * @description Publication status of this resource
       * @default false
       */
      public?: boolean;
      /**
       * Proposed
       * @description Whether this resource has been proposed for publication
       * @default false
       */
      proposed?: boolean;
      /**
       * Citation
       * @description Citation details for this resource
       */
      citation?: string | null;
      /**
       * Meta
       * @description Arbitrary metadata
       * @default []
       */
      meta?: components['schemas']['Metadate'][];
      /**
       * Comment
       * @description Plain text, potentially multiline comment on this resource
       * @default []
       */
      comment?: components['schemas']['ResourceCommentTranslation'][];
      /**
       * @default {
       *   "common": {
       *     "defaultActive": true,
       *     "showOnParentLevel": false,
       *     "sortOrder": 100
       *   },
       *   "general": {
       *     "defaultCollapsed": true
       *   }
       * }
       */
      config?: components['schemas']['RichTextResourceConfig'];
    };
    /** RichTextSearchQuery */
    RichTextSearchQuery: {
      /**
       * Type
       * @description Type of the resource to search in
       * @constant
       */
      type: 'richText';
      /**
       * Html
       * @default
       */
      html?: string;
    };
    /** SearchHit */
    SearchHit: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /** Label */
      label: string;
      /** Fulllabel */
      fullLabel: string;
      /**
       * Textid
       * @example 5eb7cf5a86d9755df3a6c593
       */
      textId: string;
      /** Level */
      level: number;
      /** Position */
      position: number;
      /** Score */
      score: number | null;
      /**
       * Highlight
       * @default {}
       */
      highlight?: {
        [key: string]: string[];
      };
    };
    /** SearchResults */
    SearchResults: {
      /** Hits */
      hits: components['schemas']['SearchHit'][];
      /** Took */
      took: number;
      /** Totalhits */
      totalHits: number;
      /**
       * Totalhitsrelation
       * @enum {string}
       */
      totalHitsRelation: 'eq' | 'gte';
      /** Maxscore */
      maxScore: number | null;
      /**
       * Indexcreationtime
       * Format: date-time
       */
      indexCreationTime: string;
    };
    /** @enum {string} */
    SortingPreset: 'relevance' | 'text_level_position' | 'text_level_relevance';
    /** TekstErrorModel */
    TekstErrorModel: {
      detail: components['schemas']['ErrorDetail'];
    };
    /** TextCreate */
    TextCreate: {
      /**
       * Title
       * @description Title of this text
       */
      title: string;
      /**
       * Slug
       * @description A short identifier for use in URLs and internal operations
       */
      slug: string;
      /**
       * Subtitle
       * @description Subtitle translations of this text (if set, it must contain at least one element)
       * @default []
       */
      subtitle?: components['schemas']['TextSubtitleTranslation'][];
      /**
       * Levels
       * @description Structure levels of this text and their label translations
       */
      levels: components['schemas']['TextLevelTranslation'][][];
      /**
       * Defaultlevel
       * @description Default structure level for the client to use for browsing this text
       * @default 0
       */
      defaultLevel?: number;
      /**
       * Locdelim
       * @description Delimiter for displaying text locations
       * @default ,
       */
      locDelim?: string;
      /**
       * Labeledlocation
       * @description Whether the UI should label the parts of the browse location with each levels' names
       * @default true
       */
      labeledLocation?: boolean;
      /**
       * Accentcolor
       * Format: color
       * @description Accent color used for this text in the client UI
       * @default #305D97
       */
      accentColor?: string;
      /**
       * Isactive
       * @description Whether the text should be listed for non-admin users in the web client
       * @default false
       */
      isActive?: boolean;
    };
    /** TextLevelTranslation */
    TextLevelTranslation: {
      locale: components['schemas']['TranslationLocaleKey'];
      /** Translation */
      translation: string;
    };
    /** TextRead */
    TextRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Title
       * @description Title of this text
       */
      title: string;
      /**
       * Slug
       * @description A short identifier for use in URLs and internal operations
       */
      slug: string;
      /**
       * Subtitle
       * @description Subtitle translations of this text (if set, it must contain at least one element)
       * @default []
       */
      subtitle?: components['schemas']['TextSubtitleTranslation'][];
      /**
       * Levels
       * @description Structure levels of this text and their label translations
       */
      levels: components['schemas']['TextLevelTranslation'][][];
      /**
       * Defaultlevel
       * @description Default structure level for the client to use for browsing this text
       * @default 0
       */
      defaultLevel?: number;
      /**
       * Locdelim
       * @description Delimiter for displaying text locations
       * @default ,
       */
      locDelim?: string;
      /**
       * Labeledlocation
       * @description Whether the UI should label the parts of the browse location with each levels' names
       * @default true
       */
      labeledLocation?: boolean;
      /**
       * Accentcolor
       * Format: color
       * @description Accent color used for this text in the client UI
       * @default #305D97
       */
      accentColor?: string;
      /**
       * Isactive
       * @description Whether the text should be listed for non-admin users in the web client
       * @default false
       */
      isActive?: boolean;
      [key: string]: unknown;
    };
    /**
     * TextStats
     * @description Text statistics data
     */
    TextStats: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /** Locationscount */
      locationsCount: number;
      /** Resourcescount */
      resourcesCount: number;
      /** Resourcetypes */
      resourceTypes: {
        [key: string]: number;
      };
    };
    /** TextSubtitleTranslation */
    TextSubtitleTranslation: {
      locale: components['schemas']['TranslationLocaleKey'];
      /** Translation */
      translation: string;
    };
    /** TextUpdate */
    TextUpdate: {
      /** Title */
      title?: string | null;
      /** Slug */
      slug?: string | null;
      /**
       * Subtitle
       * @description Subtitle translations of this text (if set, it must contain at least one element)
       * @default []
       */
      subtitle?: components['schemas']['TextSubtitleTranslation'][];
      /** Levels */
      levels?: components['schemas']['TextLevelTranslation'][][] | null;
      /**
       * Defaultlevel
       * @description Default structure level for the client to use for browsing this text
       * @default 0
       */
      defaultLevel?: number;
      /**
       * Locdelim
       * @description Delimiter for displaying text locations
       * @default ,
       */
      locDelim?: string;
      /**
       * Labeledlocation
       * @description Whether the UI should label the parts of the browse location with each levels' names
       * @default true
       */
      labeledLocation?: boolean;
      /**
       * Accentcolor
       * Format: color
       * @description Accent color used for this text in the client UI
       * @default #305D97
       */
      accentColor?: string;
      /**
       * Isactive
       * @description Whether the text should be listed for non-admin users in the web client
       * @default false
       */
      isActive?: boolean;
    };
    /** @enum {string} */
    TranslationLocaleKey: 'deDE' | 'enUS' | '*';
    /**
     * UserCreate
     * @description Dataset for creating a new user
     */
    UserCreate: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
      /**
       * Isactive
       * @default false
       */
      isActive?: boolean;
      /**
       * Issuperuser
       * @default false
       */
      isSuperuser?: boolean | null;
      /**
       * Isverified
       * @default false
       */
      isVerified?: boolean | null;
      /** Username */
      username: string;
      /** Name */
      name: string;
      /** Affiliation */
      affiliation: string;
      locale?: components['schemas']['LocaleKey'] | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      /** Bio */
      bio?: string | null;
      /** @default [] */
      publicFields?: components['schemas']['MaybePrivateUserFields'];
      /**
       * Usernotificationtriggers
       * @description Events that trigger notifications for this user
       * @default [
       *   "messageReceived",
       *   "resourceProposed",
       *   "resourcePublished"
       * ]
       */
      userNotificationTriggers?: components['schemas']['UserNotificationTrigger'][];
      /**
       * Adminnotificationtriggers
       * @description Events that trigger admin notifications for this user
       * @default [
       *   "userAwaitsActivation"
       * ]
       */
      adminNotificationTriggers?: components['schemas']['AdminNotificationTrigger'][];
    };
    /** @enum {string} */
    UserNotificationTrigger: 'messageReceived' | 'resourceProposed' | 'resourcePublished';
    /**
     * UserRead
     * @description A user registered in the system
     */
    UserRead: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Isactive */
      isActive: boolean;
      /** Issuperuser */
      isSuperuser: boolean;
      /** Isverified */
      isVerified: boolean;
      /** Username */
      username: string;
      /** Name */
      name: string;
      /** Affiliation */
      affiliation: string;
      locale?: components['schemas']['LocaleKey'] | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      /** Bio */
      bio?: string | null;
      /** @default [] */
      publicFields?: components['schemas']['MaybePrivateUserFields'];
      /**
       * Usernotificationtriggers
       * @description Events that trigger notifications for this user
       * @default [
       *   "messageReceived",
       *   "resourceProposed",
       *   "resourcePublished"
       * ]
       */
      userNotificationTriggers?: components['schemas']['UserNotificationTrigger'][];
      /**
       * Adminnotificationtriggers
       * @description Events that trigger admin notifications for this user
       * @default [
       *   "userAwaitsActivation"
       * ]
       */
      adminNotificationTriggers?: components['schemas']['AdminNotificationTrigger'][];
      /**
       * Createdat
       * Format: date-time
       */
      createdAt: string;
    };
    /** UserReadPublic */
    UserReadPublic: {
      /**
       * Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /** Username */
      username: string;
      /** Name */
      name?: string | null;
      /** Affiliation */
      affiliation?: string | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      /** Bio */
      bio?: string | null;
      /**
       * Issuperuser
       * @default false
       */
      isSuperuser?: boolean;
      /** @default [] */
      publicFields?: components['schemas']['MaybePrivateUserFields'];
    };
    /** UserUpdate */
    UserUpdate: {
      /** Password */
      password?: string | null;
      /** Email */
      email?: string | null;
      /** Isactive */
      isActive?: boolean | null;
      /** Issuperuser */
      isSuperuser?: boolean | null;
      /** Isverified */
      isVerified?: boolean | null;
      /** Username */
      username?: string | null;
      /** Name */
      name?: string | null;
      /** Affiliation */
      affiliation?: string | null;
      locale?: components['schemas']['LocaleKey'] | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      /** Bio */
      bio?: string | null;
      /** @default [] */
      publicFields?: components['schemas']['MaybePrivateUserFields'];
      /**
       * Usernotificationtriggers
       * @description Events that trigger notifications for this user
       * @default [
       *   "messageReceived",
       *   "resourceProposed",
       *   "resourcePublished"
       * ]
       */
      userNotificationTriggers?: components['schemas']['UserNotificationTrigger'][];
      /**
       * Adminnotificationtriggers
       * @description Events that trigger admin notifications for this user
       * @default [
       *   "userAwaitsActivation"
       * ]
       */
      adminNotificationTriggers?: components['schemas']['AdminNotificationTrigger'][];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Delete bookmark */
  deleteBookmark: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get user bookmarks
   * @description Returns all bookmarks that belong to the requesting user
   */
  getUserBookmarks: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['BookmarkRead'][];
        };
      };
    };
  };
  /**
   * Create bookmark
   * @description Creates a bookmark for the requesting user
   */
  createBookmark: {
    requestBody: {
      content: {
        'application/json': components['schemas']['BookmarkCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['BookmarkRead'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get content siblings
   * @description Returns a list of all resource contents belonging to the resource
   * with the given ID, associated to locations that are children of the parent location
   * with the given ID.
   *
   * As the resulting list may contain contents of arbitrary type, the
   * returned content objects cannot be typed to their precise resource content type.
   */
  getContentSiblings: {
    parameters: {
      query: {
        /** @description ID of resource the requested contents belong to */
        res: string;
        /** @description ID of location for which siblings to get contents for */
        parent?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': (
            | components['schemas']['PlainTextContentRead']
            | components['schemas']['RichTextContentRead']
          )[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get location data
   * @description Returns the location path from the location with the given level/position
   * as the last element, up to its most distant ancestor location
   * on structure level 0 as the first element of an array as well as all contents
   * for the given resource(s) referencing the locations in the location path.
   */
  getLocationData: {
    parameters: {
      query: {
        /** @description ID of text to look up data for */
        txt: string;
        /** @description Location level */
        lvl: number;
        /** @description Location position */
        pos: number;
        /** @description ID (or list of IDs) of resource(s) to return content data for */
        res?: string[];
        /** @description Only return contents for the head location of the path */
        head?: boolean;
        /** @description Return at most <limit> contents */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LocationData'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get nearest content position
   * @description Finds the nearest location the given resource holds content for and returns
   * its position index or -1 if no content was found.
   */
  getNearestContentPosition: {
    parameters: {
      query: {
        /** @description Location position */
        pos: number;
        /** @description ID of resource to return nearest location with content for */
        res: string;
        /** @description Whether to look for the nearest preceding or subsequent location with content */
        mode?: 'preceding' | 'subsequent';
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': number;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get path options by head id
   * @description Returns the options for selecting text locations derived from the location path of
   * the location with the given ID as head.
   */
  getPathOptionsByHeadId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LocationRead'][][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get path options by root
   * @description Returns the options for selecting text locations derived from the location path of
   * the location with the given ID as root. At each level, the first option is taken
   * as the basis for the next level.
   */
  getPathOptionsByRoot: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LocationRead'][][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get resource coverage data */
  getResourceCoverageData: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ResourceCoverage'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get detailed resource coverage data */
  getDetailedResourceCoverageData: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ResourceCoverageDetails'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Find contents
   * @description Returns a list of all resource contents matching the given criteria.
   *
   * Respects restricted resources and inactive texts.
   * As the resulting list may contain contents of different types, the
   * returned content objects cannot be typed to their precise resource content type.
   */
  findContents: {
    parameters: {
      query?: {
        /** @description ID (or list of IDs) of resource(s) to return content data for */
        res?: string[];
        /** @description ID (or list of IDs) of location(s) to return content data for */
        location?: string[];
        /** @description Return at most <limit> items */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': (
            | components['schemas']['PlainTextContentRead']
            | components['schemas']['RichTextContentRead']
          )[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create content */
  createContent: {
    requestBody: {
      content: {
        'application/json':
          | components['schemas']['PlainTextContentCreate']
          | components['schemas']['RichTextContentCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json':
            | components['schemas']['PlainTextContentRead']
            | components['schemas']['RichTextContentRead'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get content
   * @description A generic route for retrieving a content by ID from the database
   */
  getContent: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json':
            | components['schemas']['PlainTextContentRead']
            | components['schemas']['RichTextContentRead'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Delete content */
  deleteContent: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Update content */
  updateContent: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json':
          | components['schemas']['PlainTextContentUpdate']
          | components['schemas']['RichTextContentUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json':
            | components['schemas']['PlainTextContentRead']
            | components['schemas']['RichTextContentRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Find locations */
  findLocations: {
    parameters: {
      query: {
        /** @description ID of text to find locations for */
        txt: string;
        /** @description Structure level to find locations for */
        lvl?: number;
        /** @description Position value of locations to find */
        pos?: number;
        /** @description ID of parent location to find children of */
        parent?: string;
        /** @description Return at most <limit> locations */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LocationRead'][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Create location
   * @description Creates a new location. The position will be automatically set to the last position
   * of the location's parent (or the first parent before that has children).
   */
  createLocation: {
    requestBody: {
      content: {
        'application/json': components['schemas']['LocationCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['LocationRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get children */
  getChildren: {
    parameters: {
      query?: {
        /** @description ID of text to find locations for */
        txt?: string | null;
        /** @description ID of parent location to find children of */
        parent?: string | null;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LocationRead'][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get location */
  getLocation: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LocationRead'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Delete location
   * @description Deletes the specified location. Also deletes any associated contents,
   * child locations and contents associated with child locations.
   */
  deleteLocation: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['DeleteLocationResult'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Update location */
  updateLocation: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LocationUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LocationRead'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Move location
   * @description Moves the specified location to a new position on its level.
   */
  moveLocation: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MoveLocationRequestBody'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LocationRead'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get messages
   * @description Returns all messages for/from the requesting user
   */
  getMessages: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MessageRead'][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
    };
  };
  /**
   * Send message
   * @description Creates a message for the specified recipient
   */
  sendMessage: {
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MessageRead'][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Delete message
   * @description Deletes the message with the given ID
   */
  deleteMessage: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MessageRead'][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Delete thread
   * @description Marks all received messages from the given user as deleted or actually deletes them,
   * depending on the current deletion status
   */
  deleteThread: {
    parameters: {
      path: {
        id: string | 'system';
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MessageRead'][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Mark thread read
   * @description Marks all received messages from the given user as read
   */
  markThreadRead: {
    parameters: {
      path: {
        id: string | 'system';
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MessageRead'][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get platform data
   * @description Returns data the client needs to initialize
   */
  getPlatformData: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PlatformData'];
        };
      };
    };
  };
  /** Update platform settings */
  updatePlatformSettings: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PlatformSettingsUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PlatformSettingsRead'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get segment */
  getSegment: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ClientSegmentRead'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Delete segment */
  deleteSegment: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Update segment */
  updateSegment: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ClientSegmentUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ClientSegmentRead'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create segment */
  createSegment: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ClientSegmentCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['ClientSegmentRead'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get statistics */
  getStatistics: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PlatformStats'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
    };
  };
  /** Get lock status */
  getLockStatus: {
    parameters: {
      path: {
        key: components['schemas']['LockKey'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': boolean;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get locks status */
  getLocksStatus: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': {
            [key: string]: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
    };
  };
  /** Release locks */
  releaseLocks: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
    };
  };
  /**
   * Find resources
   * @description Returns a list of all resources matching the given criteria.
   *
   * As the resulting list of resources may contain resources of different types, the
   * returned resource objects cannot be typed to their precise resource type.
   */
  findResources: {
    parameters: {
      query?: {
        /** @description ID of text to find resources for */
        txt?: string;
        /** @description Structure level to find resources for */
        lvl?: number;
        /** @description Type of resources to find */
        type?: string;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': (
            | components['schemas']['PlainTextResourceRead']
            | components['schemas']['RichTextResourceRead']
          )[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create resource */
  createResource: {
    requestBody: {
      content: {
        'application/json':
          | components['schemas']['PlainTextResourceCreate']
          | components['schemas']['RichTextResourceCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json':
            | components['schemas']['PlainTextResourceRead']
            | components['schemas']['RichTextResourceRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create resource version */
  createResourceVersion: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json':
            | components['schemas']['PlainTextResourceRead']
            | components['schemas']['RichTextResourceRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get resource */
  getResource: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json':
            | components['schemas']['PlainTextResourceRead']
            | components['schemas']['RichTextResourceRead'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Delete resource */
  deleteResource: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Update resource */
  updateResource: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json':
          | components['schemas']['PlainTextResourceUpdate']
          | components['schemas']['RichTextResourceUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json':
            | components['schemas']['PlainTextResourceRead']
            | components['schemas']['RichTextResourceRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Transfer resource */
  transferResource: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json':
            | components['schemas']['PlainTextResourceRead']
            | components['schemas']['RichTextResourceRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Propose resource */
  proposeResource: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json':
            | components['schemas']['PlainTextResourceRead']
            | components['schemas']['RichTextResourceRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Unpropose resource */
  unproposeResource: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json':
            | components['schemas']['PlainTextResourceRead']
            | components['schemas']['RichTextResourceRead'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Publish resource */
  publishResource: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json':
            | components['schemas']['PlainTextResourceRead']
            | components['schemas']['RichTextResourceRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Unpublish resource */
  unpublishResource: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json':
            | components['schemas']['PlainTextResourceRead']
            | components['schemas']['RichTextResourceRead'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get resource template */
  getResourceTemplate: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Import resource data */
  importResourceData: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_import_resource_data_resources__id__import_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['ResourceDataImportResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Perform search */
  performSearch: {
    requestBody: {
      content: {
        'application/json':
          | components['schemas']['QuickSearchRequestBody']
          | components['schemas']['AdvancedSearchRequestBody'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['SearchResults'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create search index */
  createSearchIndex: {
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
    };
  };
  /** Get search index info */
  getSearchIndexInfo: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['IndexInfoResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
    };
  };
  /**
   * Get all texts
   * @description Returns a list of all texts.
   * Only users with admin permissions will see inactive texts.
   */
  getAllTexts: {
    parameters: {
      query?: {
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextRead'][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create text */
  createText: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TextCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['TextRead'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Download structure template
   * @description Download the structure template for a text to help compose a structure
   * definition that can later be uploaded to the server
   */
  downloadStructureTemplate: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Import text structure
   * @description Upload the structure definition for a text to apply as a structure of locations
   */
  importTextStructure: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_import_text_structure_texts__id__structure_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Insert level */
  insertLevel: {
    parameters: {
      path: {
        id: string;
        /** @description Index to insert the level at */
        index: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TextLevelTranslation'][];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Delete level */
  deleteLevel: {
    parameters: {
      path: {
        id: string;
        /** @description Index to insert the level at */
        index: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get text */
  getText: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextRead'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Delete text */
  deleteText: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Update text */
  updateText: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TextUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextRead'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Me */
  'users:currentUser': {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
    };
  };
  /** Delete me */
  deleteMe: {
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
    };
  };
  /** Update me */
  'users:patchCurrentUser': {
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get users */
  getUsers: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRead'][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
    };
  };
  /**
   * Get public user
   * @description Returns public information on the user with the specified username or ID
   */
  getPublicUser: {
    parameters: {
      path: {
        /** @description Username or ID */
        user: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserReadPublic'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Find public users
   * @description Returns a list of public users matching the given query.
   *
   * Only returns active user accounts. The query is considered to match a full token
   * (e.g. first name, last name, username, a word in the affiliation field).
   */
  findPublicUsers: {
    parameters: {
      query?: {
        /** @description Query string to search in user data */
        q?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserReadPublic'][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['TekstErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Login */
  'auth:cookie.login': {
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['Body_auth_cookie_login_auth_cookie_login_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Logout */
  'auth:cookie.logout': {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
    };
  };
  /** Login */
  'auth:jwt.login': {
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['Body_auth_jwt_login_auth_jwt_login_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['BearerResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Logout */
  'auth:jwt.logout': {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
    };
  };
  /** Register */
  'register:register': {
    requestBody: {
      content: {
        'application/json': components['schemas']['UserCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Request verify token */
  'verify:requestToken': {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_verify_request_token_auth_request_verify_token_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Verify */
  'verify:verify': {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_verify_verify_auth_verify_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Forgot password */
  'reset:forgotPassword': {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_reset_forgot_password_auth_forgot_password_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Reset password */
  'reset:resetPassword': {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_reset_reset_password_auth_reset_password_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get user */
  'users:user': {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
      /** @description Not a superuser. */
      403: {
        content: never;
      };
      /** @description The user does not exist. */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Delete user */
  'users:deleteUser': {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
      /** @description Not a superuser. */
      403: {
        content: never;
      };
      /** @description The user does not exist. */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Update user */
  'users:patchUser': {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        content: never;
      };
      /** @description Not a superuser. */
      403: {
        content: never;
      };
      /** @description The user does not exist. */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
